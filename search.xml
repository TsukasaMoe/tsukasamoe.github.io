<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL如何存储表情</title>
      <link href="/2024/05/14/MySQL%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E8%A1%A8%E6%83%85/"/>
      <url>/2024/05/14/MySQL%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E8%A1%A8%E6%83%85/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="MySQL默认的字符编码为什么不支持表情存储"><a href="#MySQL默认的字符编码为什么不支持表情存储" class="headerlink" title="MySQL默认的字符编码为什么不支持表情存储"></a>MySQL默认的字符编码为什么不支持表情存储</h1><p>UTF-8编码规范是一种可变长度的字符编码（1~4字节），emoji表情需要4个字节存储，正常来说UTF-8规范的字符集应该可以存储emoji表情。MySQL 5.7版本默认字符集为utf8，排序规则为utf8_general_ci，utf8字符集实际上是一个不完整的 UTF-8 实现，只能存储最多 3 个字节的字符。可以说无法存储emoji表情是MySQL的锅，当然它提供了UTF-8的完整编码实现：utf8mb4字符集。</p><p>拓展下：UTF-8中的8是说每个字符的编码单位是8位，一个英文字符占用一个字节的存储空间，一个中文（含繁体）占用三个字节的存储空间。</p><p><strong>查看当前MySQL默认的字符集和编码</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select version(); 可查看当前mysql版本，本地测试的mysql使用的5.7，输出示例如下：</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_server&#x27;</span>; <span class="comment">-- utf8</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation_server&#x27;</span>; <span class="comment">-- utf8_general_ci</span></span><br></pre></td></tr></table></figure><p><strong>查看某个数据库或者表的编码</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE sakila;</span><br><span class="line"><span class="comment">-- 输出示例：CREATE DATABASE `sakila` /*!40100 DEFAULT CHARACTER SET utf8 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> your_table_name;</span><br><span class="line"><span class="comment">-- 输出示例：</span></span><br><span class="line"><span class="comment">-- CREATE TABLE `actor` (</span></span><br><span class="line"><span class="comment">--   `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">--   `first_name` varchar(45) NOT NULL,</span></span><br><span class="line"><span class="comment">--   `last_name` varchar(45) NOT NULL,</span></span><br><span class="line"><span class="comment">--   `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="comment">--   PRIMARY KEY (`actor_id`),</span></span><br><span class="line"><span class="comment">--   KEY `idx_actor_last_name` (`last_name`)</span></span><br><span class="line"><span class="comment">-- ) ENGINE=InnoDB AUTO_INCREMENT=202 DEFAULT CHARSET=utf8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="MySQL如何存储表情"><a href="#MySQL如何存储表情" class="headerlink" title="MySQL如何存储表情"></a>MySQL如何存储表情</h1><p>解决方案呼之欲出了，即使用UTF-8的完整编码实现：utf8mb4字符集。因此，建议建库时显式地设置字符集utf8mb4，排序规则根据大小写是否敏感选择。</p><p><strong>检查字符集和排序规则的默认配置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检查MySQL的字符集和排序规则的默认配置</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_database&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation_database&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查表的字符集和排序规则的默认配置</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建数据库或表时指定字符集+排序规则（大小写是否敏感）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydatabase <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p><strong>创建、修改表的字符集和排序规则</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改表字段的字符集和排序规则</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable MODIFY content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附字符集查询常用命令"><a href="#附字符集查询常用命令" class="headerlink" title="附字符集查询常用命令"></a>附字符集查询常用命令</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询支持的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br><span class="line"><span class="comment">-- 查询支持的排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> <span class="keyword">WHERE</span> Charset <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    @<span class="variable">@character_set_database</span> <span class="keyword">AS</span> <span class="string">&#x27;Database Character Set&#x27;</span>, </span><br><span class="line">    @<span class="variable">@collation_database</span> <span class="keyword">AS</span> <span class="string">&#x27;Database Collation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个表的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;actor&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询某个列的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> actor;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> actor <span class="keyword">where</span> field <span class="operator">=</span> <span class="string">&#x27;first_name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 INFORMATION_SCHEMA.COLUMNS 表来获取表各个列的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME, CHARACTER_SET_NAME, COLLATION_NAME </span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS </span><br><span class="line"><span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;mytable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 INFORMATION_SCHEMA.SCHEMATA 表来获取数据库的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SELECT</span> SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.SCHEMATA</span><br><span class="line"><span class="keyword">WHERE</span> SCHEMA_NAME <span class="operator">=</span> <span class="string">&#x27;database_name&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows的专用和公用网络的共享配置和切换</title>
      <link href="/2024/04/18/Windows%E7%9A%84%E4%B8%93%E7%94%A8%E5%92%8C%E5%85%AC%E7%94%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%87%E6%8D%A2/"/>
      <url>/2024/04/18/Windows%E7%9A%84%E4%B8%93%E7%94%A8%E5%92%8C%E5%85%AC%E7%94%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>文章<a href="http://blog.tsukasa.moe/2023/10/18/Use-SMB-protocol-to-share-files-in-windows-system/">Windows 中通过 SMB 协议共享文件允许局域网设备访问</a>中提到网络高级共享设置，之前通过SMB进行文件共享时都一把配置了，但实际上这3个不同的网络配置代表了不同类型的网络环境，对应着不同的安全和共享设置。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>在Windows 10的高级共享设置中，”专用网络”、”来宾或公用网络”以及”所有网络”代表了不同类型的网络环境，应该对应不同的安全和共享设置。下面是各个网络环境的介绍：</p><ul><li>专用网络：<br>通常用于信任的网络，比如家庭网络或者办公室网络，可以配置允许设备之间共享文件、打印机和其他资源。</li><li>来宾或公用网络：<br>通常用于公共场所或者不太信任的网络，比如咖啡馆、酒店或者机场的Wi-Fi网络，不建议开启文件共享，保护安全隐私</li><li>所有网络：<br>专用网络和公用网络公用一份相同的配置。</li></ul><h1 id="切换网络类型"><a href="#切换网络类型" class="headerlink" title="切换网络类型"></a>切换网络类型</h1><p><strong>方法一：</strong></p><p><code>Win+R</code>打开运行窗口，输入secpol.msc打开本地安全策略，在网络列表管理策略中，在对应的网络连接（以太网或局域网）上右键，点击属性，在网络位置中设置。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404182026436.png" alt=""></p><p><strong>方法二：</strong></p><p><code>Win+I</code>打开Windows 10设置，网络和Internet，点击当前网络的属性进入设置界面即可设置网络类型。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404182304356.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404182306919.jpg" alt=""></p><h1 id="设置相应网络类型的共享策略"><a href="#设置相应网络类型的共享策略" class="headerlink" title="设置相应网络类型的共享策略"></a>设置相应网络类型的共享策略</h1><p>打开<code>控制面板\网络和 Internet\网络和共享中心\高级共享设置</code>，在对应的网络类型下设置共享策略。例如，如果只想在专用网络中共享文件，只需在下面的专用网络中更改共享选项。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404182310329.jpg" alt=""></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目的HTTP客户端工具RestTemplate</title>
      <link href="/2023/11/10/RestTemplate-learning/"/>
      <url>/2023/11/10/RestTemplate-learning/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>文章详细内容</p><p>1, java 9+ 自带 httpclient(我比较喜欢这种链式调用的,但是 java8 没有)</p><p>2, apache 原生 httpclient</p><p>3, 封装过的 apache httpclient</p><p>4, OkHttp</p><p>5, Feign</p><p>6, RestTemplate</p><p>7, Retrofit</p><p>jsoup<br>webclient<br>RxJava<br>EasyOKHttp<br>Unirest<br>okhttp+retrofit+rxjava </p><p>请求和资源的转发是指在一个过滤器中，通过调用 RequestDispatcher 的 forward 方法将请求和响应传递给其他资源（例如，另一个 Servlet 或 JSP 页面）。这个转发的过程可能导致过滤器链的其他过滤器再次被调用，从而可能引起一些逻辑的多次执行。继承 OncePerRequestFilter 主要是为了应对过滤器链中的多次调用问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">            HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response,</span></span><br><span class="line"><span class="params">            FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在这里添加你的自定义逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行请求和资源的转发</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/someResource&quot;</span>);</span><br><span class="line">        dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的逻辑将不会被重复执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OpenSSL生成自签名证书</p><h1 id="1、生成自签名CA（Self-signed-CA）来签发证书"><a href="#1、生成自签名CA（Self-signed-CA）来签发证书" class="headerlink" title="1、生成自签名CA（Self-signed CA）来签发证书"></a>1、生成自签名CA（Self-signed CA）来签发证书</h1><blockquote><p>更新了openssh，安装Java环境（确保JDK中的keytool可用）后，使用这个虚拟机作为自签名CA来签发Cert </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -sha256 -days 3650 -newkey rsa:4096 -keyout rootCA.key -out rootCA.crt</span><br></pre></td></tr></table></figure><h1 id="2、生成凭证签发请求CSR（Certificate-Signing-Request）"><a href="#2、生成凭证签发请求CSR（Certificate-Signing-Request）" class="headerlink" title="2、生成凭证签发请求CSR（Certificate Signing Request）"></a>2、生成凭证签发请求CSR（Certificate Signing Request）</h1><blockquote><p>站点在向全文机构申请证书前准备的自己的资料（包含公钥但不应当包含私钥）。CA基于CSR签发证书（Cert） 。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -newkey rsa:4096 -keyout localhost.key -out localhost.csr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202311141709768.png" alt=""></p><h1 id="4、使用Self-signed-CA签发localhost证书"><a href="#4、使用Self-signed-CA签发localhost证书" class="headerlink" title="4、使用Self-signed CA签发localhost证书"></a>4、使用Self-signed CA签发localhost证书</h1><h2 id="（1）获得-Cert-所需的其它信息"><a href="#（1）获得-Cert-所需的其它信息" class="headerlink" title="（1）获得 Cert 所需的其它信息"></a>（1）获得 Cert 所需的其它信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; localhost.ext &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">IP.1 = 192.168.2.99</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="（2）使用-Self-signed-CA-签发-localhost-证书"><a href="#（2）使用-Self-signed-CA-签发-localhost-证书" class="headerlink" title="（2）使用 Self-signed CA 签发 localhost 证书"></a>（2）使用 Self-signed CA 签发 localhost 证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -CA rootCA.crt -CAkey rootCA.key -in localhost.csr -out localhost.crt -days 365 -CAcreateserial -extfile localhost.ext</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="SSL-TLS证书相关的一些概念"><a href="#SSL-TLS证书相关的一些概念" class="headerlink" title="SSL/TLS证书相关的一些概念"></a>SSL/TLS证书相关的一些概念</h1><p>KeyManager：管理本地密钥库中的密钥（私钥），用于配置SSL/TLS握手中的客户端证书，使其能够进行双向SSL/TLS认证。<br>keyPassword：访问客户端证书的私钥的密码。通常通过非对称加密算法生成密钥对，为了保护私钥，通常会设置一个密码。<br>KeyStore：用于存储密钥和证书的容器，既可以包含客户端证书和私钥（由KeyManager使用），也可以包含信任的服务器证书（由TrustManager使用）。<br>TrustManager：配置信任的证书，用于验证服务器的身份。<br>TrustStrategy：一个策略接口，用于定义是否信任远程服务器的证书。可以自定义信任策略，例如接受所有证书、仅接受特定颁发机构的证书等</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目统一响应格式设计和全局异常处理</title>
      <link href="/2023/10/31/Spring-global-exception-handling-and-error-code-design/"/>
      <url>/2023/10/31/Spring-global-exception-handling-and-error-code-design/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>写一个Spring项目统一响应格式设计和全局异常处理的best-practice，便于后续查阅。</p><h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><p>现在一个良好的web项目，基本采用前后端分离的格式，本次设计目标：</p><ul><li>统一响应格式，可以极大方便前后端研发之间的沟通，简化和统一双方的代码处理。</li><li>全局统一异常处理的好处是消除分散在代码逻辑中异常处理，if分支和try-catch代码块。</li><li>考虑响应码描述的国际化处理，参数替换，支持灵活的配置。</li><li>调用方API层级的报错给出友好、结构化的提示。</li><li>考虑服务端后台依赖的三方业务返回的响应码映射。</li><li>研发使用起来简单，不易犯错。</li></ul><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="统一响应格式"><a href="#统一响应格式" class="headerlink" title="统一响应格式"></a>统一响应格式</h2><p>结合工作经验和借鉴大厂的API定义，设计如下几个类：</p><ul><li>BaseResult：基本响应基类，只包含结果码code, 结果码描述msg，一般地所有的响应子类继承该类型。</li><li>Response：统一响应类，继承自BaseResult（必选），自身包含业务数据data（必选，没有内容时为null），额外数据payload（可选），API层级报错列表errors（可选），Response通过建造者模式构建。</li><li>ResponseCodeInterface：响应码接口，提供三个方法code(), message(), i18nKey()，所有响应码枚举类均实现该接口并重写三个方法，确保新增响应码枚举类型时提供统一的访问入口，面向接口编程。</li><li>ResponseEnum：响应码集合。自身为全局结果码集合，包含所有类型（全局，Internal, External, Business, Client）的响应码列表，三个字段分别为响应码code, 默认响应描述（允许带占位符）msg，响应码描述的国际化配置键i18nKey</li></ul><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>将所有异常处理抽出，放到@ControllerAdvice类中的@ExceptionHandler注解的方法中处理，针对不同异常执行不同的处理逻辑。</p><p>代码逻辑可能根据需要会抛出以下异常</p><ul><li>业务异常：ServiceException继承自RuntimeException，业务处理过程中，可以抛出ServiceException退出接下来的业务处理进入到统一异常处理，返回响应给客户端。</li><li>受检异常：业务自身捕获处理，可以封装成ServiceException抛出。</li><li>除业务异常外的非受检异常：仅处理Hiberante validator等可识别的异常，封装到List<Response.Error>列表中。</li><li>其他未知异常：Throwable统一设置业务内部异常。</li></ul><p>附Java异常体系，忘记时可以查阅。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202311090200033.png" alt=""></p><p>国际化：</p><ul><li>封装Spring I18N的messageSource到MessageUtils，提供国际化处理方法。</li><li>针对API层级的报错，通过Hibernate Validator组件实现国际化。</li><li>异常流程：创建ServiceException时执行错误描述信息国际化。</li><li>正常处理：Response.ResponseBuilder构造方法执行结果码描述国际化。</li></ul><h1 id="响应示例"><a href="#响应示例" class="headerlink" title="响应示例"></a>响应示例</h1><p>code和message</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常响应1：</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ALIPAY0001000000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COMPLETED&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100.00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;external_ext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10001&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常响应2</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;Success&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错响应1</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">4001</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;Failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;bankNo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;银行卡号不符合规范&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>结果码枚举增删改：ResponseEnum负责管理，所有返回给调用方的响应码均要在这里定义。</p><ul><li>业务流程处理成功：<ul><li>Controller层可以直接返回Response.success(data)等封装好的常用响应，也可以通过Response.ResponseBuilder建造者生成响应返回。</li></ul></li><li>业务流程处理失败：<ul><li>直接创建并抛出ServiceException，并把需要传递的数据放入ServiceException的</li><li>非主动抛出的异常，交由@ControllerAdvice处理</li></ul></li></ul><p>扩展点：</p><ul><li>如果需要新增异常类型和处理，可以继承ServiceException，然后在@ControllerAdvice中新增一个@ExceptionHandler注解的方法处理即可，适合细分不同业务子异常处理</li><li>如果需要在返回响应前做一些公共的操作，可以实现ResponseBodyAdvice接口或者继承AbstractMappingJacksonResponseBodyAdvice抽象类来达成。</li><li>对于数据库异常，可以通过AOP切面针对dao层进行处理</li><li>Filter过滤链的异常假如也希望捕获并处理，可以通过实现Filter接口重写doFilter，在catchException中捕获后封装成统一响应格式。</li><li>HandlerExceptionResolver接口 ===&gt; Spring Web MVC</li></ul><h1 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h1><p>ResponseCodeInterface接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回响应码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回具体的详细错误描述（非国际化信息，可能含有占位符）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应码描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * i18n资源文件的key，value为国际化响应码描述, 详见messages.properties文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">i18nKey</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResponseCodeEnum响应码集合枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResponseCodeEnum</span> <span class="keyword">implements</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码集合</span></span><br><span class="line"><span class="comment">     * ******以下是旧的设计****</span></span><br><span class="line"><span class="comment">     * 1~9999 为保留错误码 或者 常用错误码</span></span><br><span class="line"><span class="comment">     * 10000~19999 为内部错误码</span></span><br><span class="line"><span class="comment">     * 20000~29999 客户端错误码 （客户端异常调用之类的错误）</span></span><br><span class="line"><span class="comment">     * 30000~39999 为第三方错误码 （代码正常，但是第三方异常）</span></span><br><span class="line"><span class="comment">     * 40000~49999 为业务逻辑 错误码 （无异常，代码正常流转，并返回提示给用户）</span></span><br><span class="line"><span class="comment">     * 由于系统内的错误码都是独一无二的，所以错误码应该放在common包集中管理</span></span><br><span class="line"><span class="comment">     * ---------------------------</span></span><br><span class="line"><span class="comment">     * 错误码不一定位数一定要相同。比如腾讯的微信接口错误码的位数就并不相同。按照常理错误码的数量大小应该是：</span></span><br><span class="line"><span class="comment">     * 内部错误码 &lt; 客户端错误码 &lt; 第三方错误码 &lt; 业务错误码</span></span><br><span class="line"><span class="comment">     * 所以我们应该尽可能的把错误码的数量留给业务错误码</span></span><br><span class="line"><span class="comment">     * ---------------------------</span></span><br><span class="line"><span class="comment">     * *******新的设计**********</span></span><br><span class="line"><span class="comment">     * 1~99 为内部错误码（框架本身的错误）</span></span><br><span class="line"><span class="comment">     * 100~999 客户端错误码 （客户端异常调用之类的错误）</span></span><br><span class="line"><span class="comment">     * 1000~9999为第三方错误码 （代码正常，但是第三方异常）</span></span><br><span class="line"><span class="comment">     * 10000~99999 为业务逻辑 错误码 （无异常，代码正常流转，并返回提示给用户）</span></span><br><span class="line"><span class="comment">     * 由于系统内的错误码都是独一无二的，所以错误码应该放在common包集中管理</span></span><br><span class="line"><span class="comment">     * ---------------------------</span></span><br><span class="line"><span class="comment">     * 总体设计就是值越小  错误严重性越高</span></span><br><span class="line"><span class="comment">     * 目前10000~19999是初始系统内嵌功能使用的错误码，后续开发者可以直接使用20000以上的错误码作为业务错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;COMMON.SUCCESS&quot;</span>),</span><br><span class="line">    PENDING(<span class="number">1</span>, <span class="string">&quot;In-progress&quot;</span>, <span class="string">&quot;COMMON.PENDING&quot;</span>),</span><br><span class="line">    FAILED(<span class="number">99999</span>, <span class="string">&quot;Failed&quot;</span>, <span class="string">&quot;COMMON.FAILED&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">    <span class="comment">// 国际化描述的key，value为错误描述（可能含有占位符，占位符由程序上下文传入参数填充）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String i18nKey;</span><br><span class="line"></span><br><span class="line">    ResponseCodeEnum(<span class="type">int</span> code, String message, String i18nKey) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.i18nKey = i18nKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">i18nKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.i18nKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 10000~99999 为业务逻辑 错误码 （无代码异常，代码正常流转，并返回提示给用户）</span></span><br><span class="line"><span class="comment">     * 1XX01   XX是代表模块的意思 比如10101   01是Permission模块</span></span><br><span class="line"><span class="comment">     * 错误码的命名最好以模块为开头  比如  NOT_ALLOWED_TO_OPERATE前面加上PERMISSION = PERMISSION_NOT_ALLOWED_TO_OPERATE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Business</span> <span class="keyword">implements</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------------------- COMMON --------------------------------------</span></span><br><span class="line"></span><br><span class="line">        COMMON_OBJECT_NOT_FOUND(<span class="number">10001</span>, <span class="string">&quot;找不到ID为 &#123;&#125; 的 &#123;&#125;&quot;</span>, <span class="string">&quot;Business.OBJECT_NOT_FOUND&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_UNSUPPORTED_OPERATION(<span class="number">10002</span>, <span class="string">&quot;不支持的操作&quot;</span>, <span class="string">&quot;Business.UNSUPPORTED_OPERATION&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_FILE_NOT_ALLOWED_TO_DOWNLOAD(<span class="number">10003</span>, <span class="string">&quot;文件名称(&#123;&#125;)非法，不允许下载&quot;</span>, <span class="string">&quot;Business.FILE_NOT_ALLOWED_TO_DOWNLOAD&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------------------- PERMISSION -----------------------------------</span></span><br><span class="line"></span><br><span class="line">        PERMISSION_FORBIDDEN_TO_MODIFY_ADMIN(<span class="number">10101</span>, <span class="string">&quot;不允许修改管理员的信息&quot;</span>, <span class="string">&quot;Business.FORBIDDEN_TO_MODIFY_ADMIN&quot;</span>),</span><br><span class="line"></span><br><span class="line">        PERMISSION_NOT_ALLOWED_TO_OPERATE(<span class="number">10202</span>, <span class="string">&quot;没有权限进行此操作，请联系管理员&quot;</span>, <span class="string">&quot;Business.NO_PERMISSION_TO_OPERATE&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------------------- LOGIN -----------------------------------------</span></span><br><span class="line"></span><br><span class="line">        LOGIN_WRONG_USER_PASSWORD(<span class="number">10201</span>, <span class="string">&quot;用户密码错误，请重新输入&quot;</span>, <span class="string">&quot;Business.LOGIN_WRONG_USER_PASSWORD&quot;</span>),</span><br><span class="line"></span><br><span class="line">        LOGIN_ERROR(<span class="number">10202</span>, <span class="string">&quot;登录失败：&#123;&#125;&quot;</span>, <span class="string">&quot;Business.LOGIN_ERROR&quot;</span>),</span><br><span class="line"></span><br><span class="line">        LOGIN_CAPTCHA_CODE_WRONG(<span class="number">10203</span>, <span class="string">&quot;验证码错误&quot;</span>, <span class="string">&quot;Business.LOGIN_CAPTCHA_CODE_WRONG&quot;</span>),</span><br><span class="line"></span><br><span class="line">        LOGIN_CAPTCHA_CODE_EXPIRE(<span class="number">10204</span>, <span class="string">&quot;验证码过期&quot;</span>, <span class="string">&quot;Business.LOGIN_CAPTCHA_CODE_EXPIRE&quot;</span>),</span><br><span class="line"></span><br><span class="line">        LOGIN_CAPTCHA_CODE_NULL(<span class="number">10205</span>, <span class="string">&quot;验证码为空&quot;</span>, <span class="string">&quot;Business.LOGIN_CAPTCHA_CODE_NULL&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------------------- UPLOAD -----------------------------------------</span></span><br><span class="line"></span><br><span class="line">        UPLOAD_FILE_TYPE_NOT_ALLOWED(<span class="number">10401</span>, <span class="string">&quot;不允许上传的文件类型，仅允许：&#123;&#125;&quot;</span>, <span class="string">&quot;Business.UPLOAD_FILE_TYPE_NOT_ALLOWED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        UPLOAD_FILE_NAME_EXCEED_MAX_LENGTH(<span class="number">10402</span>, <span class="string">&quot;文件名长度超过：&#123;&#125; &quot;</span>, <span class="string">&quot;Business.UPLOAD_FILE_NAME_EXCEED_MAX_LENGTH&quot;</span>),</span><br><span class="line"></span><br><span class="line">        UPLOAD_FILE_SIZE_EXCEED_MAX_SIZE(<span class="number">10403</span>, <span class="string">&quot;文件名大小超过：&#123;&#125; MB&quot;</span>, <span class="string">&quot;Business.UPLOAD_FILE_SIZE_EXCEED_MAX_SIZE&quot;</span>),</span><br><span class="line"></span><br><span class="line">        UPLOAD_IMPORT_EXCEL_FAILED(<span class="number">10404</span>, <span class="string">&quot;导入excel失败：&#123;&#125;&quot;</span>, <span class="string">&quot;Business.UPLOAD_IMPORT_EXCEL_FAILED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        UPLOAD_FILE_IS_EMPTY(<span class="number">10405</span>, <span class="string">&quot;上传文件为空&quot;</span>, <span class="string">&quot;Business.UPLOAD_FILE_IS_EMPTY&quot;</span>),</span><br><span class="line"></span><br><span class="line">        UPLOAD_FILE_FAILED(<span class="number">10406</span>, <span class="string">&quot;上传文件失败：&#123;&#125;&quot;</span>, <span class="string">&quot;Business.UPLOAD_FILE_FAILED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---------------------------------- USER -----------------------------------------------</span></span><br><span class="line"></span><br><span class="line">        USER_NON_EXIST(<span class="number">10501</span>, <span class="string">&quot;登录用户：&#123;&#125; 不存在&quot;</span>, <span class="string">&quot;Business.USER_NON_EXIST&quot;</span>),</span><br><span class="line"></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String i18nKey;</span><br><span class="line"></span><br><span class="line">        Business(<span class="type">int</span> code, String message, String i18nKey) &#123;</span><br><span class="line">            Assert.isTrue(code &gt; <span class="number">10000</span> &amp;&amp; code &lt; <span class="number">99999</span>,</span><br><span class="line">                <span class="string">&quot;错误码code值定义失败，Business错误码code值范围在10000~99099之间，请查看ErrorCode.Business类，当前错误码码为&quot;</span> + name());</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errorTypeName</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">            Assert.isTrue(i18nKey != <span class="literal">null</span> &amp;&amp; i18nKey.startsWith(errorTypeName),</span><br><span class="line">                String.format(<span class="string">&quot;错误码i18nKey值定义失败，%s错误码i18nKey值必须以%s开头，当前错误码为%s&quot;</span>, errorTypeName, errorTypeName, name()));</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.i18nKey = i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">i18nKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1000~9999是外部错误码  比如调用支付失败</span></span><br><span class="line"><span class="comment">     * 需要确认是否要透传三方错误给客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">External</span> <span class="keyword">implements</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 支付宝调用失败</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        FAIL_TO_PAY_ON_ALIPAY(<span class="number">1001</span>, <span class="string">&quot;支付宝调用失败&quot;</span>, <span class="string">&quot;External.FAIL_TO_PAY_ON_ALIPAY&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String i18nKey;</span><br><span class="line"></span><br><span class="line">        External(<span class="type">int</span> code, String message, String i18nKey) &#123;</span><br><span class="line">            Assert.isTrue(code &gt; <span class="number">1000</span> &amp;&amp; code &lt; <span class="number">9999</span>,</span><br><span class="line">                <span class="string">&quot;错误码code值定义失败，External错误码code值范围在1000~9999之间，请查看ErrorCode.External类，当前错误码码为&quot;</span> + name());</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errorTypeName</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">            Assert.isTrue(i18nKey != <span class="literal">null</span> &amp;&amp; i18nKey.startsWith(errorTypeName),</span><br><span class="line">                String.format(<span class="string">&quot;错误码i18nKey值定义失败，%s错误码i18nKey值必须以%s开头，当前错误码为%s&quot;</span>, errorTypeName, errorTypeName, name()));</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.i18nKey = i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">i18nKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 100~999是客户端错误码</span></span><br><span class="line"><span class="comment">     * 客户端如 Web+小程序+手机端  调用出错</span></span><br><span class="line"><span class="comment">     * 可能由于参数问题或者授权问题或者调用过去频繁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Client</span> <span class="keyword">implements</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">        COMMON_FORBIDDEN_TO_CALL(<span class="number">101</span>, <span class="string">&quot;禁止调用&quot;</span>, <span class="string">&quot;Client.COMMON_FORBIDDEN_TO_CALL&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_REQUEST_TOO_OFTEN(<span class="number">102</span>, <span class="string">&quot;调用太过频繁&quot;</span>, <span class="string">&quot;Client.COMMON_REQUEST_TOO_OFTEN&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_REQUEST_PARAMETERS_INVALID(<span class="number">103</span>, <span class="string">&quot;请求参数异常，&#123;0&#125;&quot;</span>, <span class="string">&quot;Client.COMMON_REQUEST_PARAMETERS_INVALID&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_REQUEST_METHOD_INVALID(<span class="number">104</span>, <span class="string">&quot;请求方式: &#123;&#125; 不支持&quot;</span>, <span class="string">&quot;Client.COMMON_REQUEST_METHOD_INVALID&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_HTTP_MEDIA_TYPE_NOT_SUPPORTED_ERROR(<span class="number">109</span>, <span class="string">&quot;请求类型：&#123;&#125; 不支持&quot;</span>, <span class="string">&quot;Client.COMMON_HTTP_MEDIA_TYPE_NOT_SUPPORTED_ERROR&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_REQUEST_RESUBMIT(<span class="number">105</span>, <span class="string">&quot;请求重复提交&quot;</span>, <span class="string">&quot;Client.COMMON_REQUEST_RESUBMIT&quot;</span>),</span><br><span class="line"></span><br><span class="line">        COMMON_NO_AUTHORIZATION(<span class="number">106</span>, <span class="string">&quot;请求接口：&#123;&#125; 失败，用户未授权&quot;</span>, <span class="string">&quot;Client.COMMON_NO_AUTHORIZATION&quot;</span>),</span><br><span class="line"></span><br><span class="line">        INVALID_TOKEN(<span class="number">107</span>, <span class="string">&quot;token异常&quot;</span>, <span class="string">&quot;Client.INVALID_TOKEN&quot;</span>),</span><br><span class="line"></span><br><span class="line">        TOKEN_PROCESS_FAILED(<span class="number">108</span>, <span class="string">&quot;token处理失败：&#123;&#125;&quot;</span>, <span class="string">&quot;Client.TOKEN_PROCESS_FAILED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String i18nKey;</span><br><span class="line"></span><br><span class="line">        Client(<span class="type">int</span> code, String message, String i18nKey) &#123;</span><br><span class="line">            Assert.isTrue(code &gt; <span class="number">100</span> &amp;&amp; code &lt; <span class="number">999</span>,</span><br><span class="line">                <span class="string">&quot;错误码code值定义失败，Client错误码code值范围在100~999之间，请查看ErrorCode.Client类，当前错误码码为&quot;</span> + name());</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errorTypeName</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">            Assert.isTrue(i18nKey != <span class="literal">null</span> &amp;&amp; i18nKey.startsWith(errorTypeName),</span><br><span class="line">                String.format(<span class="string">&quot;错误码i18nKey值定义失败，%s错误码i18nKey值必须以%s开头，当前错误码为%s&quot;</span>, errorTypeName, errorTypeName, name()));</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.i18nKey = i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">i18nKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0~99是内部错误码  例如 框架内部问题之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Internal</span> <span class="keyword">implements</span> <span class="title class_">ResponseCodeInterface</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 内部错误码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INVALID_PARAMETER(<span class="number">1</span>, <span class="string">&quot;参数异常：&#123;&#125;&quot;</span>, <span class="string">&quot;Internal.INVALID_PARAMETER&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 该错误主要用于返回  未知的异常（大部分是RuntimeException） 程序未能捕获 未能预料的错误</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INTERNAL_ERROR(<span class="number">2</span>, <span class="string">&quot;系统内部错误：&#123;&#125;&quot;</span>, <span class="string">&quot;Internal.INTERNAL_ERROR&quot;</span>),</span><br><span class="line"></span><br><span class="line">        GET_ENUM_FAILED(<span class="number">3</span>, <span class="string">&quot;获取枚举类型失败, 枚举类：&#123;&#125;&quot;</span>, <span class="string">&quot;Internal.GET_ENUM_FAILED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        GET_CACHE_FAILED(<span class="number">4</span>, <span class="string">&quot;获取缓存失败&quot;</span>, <span class="string">&quot;Internal.GET_CACHE_FAILED&quot;</span>),</span><br><span class="line"></span><br><span class="line">        DB_INTERNAL_ERROR(<span class="number">5</span>, <span class="string">&quot;数据库异常&quot;</span>, <span class="string">&quot;Internal.DB_INTERNAL_ERROR&quot;</span>),</span><br><span class="line"></span><br><span class="line">        LOGIN_CAPTCHA_GENERATE_FAIL(<span class="number">7</span>, <span class="string">&quot;验证码生成失败&quot;</span>, <span class="string">&quot;Internal.LOGIN_CAPTCHA_GENERATE_FAIL&quot;</span>),</span><br><span class="line"></span><br><span class="line">        EXCEL_PROCESS_ERROR(<span class="number">8</span>, <span class="string">&quot;excel处理失败：&#123;&#125;&quot;</span>, <span class="string">&quot;Internal.EXCEL_PROCESS_ERROR&quot;</span>),</span><br><span class="line"></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String i18nKey;</span><br><span class="line"></span><br><span class="line">        Internal(<span class="type">int</span> code, String message, String i18nKey) &#123;</span><br><span class="line">            Assert.isTrue(code &lt; <span class="number">100</span>,</span><br><span class="line">                <span class="string">&quot;错误码code值定义失败，Internal错误码code值范围在100~999之间，请查看ErrorCode.Internal类，当前错误码码为&quot;</span> + name());</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errorTypeName</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">            Assert.isTrue(i18nKey != <span class="literal">null</span> &amp;&amp; i18nKey.startsWith(errorTypeName),</span><br><span class="line">                String.format(<span class="string">&quot;错误码i18nKey值定义失败，%s错误码i18nKey值必须以%s开头，当前错误码为%s&quot;</span>, errorTypeName, errorTypeName, name()));</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.i18nKey = i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">i18nKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.i18nKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务异常基类ServiceException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;服务基本异常类型&quot;, description = &quot;服务基本异常类型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常的结果码枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">protected</span> ResponseCodeInterface responseCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面2个message，在ServiceException实例化后，都表示替换了占位符的错误描述，一般地，通过getMessage()方法获取最终的错误描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String message;</span><br><span class="line">    <span class="keyword">protected</span> String i18nMessage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 额外数据，支持扩展</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 如果某个接口由一些额外的数据，有一些特殊的数据  可以放在这个payload里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; payload;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code =&gt; 传入的枚举类的code</span></span><br><span class="line"><span class="comment">     * message =&gt; 传入的枚举类的message，不涉及参数替换，通常为一段无需替换占位符的错误描述</span></span><br><span class="line"><span class="comment">     * i18nMessage =&gt; 传入枚举类的i18nKey字段的国际化信息，在对应的message_$&#123;language&#125;_$&#123;country&#125;.properties中查找该key对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResponseCodeInterface responseCode)</span> &#123;</span><br><span class="line">        fillPayload(<span class="literal">null</span>);</span><br><span class="line">        fillResponseCode(responseCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code =&gt; 传入的枚举类的code</span></span><br><span class="line"><span class="comment">     * message =&gt; 替换了参数后的message，枚举类中该字段含有占位符的错误描述</span></span><br><span class="line"><span class="comment">     * i18nMessage =&gt; 替换了参数后的i18nMessage，i18nKey字段的国际化信息含有占位符（也可以不含），会被args参数列表进行替换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResponseCodeInterface responseCode, Object... args)</span> &#123;</span><br><span class="line">        fillPayload(<span class="literal">null</span>);</span><br><span class="line">        fillResponseCode(responseCode, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通常用于包装其他异常为ServiceException的场景</span></span><br><span class="line"><span class="comment">     * 注意：如果是try catch的情况下捕获异常并转为ServiceException的话，一定要填入Throwable e，不然会丢失堆栈信息</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * code =&gt; 传入的枚举类的code</span></span><br><span class="line"><span class="comment">     * message =&gt; 替换了参数后的message，枚举类中该字段含有占位符的错误描述</span></span><br><span class="line"><span class="comment">     * i18nMessage =&gt; 替换了参数后的i18nMessage，i18nKey字段的国际化信息含有占位符（也可以不含），会被args参数列表进行替换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e            捕获到的原始异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseCode 错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args         错误详细信息参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResponseCodeInterface responseCode, Throwable e, Object... args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(e);</span><br><span class="line">        fillPayload(<span class="literal">null</span>);</span><br><span class="line">        fillResponseCode(responseCode, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResponseCodeInterface responseCode, Map&lt;String, Object&gt; payload, Object... args)</span> &#123;</span><br><span class="line">        fillPayload(payload);</span><br><span class="line">        fillResponseCode(responseCode, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResponseCodeInterface responseCode, Throwable e, Map&lt;String, Object&gt; payload, Object... args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(e);</span><br><span class="line">        fillPayload(payload);</span><br><span class="line">        fillResponseCode(responseCode, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fillPayload</span><span class="params">(Map&lt;String, Object&gt; payload)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.payload = payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fillResponseCode</span><span class="params">(ResponseCodeInterface responseCode, Object... args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.responseCode = responseCode;</span><br><span class="line">        <span class="comment">// 替换占位符后的默认错误描述</span></span><br><span class="line">        <span class="built_in">this</span>.message = MessageFormatter.arrayFormat(responseCode.message(), args).getMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 替换占位符后的国际化错误描述</span></span><br><span class="line">            <span class="built_in">this</span>.i18nMessage = MessageUtils.message(responseCode.i18nKey(), args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;MessageUtils not ready, depends on messageSource&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;could not found i18nMessage entry for key: &quot;</span> + responseCode.i18nKey(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面2个方法均来自Throwable，写法都一样，意味着ServiceException对象返回的都是经过参数替换后的国际化错误描述信息（无占位符可不替换，但如有配置国际化信息仍然展示国际化信息）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i18nMessage != <span class="literal">null</span> ? i18nMessage : message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLocalizedMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i18nMessage != <span class="literal">null</span> ? i18nMessage : message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局统一异常处理ExceptionHandlerAdvice类：通过@RestControllerAdvice和@ExceptionHandler实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandlerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限校验异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(AccessDeniedException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleAccessDeniedException(AccessDeniedException e, HttpServletRequest request) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求地址 [&#123;0&#125;], 权限校验失败 [&#123;1&#125;]&quot;</span>, request.getRequestURI(), e.getMessage()), e);</span><br><span class="line">        <span class="keyword">return</span> Response.fail(<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResponseCodeEnum.Business.PERMISSION_NOT_ALLOWED_TO_OPERATE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方式不支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpRequestMethodNotSupportedException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException e,</span><br><span class="line">                                                           HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求地址 [&#123;0&#125;], 不支持 [&#123;1&#125;] 请求&quot;</span>, request.getRequestURI(), e.getMethod()), e);</span><br><span class="line">        <span class="keyword">return</span> Response.fail(<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResponseCodeEnum.Client.COMMON_REQUEST_METHOD_INVALID, e.getMethod()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获缓存类当中的错误</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 需要确认是否要进行捕获</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UncheckedExecutionException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleServiceException(UncheckedExecutionException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取Guava缓存出现异常!&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Response.fail(<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResponseCodeEnum.Internal.GET_CACHE_FAILED));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常（相关错误码枚举、数据等已经完成封装）</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 由开发者主动抛出该异常，因此异常e包含了ErrorCodeInterface对象（结果码code，结果描述message，国际化描述信息i18nMessage）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleServiceException(ServiceException e, HttpServletRequest request) <span class="keyword">throws</span> BindException &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;请求发生了预期异常，出错的 url [&#123;&#125;]，出错的描述为 [&#123;&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage());</span><br><span class="line">        log.warn(<span class="string">&quot;发生了业务异常：&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response.fail(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BindException、MethodArgumentNotValidException异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class, MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleBindException(BindException e, HttpServletRequest request) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了参数校验异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line"></span><br><span class="line">        Response.<span class="type">ResponseBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>.ResponseBuilder(ResponseCodeEnum.Client.COMMON_REQUEST_PARAMETERS_INVALID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象级别的验证错误，自定义注解校验一个类多个字段的场景</span></span><br><span class="line">        <span class="keyword">for</span> (ObjectError objectError : e.getGlobalErrors()) &#123;</span><br><span class="line">            builder.addError(<span class="keyword">new</span> <span class="title class_">Response</span>.Error(objectError.getObjectName(), objectError.getDefaultMessage()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字段级别的验证错误</span></span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : e.getBindingResult().getFieldErrors()) &#123;</span><br><span class="line">            builder.addError(<span class="keyword">new</span> <span class="title class_">Response</span>.Error(fieldError.getField(), fieldError.getDefaultMessage()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------方式二-------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对参数校验失败异常的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e       参数校验异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request http request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleDatabindException(ConstraintViolationException e, HttpServletRequest request) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了非预期异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line"></span><br><span class="line">        List&lt;Response.Error&gt; errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation cv : e.getConstraintViolations()) &#123;</span><br><span class="line">            errorList.add(<span class="keyword">new</span> <span class="title class_">Response</span>.Error(cv.getPropertyPath().toString(), cv.getMessage()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>.ResponseBuilder&lt;&gt;(ResponseCodeEnum.Client.COMMON_REQUEST_PARAMETERS_INVALID, JsonUtil.toJson(errorList))</span><br><span class="line">                .errors(errorList)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对spring web 中的异常的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        Spring Web 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  http request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response http response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;</span></span><br><span class="line"><span class="meta">            NoHandlerFoundException.class</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleSpringWebExceptionHandler(Exception e, HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了非预期异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>.ResponseBuilder&lt;&gt;(ResponseCodeEnum.Client.COMMON_REQUEST_METHOD_INVALID).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HttpMediaTypeNotSupportedException异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMediaTypeNotSupportedException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNSUPPORTED_MEDIA_TYPE)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleHttpMediaTypeNotSupportedException(HttpMediaTypeNotSupportedException e, HttpServletRequest request) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了非预期异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line">        <span class="keyword">return</span> Response.fail(<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResponseCodeEnum.Client.COMMON_HTTP_MEDIA_TYPE_NOT_SUPPORTED_ERROR));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; handleRuntimeException(RuntimeException e, HttpServletRequest request) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了运行时异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>.ResponseBuilder&lt;&gt;(ResponseCodeEnum.Internal.INTERNAL_ERROR).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对全局异常的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        全局异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  http request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response http response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;?&gt; throwableHandler(Throwable e, HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        log.error(MessageFormat.format(<span class="string">&quot;请求发生了非预期异常，出错的 url [&#123;0&#125;]，出错的描述为 [&#123;1&#125;]&quot;</span>,</span><br><span class="line">                request.getRequestURL().toString(), e.getMessage()), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>.ResponseBuilder&lt;&gt;(ResponseCodeEnum.Internal.INTERNAL_ERROR).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter过滤器，对拦截器的异常进行拦截，封装成Response返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;global filter exceptions&quot;</span>, ex);</span><br><span class="line">            <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> JsonUtil.toJson(Response.fail(ex));</span><br><span class="line">            writeToResponse(response, resultJson);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;global filter exceptions, unknown error:&quot;</span>, e);</span><br><span class="line">            <span class="type">Response</span> <span class="variable">resp</span> <span class="operator">=</span> Response.fail(<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResponseCodeEnum.Internal.INTERNAL_ERROR, e));</span><br><span class="line">            <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> JsonUtil.toJson(resp);</span><br><span class="line">            writeToResponse(response, resultJson);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeToResponse</span><span class="params">(ServletResponse response, String resultJson)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(resultJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应基类BaseResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;响应基础返回值&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;结果码&quot;, notes = &quot;正确响应时该值为XXXX，错误响应时为错误代码&quot;)</span></span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;code&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;结果码的消息描述&quot;, notes = &quot;人工可读的消息&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>统一响应格式Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;统一Response返回值&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方传入的额外参数，响应中通过key=externalExt的形式返回，放到payload Map结构中返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXTERNAL_EXT</span> <span class="operator">=</span> <span class="string">&quot;externalExt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;data&quot;)</span></span><br><span class="line">    <span class="meta">@JsonInclude</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;响应体&quot;, notes = &quot;正确响应时该值会被使用&quot;)</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当验证错误时，各项具体的错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;errors&quot;, required = false)</span></span><br><span class="line">    <span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误信息&quot;)</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Error&gt; errors;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 额外数据，默认将客户端传来的数据返回去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;payload&quot;, required = false)</span></span><br><span class="line">    <span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;额外数据&quot;)</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; payload;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Response</span><span class="params">(ResponseBuilder&lt;T&gt; builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder.getCode(), builder.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.data = builder.getData();</span><br><span class="line">        <span class="built_in">this</span>.errors = builder.getErrors();</span><br><span class="line">        <span class="built_in">this</span>.payload = builder.getPayload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一些常用的静态方法通过ResponseBuilder构建各种类型的响应，如果不合适则可以通过Builder定制</span></span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Response <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>(ResponseCodeEnum.SUCCESS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(ResponseCodeEnum.SUCCESS)</span><br><span class="line">                .data(data)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Response <span class="title function_">pending</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;&gt;(ResponseCodeEnum.PENDING).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">pending</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(ResponseCodeEnum.PENDING)</span><br><span class="line">                .data(data)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(ResponseCodeEnum.FAILED).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">fail</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(ResponseCodeEnum.FAILED)</span><br><span class="line">                .data(data)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">fail</span><span class="params">(ServiceException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(e.getResponseCode())</span><br><span class="line">                .payload(e.getPayload())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="title function_">fail</span><span class="params">(ServiceException e, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt;(e.getResponseCode())</span><br><span class="line">                .payload(e.getPayload())</span><br><span class="line">                .data(data)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一响应类Response建造者</span></span><br><span class="line"><span class="comment">     * 依赖于Spring Context，支持响应结果码描述国际化，参数替换。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ResponseBuilder</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ResponseCodeInterface responseCode;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 国际化的结果码信息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> T data;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Error&gt; errors;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, Object&gt; payload;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Response&lt;T&gt; <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>&lt;&gt;(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ResponseBuilder</span><span class="params">(ResponseCodeInterface responseCode, Object... args)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.responseCode = responseCode;</span><br><span class="line">            <span class="built_in">this</span>.code = responseCode.code();</span><br><span class="line">            <span class="comment">// 替换默认描述占位符后的默认错误描述</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">defaultMsg</span> <span class="operator">=</span> MessageFormatter.arrayFormat(responseCode.message(), args).getMessage();</span><br><span class="line">            <span class="type">String</span> <span class="variable">i18nMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取国际化的信息描述，如果配置responseCode.i18nKey()对应的key-value则支持国际化。也可以临时对默认的错误描述进行覆盖。</span></span><br><span class="line">                i18nMessage = MessageUtils.message(responseCode.i18nKey(), args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BeansException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;MessageUtils not ready, depends on messageSource&quot;</span>, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;could not found i18nMessage entry for key: &quot;</span> + responseCode.i18nKey(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.msg = StringUtils.isNotBlank(i18nMessage) ? i18nMessage : defaultMsg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过ServiceException业务异常创建Builder</span></span><br><span class="line"><span class="comment">         * 注：在ServiceException中已经进行错误描述的国际化处理</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ResponseBuilder</span><span class="params">(ServiceException e)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.responseCode = e.getResponseCode();</span><br><span class="line">            <span class="built_in">this</span>.code = e.getResponseCode().code();</span><br><span class="line">            <span class="built_in">this</span>.msg = e.getMessage();</span><br><span class="line">            <span class="built_in">this</span>.payload = e.getPayload();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseCodeInterface <span class="title function_">getResponseCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> responseCode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">data</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">errors</span><span class="params">(List&lt;Error&gt; errors)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.errors = errors;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;Error&gt; <span class="title function_">getErrors</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> errors;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">addError</span><span class="params">(Error error)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.errors == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.errors.add(error);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">addPayloadAttr</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.payload == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.payload.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getPayload</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">payload</span><span class="params">(Map&lt;String, Object&gt; payload)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.payload = payload;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ResponseBuilder&lt;T&gt; <span class="title function_">clientExt</span><span class="params">(Map&lt;String, Object&gt; clientExt)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.payload == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.payload.put(EXTERNAL_EXT, clientExt);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@ApiModel(&quot;统一Response返回值中错误信息的模型&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">        <span class="meta">@ApiModelProperty(name = &quot;错误项&quot;, notes = &quot;错误的具体项&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@ApiModelProperty(name = &quot;错误项说明&quot;, notes = &quot;错误的具体项说明&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="响应码映射"><a href="#响应码映射" class="headerlink" title="响应码映射"></a>响应码映射</h2><p>通常一个后端服务还会去调用第三方，比如一个聚合支付平台后面（南向）有各种支付渠道，系统层面也会依赖分布式缓存（Redis），配置中心，消息队列等内部服务，因此针对这些调用报错，后端不会直接透传，而是会进行包装，第三方错误码映射后才会返回给调用方。这部分设计暂时没有纳入进来，如果要做，下面是一些考虑的点：</p><p>todo:<br>1.依赖方的响应码（南向）到调用方（北向）响应码的映射计划通过国际化的响应码配置文件中定义。key的组成为&lt;被调用方ID&gt;.&lt;服务类型Type&gt;.&lt;南向响应码resultCode&gt;=&lt;北向响应码code&gt;，需要提供code到枚举的解析方法，如果考虑合理存放响应码映射信息，可以通过一个resultCode.properties来存放。示例：Alipay.[Charge.]E0001=10601<br>2.通过数据库，适合支持运营配置的场景。<br>3.通过代码逻辑+枚举类映射的方式（变更的代价较大，一般不建议）</p><p>响应码映射的管理，如果需要支持运营配置，可以考虑将响应码映射的维护放在数据库，应该支持以下功能：</p><ul><li>定制化南向响应码对应的北向映射code，message</li><li>支持添加北向响应码和响应码描述定义</li><li>支持配置南向到北向的映射</li></ul><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>Rest风格的API设计后，httpcode充当什么角色？主流的都是服务器内部异常时500，客户端错误400，请求到达服务端后代码流程正常（异常分支处理也属于代码正常流程）则统一返回200。几点思考：</p><ul><li>根据处理异常类型设置httpcode？</li><li>结合nginx健康检查？到后端之后统一200？—- 划分为内部资源，通常只要流程处理正常，就返回2XX，重定向则3XX，客户端问题就4XX，服务端资源不足了那就5XX，外部资源可以返回2XX然后通过下面的业务结果告知客户端具体错误</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>统一响应格式，主要方便前后端沟通，规范化后端研发人员的编码；全局异常处理是优雅的处理各种报错，从业务逻辑中分离开来，使得研发更关注业务；国际化是特殊处理，如果要提供全球化的服务，那么是值得做的。</p><blockquote><p>代码：todo待整理上传github</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>HTTP：</p><p><a href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">Hypertext Transfer Protocol (HTTP) Status Code Registry</a><br><a href="https://datatracker.ietf.org/doc/html/rfc2616#section-10">Hypertext Transfer Protocol – HTTP/1.1</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">火狐官方HTTP定义</a><br><a href="https://docs.github.com/zh/rest?apiVersion=2022-11-28">GitHub REST API 文档</a></p><p>API文档：</p><p><a href="https://developer.twitter.com/en/docs/twitter-ads-api">Twitter Ads API</a><br><a href="https://developer.paypal.com/docs/api/orders/v2/#orders_create">Paypal API</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Hibernate Validator </tag>
            
            <tag> Best practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis源码学习总结</title>
      <link href="/2023/10/27/Mybatis-Source-Code-Learning/"/>
      <url>/2023/10/27/Mybatis-Source-Code-Learning/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="Mybatis包结构"><a href="#Mybatis包结构" class="headerlink" title="Mybatis包结构"></a>Mybatis包结构</h1><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310271820787.png" alt=""></p><h1 id="Mybatis使用流程"><a href="#Mybatis使用流程" class="headerlink" title="Mybatis使用流程"></a>Mybatis使用流程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisBootStrap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 读取配置</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 创建SqlSessionFactory工厂</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            <span class="comment">// 3. 获取sqlSession</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">// 4. 获取Mapper</span></span><br><span class="line">            <span class="type">CategoryMapper</span> <span class="variable">categoryMapper</span> <span class="operator">=</span> sqlSession.getMapper(CategoryMapper.class);</span><br><span class="line">            <span class="comment">// 5. 执行接口方法</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryMapper.queryCategoryByCategoryId(<span class="number">1</span>);</span><br><span class="line">            log.info(<span class="string">&quot;category = &quot;</span> + JsonUtil.toJson(category));</span><br><span class="line">            <span class="comment">// 6. 提交事物</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            <span class="comment">// 7. 关闭资源</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果对于Mybatis启动不清晰，可以通过上面这段代码找到入口，阅读源码。</p><h1 id="一些关键逻辑和亮点"><a href="#一些关键逻辑和亮点" class="headerlink" title="一些关键逻辑和亮点"></a>一些关键逻辑和亮点</h1><h2 id="通过SqlSessionFactory工厂获取SqlSession"><a href="#通过SqlSessionFactory工厂获取SqlSession" class="headerlink" title="通过SqlSessionFactory工厂获取SqlSession"></a>通过SqlSessionFactory工厂获取SqlSession</h2><p>工厂方法模式+建造者设计模式的应用</p><p>SqlSessionFactory通过工厂方法openSession创建SqlSession实例，具体的工厂类实现了工厂接口，负责创建特定类型的对象，使SqlSession的实例化延迟到SqlSessionFactory子类。客户端通过SqlSessionFactory接口和工厂子类来获取SqlSession，而不需要知道具体的对象创建过程。而工厂本身是一个复杂的对象，因此可以通过建造者模式SqlSessionFactoryBuilder来构建。</p><p>源码位置：<br><code>org.apache.ibatis.session.SqlSessionFactory</code></p><p>两个子类：<br><code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory</code><br><code>org.apache.ibatis.session.SqlSessionManager</code></p><p>建造者类SqlSessionFactoryBuilder<br><code>org.apache.ibatis.session.SqlSessionFactoryBuilder#build(java.io.InputStream, java.lang.String, java.util.Properties)</code></p><h2 id="加载Mybatis配置文件"><a href="#加载Mybatis配置文件" class="headerlink" title="加载Mybatis配置文件"></a>加载Mybatis配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 创建SqlSessionFactory工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><p>上面这段代码，XMLConfigBuilder会解析inputStream，根据得到Configuration默认实例化一个工厂子类DefaultSqlSessionFactory。</p><p>源码位置：<br><code>org.apache.ibatis.builder.xml.XMLConfigBuilder#parseConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConfiguration</span><span class="params">(XNode root)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// issue #117 read properties first</span></span><br><span class="line">     propertiesElement(root.evalNode(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line">     <span class="type">Properties</span> <span class="variable">settings</span> <span class="operator">=</span> settingsAsProperties(root.evalNode(<span class="string">&quot;settings&quot;</span>));</span><br><span class="line">     loadCustomVfs(settings);</span><br><span class="line">     loadCustomLogImpl(settings);</span><br><span class="line">     typeAliasesElement(root.evalNode(<span class="string">&quot;typeAliases&quot;</span>));</span><br><span class="line">     pluginElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line">     objectFactoryElement(root.evalNode(<span class="string">&quot;objectFactory&quot;</span>));</span><br><span class="line">     objectWrapperFactoryElement(root.evalNode(<span class="string">&quot;objectWrapperFactory&quot;</span>));</span><br><span class="line">     reflectorFactoryElement(root.evalNode(<span class="string">&quot;reflectorFactory&quot;</span>));</span><br><span class="line">     settingsElement(settings);</span><br><span class="line">     <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">     environmentsElement(root.evalNode(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">     databaseIdProviderElement(root.evalNode(<span class="string">&quot;databaseIdProvider&quot;</span>));</span><br><span class="line">     typeHandlerElement(root.evalNode(<span class="string">&quot;typeHandlers&quot;</span>));</span><br><span class="line">     mapperElement(root.evalNode(<span class="string">&quot;mappers&quot;</span>));</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="配置项的默认值"><a href="#配置项的默认值" class="headerlink" title="配置项的默认值"></a>配置项的默认值</h3><p><code>org.apache.ibatis.builder.xml.XMLConfigBuilder#settingsElement</code></p><h2 id="SqlSession接口"><a href="#SqlSession接口" class="headerlink" title="SqlSession接口"></a>SqlSession接口</h2><p>sqlSession是操作数据库的高级接口，获取sqlSession有两种方式：<br>一种是从数据源中获取的，还有一种是从连接中获取。获取到的都是DefaultSqlSession对象，也就是sqlSession的默认实现。</p><p>SqlSession接口源码，下面是其主要方法，已过滤一些重载方法。<br><code>org.apache.ibatis.session.SqlSession</code></p><ul><li>statement：Mybatis语句ID，Mapper接口的方法名称</li><li>RowBounds：分页对象，主要拼接sql中的start，limit条件。</li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSession</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">  &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">  &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">  &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line"></span><br><span class="line">  List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  Configuration <span class="title function_">getConfiguration</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">  Connection <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取sqlSession源码位置：<br><code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory#openSessionFromDataSource</code><br><code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory#openSessionFromConnection</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1：从数据源中获取的</span></span><br><span class="line"> <span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：从连接中获取</span></span><br><span class="line">  <span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromConnection</span><span class="params">(ExecutorType execType, Connection connection)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">boolean</span> autoCommit;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        autoCommit = connection.getAutoCommit();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// Failover to true, as most poor drivers</span></span><br><span class="line">        <span class="comment">// or databases won&#x27;t support transactions</span></span><br><span class="line">        autoCommit = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> transactionFactory.newTransaction(connection);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="获取Mapper代理类"><a href="#获取Mapper代理类" class="headerlink" title="获取Mapper代理类"></a>获取Mapper代理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 获取Mapper</span></span><br><span class="line"><span class="type">CategoryMapper</span> <span class="variable">categoryMapper</span> <span class="operator">=</span> sqlSession.getMapper(CategoryMapper.class);</span><br></pre></td></tr></table></figure><p>因为默认的SqlSession实现是DefaultSqlSession，进入源码可以得知，CategoryMapper是通过代理工厂MapperProxyFactory反射得到Mapper代理类。这段代码逻辑可以通过顺藤摸瓜，找到Mapper代理是通过<code>Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers</code>获取的。</p><p>源码入口：<br><code>org.apache.ibatis.session.defaults.DefaultSqlSession#getMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.configuration.getMapper(type, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.ibatis.session.Configuration#getMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>org.apache.ibatis.binding.MapperRegistry#getMapper</code>找到这段代码可以得知：<br>1、代理工厂来自knownMappers<br>2、mapperProxyFactory.newInstance(sqlSession)，Mapper每次都通过Mapper代理工厂生成，是一个代理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known to the MapperRegistry.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>knownMappers是如何初始化？</p><p><code>org.apache.ibatis.binding.MapperRegistry#addMapper</code> ==&gt; <code>org.apache.ibatis.builder.xml.XMLConfigBuilder#mapperElement</code></p><p>可以发现是在XMLConfigBuilder解析mybatis-config.xml时通过parseConfiguration方法进行的。仔细观察下图，还提供了一个Spring下的FacotryBean实现进行配置。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310272317221.png" alt=""></p><h2 id="执行Mapper代理方法"><a href="#执行Mapper代理方法" class="headerlink" title="执行Mapper代理方法"></a>执行Mapper代理方法</h2><p>从上面分析得知，获取得到的Mapper是通过MapperProxyFactory工厂类创建的MapperProxy代理类。因此，在执行Mapper接口的方法时，会调用MapperProxy的invoke方法。<br>通过Debug也可以得到Mapper的执行逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310272344693.png" alt=""></p><p>源码入口：<br><code>org.apache.ibatis.binding.MapperProxy#invoke</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310272345844.png" alt=""></p><p><code>cachedInvoker(method)</code>返回MapperMethodInvoker对象，执行invoke方法（具体通过哪个实现可以实际debug，这里是MapperMethodInvoker的子类PlainMethodInvoker的invoke方法）<br><code>org.apache.ibatis.binding.MapperMethod#execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> &#123;</span><br><span class="line">  Object result;</span><br><span class="line">  <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SELECT:</span><br><span class="line">      <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">        executeWithResultHandler(sqlSession, args);</span><br><span class="line">        result = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">        result = executeForMany(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">        result = executeForMap(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">        result = executeForCursor(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        <span class="keyword">if</span> (method.returnsOptional()</span><br><span class="line">            &amp;&amp; (result == <span class="literal">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">          result = Optional.ofNullable(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLUSH:</span><br><span class="line">      result = sqlSession.flushStatements();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Unknown execution method for: &quot;</span> + command.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="literal">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Mapper method &#x27;&quot;</span> + command.getName()</span><br><span class="line">        + <span class="string">&quot; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="string">&quot;).&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SqlSession-SqlSessionFactory-SqlSessionFactoryBuilder的关系"><a href="#SqlSession-SqlSessionFactory-SqlSessionFactoryBuilder的关系" class="headerlink" title="SqlSession, SqlSessionFactory, SqlSessionFactoryBuilder的关系"></a>SqlSession, SqlSessionFactory, SqlSessionFactoryBuilder的关系</h1><h2 id="SqlSession的使用"><a href="#SqlSession的使用" class="headerlink" title="SqlSession的使用"></a>SqlSession的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 读取配置</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">// 3. 获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4. 执行sql，下面2种写法结果一致</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;moe.tsukasa.demo.dao.CategoryMapper.queryCategoryByCategoryId&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;category = [&#123;&#125;]&quot;</span>, JsonUtil.toJson(category));</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category2</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;queryCategoryByCategoryId&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;category2 = [&#123;&#125;]&quot;</span>, JsonUtil.toJson(category2));</span><br><span class="line">        <span class="comment">// 5. 关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;errMsg = [&#123;&#125;]&quot;</span>, e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SqlSession的执行原理"><a href="#SqlSession的执行原理" class="headerlink" title="SqlSession的执行原理"></a>SqlSession的执行原理</h2><h1 id="Excutor"><a href="#Excutor" class="headerlink" title="Excutor"></a>Excutor</h1><p>Excutor是MyBatis持久层框架中的一个关键组件，负责SQL语句的执行，缓存的处理，事务管理，参数处理。</p><p>Executor接口有两个实现，一个是BaseExecutor抽象类，一个是CachingExecutor实现类。BaseExecutor抽象类有四个实现SimpleExecutor，BathExecutor, ReuseExecutor, ClosedExecutor。</p><p>Executor继承关系：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310280026898.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">ResultHandler</span> <span class="variable">NO_RESULT_HANDLER</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">clearLocalCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">  Transaction <span class="title function_">getTransaction</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">boolean</span> forceRollback)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setExecutorWrapper</span><span class="params">(Executor executor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Excutor是模板方法设计模式的应用，Executor接口有个抽象子类BaseExecutor，定义了一些模板方法，通过子类来实现。</p><p>SimpleExecutor是默认的Executor实现，适用于大多数情况，但不支持高级功能如二级缓存。我们只需要定义好myabtis-config.xml，MyBatis框架会负责调用适当的Executor来执行数据库操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring系列-HTTP消息转换器message-converters</title>
      <link href="/2023/10/20/Spring-message-converter-learning01/"/>
      <url>/2023/10/20/Spring-message-converter-learning01/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>文章主要讲解下Spring框架中的HTTP消息转换器message-converters的使用，Spring框架的HTTP消息转换器的主要作用是将HTTP请求和响应中的消息内容与Java对象之间进行相互转换（序列化与反序列化），这些消息转换器可以处理JSON、XML、文本、二进制等数据类型。</p><p>数据转换流程：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310200212932.png" alt=""></p><h1 id="Spring默认的内置HTTP消息转换器"><a href="#Spring默认的内置HTTP消息转换器" class="headerlink" title="Spring默认的内置HTTP消息转换器"></a>Spring默认的内置HTTP消息转换器</h1><p>添加的默认HTTP消息转换器源码：<br>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#addDefaultHttpMessageConverters</p><p>Spring MVC中，使用<code>message-converters</code>标签来配置不同的消息转换器。下面是使用中需要注意的地方：</p><p>如果多个消息转换器支持相同的媒体类型时，Spring会选择第一个匹配的消息转换器进行处理请求和响应，因此在message-converter标签中配置时需要注意顺序，当然也可以通过实现WebMvcConfigurer接口的配置类，重写configureMessageConverters方法，自定义转换器的顺序。</p><p>下面是一些默认的HTTP消息转换器（具体实现可以查看<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#addDefaultHttpMessageConverters</code>）</p><ul><li><code>org.springframework.http.converter.StringHttpMessageConverter</code>：这是Spring框架内置的消息转换器之一，用于处理文本数据。它能够将HTTP请求中的文本数据（通常是字符串）转换为Java字符串，并反之将Java字符串转换为HTTP响应的文本数据。</li><li><code>ByteArrayHttpMessageConverter</code>：用于处理字节数组。</li><li><code>StringHttpMessageConverter</code>：用于处理文本（字符串）数据。</li><li><code>FormHttpMessageConverter</code>：用于处理表单数据。</li><li><code>Jaxb2RootElementHttpMessageConverter</code>：用于处理XML数据（需要JAXB 2支持）。</li><li><code>MappingJackson2HttpMessageConverter</code>：用于处理JSON数据（需要Jackson 2支持），需要依赖Jackson。</li><li></li><li><code>ResourceHttpMessageConverter</code>：负责读取资源文件和写出资源文件数据；</li><li><code>MappingJacksonHttpMessageConverter</code>：负责读取和写入json格式的数据；(当返回值是对象或者List，就由这个处理)</li><li><code>AtomFeedHttpMessageConverter</code>：负责读取和写入Atom格式的数据；</li><li><code>RssChannelHttpMessageConverter</code>：负责读取和写入RSS格式的数据；</li></ul><h1 id="如何配置HTTP转换器"><a href="#如何配置HTTP转换器" class="headerlink" title="如何配置HTTP转换器"></a>如何配置HTTP转换器</h1><p>HTTP消息转换器在spring-mvc.xml文件中进行下面配置，如果不配置则默认使用内置的HTTP消息转换器。下面了字符串的转换器为StringHttpMessageConverter，Json转换器使用FastJsonHttpMessageConverter。因为使用到了Fastjson三方类库，需要在pom文件中引入依赖。</p><p>1、XML配置方式：</p><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fastJsonHttpMessageConverter&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>2、注解配置类方式</p><p>Spring 5以上采用Java 8语法，接口方法提供了default实现，没有必要通过继承适配器类WebMvcConfigurerAdapter重写方法，直接实现WebMvcConfigurer接口重写方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpMessageConverterConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>());</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2XmlHttpMessageConverter</span>());</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">StringHttpMessageConverter</span>());</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.configureMessageConverters(converters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h1><p>HttpMessageConverter<br><code>org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor</code>解析请求参数的方法resolveArgument()和处理返回值的方法handleReturnValue()</p><p>在项目启动的时候通过WebMvcConfigurationSupport进行加载，当getMessageConverters()被调用的时候会通过configureMessageConverters()、addDefaultHttpMessageConverters()和extendMessageConverters()三个方法进行初始话消息转换器。生成的消息转换器放在List<HttpMessageConverter<?>&gt; messageConverters集合中</p><p>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</p><p>返回响应时，会通过下面的方法调用http message converter进行转换<br>org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite#handleReturnValue<br>C:/Users/Tsukasa/.m2/repository/org/springframework/spring-webmvc/5.3.24/spring-webmvc-5.3.24-sources.jar!/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java:275</p><p>假如报<code>No converter for [class java.util.HashMap] with preset Content-Type &#39;null&#39;]</code>之类的错误，证明没有找到合适的Http Message Converter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-10-25 01:13:29.928 [WARN ] [http-nio-8081-exec-2] [org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver] [208] Resolved [org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class java.util.HashMap] with preset Content-Type &#x27;null&#x27;]</span><br></pre></td></tr></table></figure><h1 id="扩展定制"><a href="#扩展定制" class="headerlink" title="扩展定制"></a>扩展定制</h1><p>整体思路分为三步：</p><p>1、继承AbstractHttpMessageConverter类，根据序列化和反序列化规则，重写构造、readInternal、writeInternal、supports等相关方法；<br>2、通过message-converter标签或者继承WebMvcConfigurerAdapter类，配置自定义的HTTP消息转换器；<br>3、编写Controller控制器，修改前端请求格式为自定义格式。</p><p>似乎在执行http message converter的读取和写入操作前后，通过RequestResponseBodyAdviceChain提供了一些切面操作，可以通过实现RequestBodyAdvice或者ResponseBodyAdvice的方法来在执行前后执行一些操作。</p><p>/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java:184</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.cn/post/6844904020180467725?searchId=202310200110502954BBD54A37ECC284B9">SpringMVC03-HttpMessageConverter(自定义消息转换器)</a><br><a href="https://juejin.cn/post/7169590769789960205?searchId=202310200110502954BBD54A37ECC284B9">Spring Mvc：HttpMessageConverter 消息转换器</a><br><a href="https://juejin.cn/post/7265218003863420982?searchId=20231025011613BEBDA0C7A5C8446735C0">SpringMVC流程分析(七)：HttpMessageConverter——SpringMVC中的消息转换</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows中通过SMB协议共享文件允许局域网设备访问</title>
      <link href="/2023/10/18/Use-SMB-protocol-to-share-files-in-windows-system/"/>
      <url>/2023/10/18/Use-SMB-protocol-to-share-files-in-windows-system/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>家人各自手机拍了很多照片，需要定期归档整理到本地一台PC硬盘中，为了支持各自并行整理，通过Windows的网络文件共享协议，分享共享文件夹的方式，允许其他设备（PC、手机）访问读写，这样就不会出现两个人同时争用同一台电脑整理照片视频资源了。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>存放照片视频资源的PC开启SMB服务，通过创建一个合理权限的用户，创建一个共享的文件夹，开放给同一个局域网的设备进行连接，通过这个用户整理资源。</p><p>SMB：全名为Server Message Block，是一种网络文件共享协议，最初由IBM开发，后来被Microsoft广泛采用并成为Windows操作系统中文件和打印机共享的基础。SMB协议允许不同计算机上的应用程序之间共享文件和资源，通常用于局域网（LAN）和广域网（WAN）环境中。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1、启用SMB-1-0-CIFS文件共享支持功能"><a href="#1、启用SMB-1-0-CIFS文件共享支持功能" class="headerlink" title="1、启用SMB 1.0/CIFS文件共享支持功能"></a>1、启用SMB 1.0/CIFS文件共享支持功能</h2><p><code>控制面板\程序\程序和功能</code>中启用SMB 1.0/CIFS文件共享支持功能后，提示重启计算机后生效。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180056423.png" alt=""></p><h2 id="2、启用网络发现和文件共享"><a href="#2、启用网络发现和文件共享" class="headerlink" title="2、启用网络发现和文件共享"></a>2、启用网络发现和文件共享</h2><p>PC重启完成后，在<code>控制面板\网络和 Internet\网络和共享中心\高级共享设置</code>启用网络发现和文件共享功能</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180053909.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180054726.png" alt=""></p><p>这里面选用有密码保护的共享是为了确保安全，不然其他连上你wifi的人就可以随意访问你的照片视频，社死就不好了。<br>当然，如果只是临时分享下非私密资源后关闭，那么可以不设免密保护。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180055448.png" alt=""></p><h2 id="3、启动FDResPub和fdPHost等相关依赖服务"><a href="#3、启动FDResPub和fdPHost等相关依赖服务" class="headerlink" title="3、启动FDResPub和fdPHost等相关依赖服务"></a>3、启动FDResPub和fdPHost等相关依赖服务</h2><p>按照下图，将<code>Function Discovery Resource Publication</code>和<code>Function Discovery Provider Host</code>这2个服务停止后，修改启动方式为自动后，点击启动。</p><p>注意这两个服务之间可能存在依赖关系，即停止fdPHost可能导致FDResPub服务也停止，因此启动后需再次检查2个服务是否都在运行中。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180109329.png" alt=""></p><p>假如启动失败，可以检查下这2个服务的依赖列表，把对应依赖的服务也要跑起来。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180110977.png" alt=""></p><h2 id="4、创建访问用户并分配合理权限"><a href="#4、创建访问用户并分配合理权限" class="headerlink" title="4、创建访问用户并分配合理权限"></a>4、创建访问用户并分配合理权限</h2><p>打开<code>计算机管理</code>，进入<code>本地用户和组</code>的<code>用户</code>标签页下，右键添加用户。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180114493.png" alt=""></p><p>创建一个访问用户的用户名和密码，后面其他设备访问这台PC就是用的这个帐户。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180117420.png" alt=""></p><h2 id="5、安全界面内设置共享文件夹的用户访问权限"><a href="#5、安全界面内设置共享文件夹的用户访问权限" class="headerlink" title="5、安全界面内设置共享文件夹的用户访问权限"></a>5、安全界面内设置共享文件夹的用户访问权限</h2><p>在需要共享的照片文件夹上右键，点击<code>安全</code>选项卡，添加新建的用户，并设置合理的访问权限，这里因为是家人使用，权限暂不做限制。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180124024.png" alt=""></p><h2 id="6、共享界面内设置局域网内共享的文件夹和访问用户"><a href="#6、共享界面内设置局域网内共享的文件夹和访问用户" class="headerlink" title="6、共享界面内设置局域网内共享的文件夹和访问用户"></a>6、共享界面内设置局域网内共享的文件夹和访问用户</h2><p>在需要共享的照片文件夹上右键，点击<code>共享</code>选项卡，进入<code>高级共享设置</code>，选择可以通过SMB协议访问共享文件夹的用户和用户组。<br>如图所示则允许Azuki用户和Administrators用户组的用户通过SMB访问该计算机。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180122971.png" alt=""></p><p>设置完成后并应用，回到<code>共享</code>选项卡界面，点击共享等待一会即可完成共享。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180134348.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180134855.png" alt=""></p><h2 id="7、其他设备访问共享文件夹"><a href="#7、其他设备访问共享文件夹" class="headerlink" title="7、其他设备访问共享文件夹"></a>7、其他设备访问共享文件夹</h2><p>只要设备支持SMB协议，则可以通过SMB访问到上面的PC共享文件夹。</p><h3 id="Windows电脑"><a href="#Windows电脑" class="headerlink" title="Windows电脑"></a>Windows电脑</h3><p><strong>方法1</strong></p><p>其他的Windows PC只要连接到同一个局域网，就可以在<code>网络</code>界面看到该电脑了，双击进去输入用户名和密码后，就和访问自己电脑上的文件夹一样访问共享文件夹了。可以确认下访问的权限是否符合预期。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180136735.png" alt=""></p><p>也可以在共享文件夹上右键，映射共享文件夹到本地虚拟盘符，如Z盘，这样就和访问本地一个硬盘一样访问共享文件夹了。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180141983.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180144442.png" alt=""></p><p><strong>方法2</strong></p><p><code>Win+R</code>打开运行或者直接在文件管理器的地址栏输入<code>\\</code>+局域网下共享PC的IP地址或者计算机名，示例；<code>\\192.168.2.183</code>，在弹出的窗口输入用户名和密码，即可访问。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180149762.png" alt=""></p><h3 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h3><p>现在很多手机文件管理器都支持SMB，以华为Mate 20 pro为例，打开文件管理器，打开<code>网络邻居</code>就可以看到共享资源的PC了，点击后会弹出窗口，输入用户名和密码就可以访问共享文件夹了。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180156824.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽说这个照片视频资源管理和共享方案并非最佳实践，比如本地与云盘同步问题，当前仅限局域网用户访问，也并非唯一的解决方案，如FTP同样可以实现类似的功能，但是已经满足我目前的需求了，更是没有必要搭建个NAS，后续如果有更进一步的需求再去搞好了，保持简洁易用。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校验下载资源的完整性</title>
      <link href="/2023/10/17/Verify-the-integrity-of-downloaded-resource/"/>
      <url>/2023/10/17/Verify-the-integrity-of-downloaded-resource/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>网站上一些资源下载页面列表中，通常提供了一些Hash值，但自己没想过有什么用，最近有时间简单研究了下，其实目的是确保资源的完整性，避免下载过程中损坏或者被恶意攻击者替换。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>哈希算法通常通常用来校验文件的完整性，在密码学中，一般来说，不同的内容生成的Hash值不同（Hash碰撞的概率极低，可以认为），而相同的内容进行哈希后，得到唯一的Hash值。因此通过校验资源传输前后的Hash值，判断资源是否被篡改。</p><p>常见的Hash算法有：md5, sha1, sha256（推荐）, sha512</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>网上资源的Hash值通常会在下载资源网站给出hash校验和，资源下载完全后，根据给定的hash算法计算hash值，与网站提供的hash校验和比对即可，相同则文件完整。<br>下面分别展示在不同操作系统的一些API：</p><p><strong>Windows</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hash算法可以根据实际替换，支持SHA256、SHA1、MD5</span></span><br><span class="line">Get-FileHash 文件名.exe -Algorithm SHA256</span><br></pre></td></tr></table></figure><p>以下载<a href="https://repo.jellyfin.org/releases/server/windows/stable/">Jellyfin</a>作为示例：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180006974.png" alt=""></p><p>对比两个Hash值一致，说明下载文件完整。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310180009996.png" alt=""></p><p><strong>Linux/Git bash</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> 文件名</span><br><span class="line"><span class="built_in">sha1sum</span> 文件名</span><br><span class="line"><span class="built_in">sha256sum</span> 文件名</span><br><span class="line"><span class="built_in">sha512sum</span> 文件名</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个知识点很简单，平常时我们工作也经常通过hash算法来作消息摘要，密码存储，签名，这些都属于密码学的范畴，而这个校验资源传输前后的完整性也是其中一个应用而已，一些下载软件、压缩软件本身也内置了对文件完整性的校验，思想是相同的，想到某位大佬说的一句话：对于程序员来说，最为重要的知识其实是核心设计原则以及对计算机体系的理解，有了切身体会。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优基础</title>
      <link href="/2023/10/12/JVM%E8%B0%83%E4%BC%98%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/10/12/JVM%E8%B0%83%E4%BC%98%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>这篇文章讲解下JVM调优基础知识，后面会再单独开一篇文章讲解下JVM调优的思路。</p><p>JVM（Java虚拟机）调优是优化Java应用程序性能和内存使用的过程。调优可以帮助应用程序更有效地利用内存、提高吞吐量和降低延迟。</p><h1 id="JVM调优的参数都有哪些？"><a href="#JVM调优的参数都有哪些？" class="headerlink" title="JVM调优的参数都有哪些？"></a>JVM调优的参数都有哪些？</h1><p>JVM调优的目标是什么？通过JVM的学习，我们知道频繁的GC会导致程序挂起，垃圾回收占用CPU资源，因此性能调优中就包括对内存的优化，减少GC。</p><p>JVM调优主要就是调整年轻代、老年代、元空间的内存空间大小及使用的垃圾回收器类型。</p><h2 id="堆分配参数"><a href="#堆分配参数" class="headerlink" title="堆分配参数"></a>堆分配参数</h2><p>示例：-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</p><table><thead><tr><th style="text-align:center">Params</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Xms</td><td style="text-align:center">最小堆容量</td></tr><tr><td style="text-align:center">Xmx</td><td style="text-align:center">最大堆容量</td></tr><tr><td style="text-align:center">Xmn</td><td style="text-align:center">新生代容量 &lt;==&gt; Eden + Survivor A + Survivor B</td></tr><tr><td style="text-align:center">PrintGCDetail</td><td style="text-align:center">记录GC日志</td></tr><tr><td style="text-align:center">SurvivorRatio</td><td style="text-align:center">新生代中Eden与Survivor区域的比值，默认值为8</td></tr><tr><td style="text-align:center">PretenureSizeThreshold</td><td style="text-align:center">对象大小大于该值，直接分配至老年代</td></tr><tr><td style="text-align:center">MaxTenuringThreshold</td><td style="text-align:center">大于该阈值时晋升至老年代，默认值为15</td></tr><tr><td style="text-align:center">HandlePromotionFailure</td><td style="text-align:center">是否允许担保失败</td></tr><tr><td style="text-align:center">ParalleGCThreads</td><td style="text-align:center">设置并行GC时进行内存回收的线程数</td></tr></tbody></table><h1 id="JVM调优思路"><a href="#JVM调优思路" class="headerlink" title="JVM调优思路"></a>JVM调优思路</h1><h2 id="1、内存管理"><a href="#1、内存管理" class="headerlink" title="1、内存管理"></a>1、内存管理</h2><p><strong>堆内存设置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms512m -Xmx2g -jar your-application.jar</span><br></pre></td></tr></table></figure><p><strong>永生代/元数据区大小</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:MaxMetaspaceSize=256m -jar your-application.jar</span><br></pre></td></tr></table></figure><h2 id="2、垃圾回收"><a href="#2、垃圾回收" class="headerlink" title="2、垃圾回收"></a>2、垃圾回收</h2><p><strong>选择合适的垃圾收集器</strong></p><p>根据硬件配置如CPU核数线程数，以及应用程序的特性，不同内存区域的垃圾收集，选择合适的垃圾收集器，如G1、CMS、Parallel等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+UseG1GC -jar your-application.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>垃圾回收日志： 启用垃圾回收日志以进行性能分析和调优。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xloggc:gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -jar your-application.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、线程管理"><a href="#3、线程管理" class="headerlink" title="3、线程管理"></a>3、线程管理</h2><p><strong>线程栈大小：根据应用程序的线程需求设置线程栈大小。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xss256k -jar your-application.jar</span><br></pre></td></tr></table></figure><p><strong>并发线程数： 根据硬件配置和应用程序性质设置并发线程数。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:ParallelGCThreads=4 -jar your-application.jar</span><br></pre></td></tr></table></figure><h2 id="4、代码优化"><a href="#4、代码优化" class="headerlink" title="4、代码优化"></a>4、代码优化</h2><p>性能分析： 使用性能分析工具（如VisualVM、YourKit）来识别和优化性能瓶颈。示例：</p><p>bash<br>Copy code<br>jvisualvm<br>代码检查： 使用静态分析工具（如Checkstyle、FindBugs）检查代码质量，消除潜在的性能问题。</p><h2 id="5、内存泄漏分析"><a href="#5、内存泄漏分析" class="headerlink" title="5、内存泄漏分析"></a>5、内存泄漏分析</h2><h2 id="6、堆转储文件"><a href="#6、堆转储文件" class="headerlink" title="6、堆转储文件"></a>6、堆转储文件</h2><p>在内存溢出（OOM）时生成堆转储文件，以进行分析。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/dump.hprof -jar your-application.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="堆分配参数一"><a href="#堆分配参数一" class="headerlink" title="堆分配参数一"></a>堆分配参数一</h2><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">-XX:+PrintGC</td><td style="text-align:center">虚拟机启动后，只要遇到GC就会打印日志</td></tr><tr><td style="text-align:center">-XX:+UseSerialGC</td><td style="text-align:center">配置串行回收器</td></tr><tr><td style="text-align:center">-XX:+PrintCommandLineFlags</td><td style="text-align:center">在控制台输出JVM的配置参数。</td></tr><tr><td style="text-align:center">-XX:+PrintGCDetails</td><td style="text-align:center">可以查看详细信息，包括各个区的情况</td></tr><tr><td style="text-align:center">-Xms5m</td><td style="text-align:center">设置最小堆大小为5M</td></tr><tr><td style="text-align:center">-Xmx20M</td><td style="text-align:center">设置最大堆大小为20M</td></tr></tbody></table><p>实际工作中，可以将初始的堆大小与最大堆大小设置相等，好处是可以减少程序运行时的垃圾回收次数。通常是配置在Tomcat中，如catalina.sh</p><h2 id="堆分配参数二"><a href="#堆分配参数二" class="headerlink" title="堆分配参数二"></a>堆分配参数二</h2><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">-Xmn5M</td><td style="text-align:center">设置新生代的大小为5M，年老代+新生代大小=堆大小，这个参数对系统性能和GC行为有较大的影响，新生代大小一般设置为堆空间的1/3到1/4左右</td></tr><tr><td style="text-align:center">-XX:SurvivorRatio</td><td style="text-align:center">设置新生代中eden空间和from或to空间的比例（from和to空间大小相同），<code>含义：-XX:SurvivorRatio=eden/from=eden/to</code></td></tr><tr><td style="text-align:center">-XX:NewRatio</td><td style="text-align:center">除了可以通过<code>-Xmn</code>参数设置新生代的绝对大小，还可以<code>-XX:NewRatio</code>通过设置新生代和年老代的比例：<code>-XX:NewRatio=老年代/新生代</code></td></tr></tbody></table><p>实际工作中，应该根据系统的特点做出合理配置，基本策略：尽可能将对象预留在新生代，减少老年代的GC次数。比如系统内的实例对象大多是一直使用，那么老年代可以分配大一些。</p><h2 id="堆溢出处理"><a href="#堆溢出处理" class="headerlink" title="堆溢出处理"></a>堆溢出处理</h2><p>如果堆空间不足，可以出现OOM报错，可以通过</p><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">-XX:+HeapDumpOnOutOfMemoryError</td><td style="text-align:center">可以在内存溢出时与下面的参数配合，导出整个堆信息</td></tr><tr><td style="text-align:center">-XX:HeapDumpPath</td><td style="text-align:center">设置导出堆的存放路径</td></tr></tbody></table><p>内存分析工具：Eclipse Memory Analyzer (MAT)、VisualVM、jmap命令</p><h2 id="Java栈配置"><a href="#Java栈配置" class="headerlink" title="Java栈配置"></a>Java栈配置</h2><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">-Xss</td><td style="text-align:center">指定线程的最大栈空间，决定了函数可调用的最大深度</td></tr></tbody></table><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">-XX:MaxPermSize</td><td style="text-align:center">方法区最大大小，默认为64MB，如果运行时产生大量的类，就需要设置一个相对合适的方法去，避免出现永久区OOM问题</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=64M -XX:MaxPermSize=64MB</span><br></pre></td></tr></table></figure><h2 id="直接内存配置"><a href="#直接内存配置" class="headerlink" title="直接内存配置"></a>直接内存配置</h2><p>NIO中用得较多</p><p>-XX:MaxDirectMemorySize，如果不设置，默认值为最大堆空间即-Xmx，直接内存到达上限后就会触发垃圾回收，也会导致OOM。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html">Java HotSpot VM Options</a><br><a href="https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html">JVM系列三:JVM参数设置、分析</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列-Window和Linux安装配置Redis</title>
      <link href="/2023/09/24/Redis%E7%B3%BB%E5%88%97-Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AERedis/"/>
      <url>/2023/09/24/Redis%E7%B3%BB%E5%88%97-Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AERedis/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis是分布式缓存数据库，这篇文章记录下Windows 10和Centos 7下Redis的安装配置。</p><h1 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h1><h2 id="下载并解压到安装目录"><a href="#下载并解压到安装目录" class="headerlink" title="下载并解压到安装目录"></a>下载并解压到安装目录</h2><p>下载Redis，解压到安装目录</p><p><a href="https://github.com/MicrosoftArchive/redis/releases">Github下载地址</a></p><h2 id="配置环境变量并注册成服务"><a href="#配置环境变量并注册成服务" class="headerlink" title="配置环境变量并注册成服务"></a>配置环境变量并注册成服务</h2><p>环境变量配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309242147280.png" alt=""></p><p>注册成服务并启动Redis服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server --service-install redis.windows-service.conf --loglevel verbose</span><br><span class="line">net start redis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309242145331.png" alt=""></p><p>测试客户端功能正常</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309242151194.png" alt=""></p><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>设置临时密码：<code>config set requirepass &quot;admin&quot;</code>后，执行<code>auth admin</code>即可登陆。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309242158453.png" alt=""></p><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><p>远程连接命令：<code>redis-cli -h IP地址 -p 端口号 -a 密码</code>，默认ip地址为127.0.0.1，默认端口为6379。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251432967.png" alt=""></p><p>当然要进行远程访问，需要进行下面2个配置。</p><h3 id="Redis绑定IP配置"><a href="#Redis绑定IP配置" class="headerlink" title="Redis绑定IP配置"></a>Redis绑定IP配置</h3><p>Redis配置文件默认绑定本地IP，只能从本地发起连接，如果想要让远程服务发起连接，可以将下面的<code>bind 127.0.0.1</code>一行注释掉，或者添加需要访问redis缓存的服务器地址。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309242209963.png" alt=""></p><h3 id="添加防火墙入站规则"><a href="#添加防火墙入站规则" class="headerlink" title="添加防火墙入站规则"></a>添加防火墙入站规则</h3><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251430294.png" alt=""></p><h1 id="Centos-7"><a href="#Centos-7" class="headerlink" title="Centos 7"></a>Centos 7</h1><h2 id="离线下载安装包"><a href="#离线下载安装包" class="headerlink" title="离线下载安装包"></a>离线下载安装包</h2><p>查找需要安装的Redis版本：<code>http://download.redis.io/releases/</code>，我选择了7.0.8版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/download</span><br><span class="line">wget http://download.redis.io/releases/redis-7.0.8.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf redis-7.0.8.tar.gz</span><br></pre></td></tr></table></figure><h2 id="构建测试并安装"><a href="#构建测试并安装" class="headerlink" title="构建测试并安装"></a>构建测试并安装</h2><p>执行make进行构建时，如果提示缺少什么依赖就下载更新什么依赖即可。可以通过yum命令下载安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">sudo make</span><br><span class="line"><span class="comment"># 下面执行测试，时间较长</span></span><br><span class="line">sudo make <span class="built_in">test</span></span><br><span class="line">sudo make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><h2 id="复制并修改Redis配置文件"><a href="#复制并修改Redis配置文件" class="headerlink" title="复制并修改Redis配置文件"></a>复制并修改Redis配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/redis/etc</span><br><span class="line"><span class="built_in">cp</span> /export/download/redis/redis.conf /usr/local/redis/etc</span><br></pre></td></tr></table></figure><p>修改Redis配置通常有2种方式，一种是在redis-cli客户端种进行，这种默认是直接生效的，如果修改的配置文件，需要重启Redis使修改生效。</p><p>编辑redis.conf配置文件，修改daemonize为yes，设置为后台启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>可以通过<code>config get protected-mode</code>命令获取该参数的配置，protected-mode默认为yes，表示Redis仅允许本地连接<strong>或者</strong>通过密码验证的连接访问，一般设置为yes。</p><h2 id="添加开机自启"><a href="#添加开机自启" class="headerlink" title="添加开机自启"></a>添加开机自启</h2><p>在/etc/rc.local中追加开机自启，需要sudo权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </span><br></pre></td></tr></table></figure><h2 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h2><p>复制redis-cli,redis-server到/usr/local/bin/目录下，类似Windows的环境变量配置，允许redis命令在其他目录下直接使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/redis/bin/redis-server /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /usr/local/redis/bin/redis-cli /usr/local/bin/</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </span><br></pre></td></tr></table></figure><h2 id="设置Redis密码"><a href="#设置Redis密码" class="headerlink" title="设置Redis密码"></a>设置Redis密码</h2><p>设置完密码后和Windows一样进行Redis连接即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass &lt;密码&gt;</span><br></pre></td></tr></table></figure><h2 id="远程连接配置"><a href="#远程连接配置" class="headerlink" title="远程连接配置"></a>远程连接配置</h2><p>主要涉及防火墙配置，以及Redis配置文件修改bind ip，修改完成后重启即可。Centos防火墙配置为firewall-cmd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 防火墙配置</span></span><br><span class="line">sudo firewall-cmd --add-port=6379/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">sudo firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Redis服务</span></span><br><span class="line">pkill redis</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </span><br></pre></td></tr></table></figure><h1 id="Redis无法连接问题排查"><a href="#Redis无法连接问题排查" class="headerlink" title="Redis无法连接问题排查"></a>Redis无法连接问题排查</h1><p>1、检查Redis服务是否启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行下面命令返回PONG则已启动</span></span><br><span class="line">redis-cli -h 192.168.2.99 -p 6379 ping</span><br></pre></td></tr></table></figure><p>2、防火墙问题</p><p>检查防火墙规则，是否允许通过tcp协议访问Redis的6379端口，正常通过telnet可以连接该</p><p>如果防火墙使用的是iptables，执行下面的命令允许访问redis端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L</span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 6379 -j ACCEPT</span><br><span class="line"><span class="comment"># Centso</span></span><br><span class="line">sudo service iptables save</span><br></pre></td></tr></table></figure><p>如果使用的是firewalld，执行下面的命令允许访问redis端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">sudo firewall-cmd --list-ports</span><br><span class="line">sudo firewall-cmd --add-port=6379/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>如果防火墙没有启动，执行下面命令启动防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line">sudo systemctl start firewalld</span><br></pre></td></tr></table></figure><p>配置成功后可以通过telnet命令验证是否可以正常连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet &lt;Windows_IP&gt; 6379</span><br></pre></td></tr></table></figure><p>3、Redis服务器配置的IP和端口是否正确</p><p>确认bind和port配置，看是否在白名单中，又或者允许所有ip访问。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 192.168.2.99</span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[Windows-Redis安装与配置<a href="https://juejin.cn/post/7043684887773052965?searchId=202309242122437CD4714D3D22884226F3"></a><br><a href="https://juejin.cn/post/7212164132794662968?searchId=202309242122437CD4714D3D22884226F3">Windows Redis msi方式安装</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架学习系列 - IOC容器是如何工作的</title>
      <link href="/2023/08/06/Spring-Learning-series-How-does-IOC-container-work/"/>
      <url>/2023/08/06/Spring-Learning-series-How-does-IOC-container-work/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章主要从Spring IoC容器的角度进行切入，了解Spring是如何工作的。</p><h1 id="Spring-IOC容器构建过程"><a href="#Spring-IOC容器构建过程" class="headerlink" title="Spring IOC容器构建过程"></a>Spring IOC容器构建过程</h1><p><code>org.springframework.context.support.AbstractApplicationContext#refresh</code>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">onRefresh();</span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">registerListeners();</span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;</span>, ex);</span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"><span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h2><p><code>invokeBeanFactoryPostProcessors</code>方法主要是获取<code>BeanFactoryPostProcessor</code>接口的子类，并执行它的<code>postProcessBeanFactory</code>方法:</p><p><code>org.springframework.beans.factory.config.BeanFactoryPostProcessor#postProcessBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br></pre></td></tr></table></figure><h2 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h2><p><code>registerBeanPostProcessors</code>方法可以获取用户定义的<code>BeanPostProcessor</code>的子类，并把他们注册到<code>BeanFactory</code>对象中的<code>beanPostProcessors</code>变量中。<code>org.springframework.beans.factory.config.BeanPostProcessor</code>接口声明了2个方法：<code>postProcessBeforeInitialization</code>，<code>postProcessAfterInitialization</code>，在Bean初始化时执行用户自定义的操作。</p><h2 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h2><p>Bean的实例化代码逻辑，里面涉及一个FactoryBean，一个特殊的工厂bean，用于产生Bean。通常地，通过继承FactoryBean，实现其getObject方法，用户可以产生该类实例对象的方法。Spring获取FactoryBean本身的对象是通过在前面加上<code>&amp;</code>来完成。经常用来整合第三方框架。</p><p>Bean的实例创建流程比较复杂，可以查看流程图</p><h2 id="Bean存储在beanDefinitionMap中"><a href="#Bean存储在beanDefinitionMap中" class="headerlink" title="Bean存储在beanDefinitionMap中"></a>Bean存储在beanDefinitionMap中</h2><p>其中<code>BeanDefinition</code>接口是Bean的定义对象，Bean实例化之后存放在Spring容器中，维护在<code>DefaultListableBeanFactory#beanDefinitionMap</code>属性中，key默认是首字母小写的类名，value是一个BeanDefinition子类对象。</p><p><code>org.springframework.beans.factory.support.DefaultListableBeanFactory#beanDefinitionMap</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;String, BeanDefinition&gt;(64);</span><br></pre></td></tr></table></figure><h2 id="Bean如何加载到Spring容器中？"><a href="#Bean如何加载到Spring容器中？" class="headerlink" title="Bean如何加载到Spring容器中？"></a>Bean如何加载到Spring容器中？</h2><p>通过<code>org.springframework.beans.factory.support.BeanDefinitionReader</code>的子类来实现，XML配置文件，注解的方式标识需要Spring容器管理的Bean，有对应的<code>BeanDefinitionReader</code>进行加载。</p><h2 id="几个BeanFactory子列"><a href="#几个BeanFactory子列" class="headerlink" title="几个BeanFactory子列"></a>几个BeanFactory子列</h2><table><thead><tr><th style="text-align:left">类</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:left">ClassPathXmlApplicationContext</td><td style="text-align:left">通过读取类路径下的XMl配置文件创建IOC容器对象</td></tr><tr><td style="text-align:left">FileSystemXmlApplicationContext</td><td style="text-align:left">通过读取文件系统路径下的XMl配置文件创建IOC容器对象</td></tr><tr><td style="text-align:left">ConfigurableApplicationContext</td><td style="text-align:left">ApplicationContext的子接口，包含一些扩展方法refresh()和close()，让ApplicationContext具有启动、关闭和刷新上下文的能力</td></tr><tr><td style="text-align:left">WebApplicationContext</td><td style="text-align:left">基于Web环境创建IOC容器，将对象存入ServletContext中</td></tr></tbody></table><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h1 id="代码工程"><a href="#代码工程" class="headerlink" title="代码工程"></a>代码工程</h1><hr><h1 id="Spring基本概念"><a href="#Spring基本概念" class="headerlink" title="Spring基本概念"></a>Spring基本概念</h1><p>1、IOC注入的三种方式</p><ul><li>构造方法</li><li>setter方法</li><li>接口注入</li></ul><p>注入有2层含义：<br>（1）将依赖的对象通过Spring容器注入进来；<br>（2）生成当前对象实例后注入到容器中（非必须）</p><p>注入是指，如果当前对象有依赖于其他对象实例，不再通过new的方式创建，而是直接从Spring容器中获取。</p><p>而从容器中获取的实例是否是同一个，涉及到对象的scope</p><p>2、对象的scope有几种<br>有3种：singleton单例，prototype多实例，session一次会话是相同的实例，不同的会话是不同的实例。</p><p>3、什么是控制反转IoC（Inversion of controll）<br>将原来通过new关键字创建对象实例的方式，改成直接从Spring容器中获取对象实例。</p><p>4、IoC的好处是什么？<br>好处是不用再关心依赖类的实例化，而是直接从容器中获取，从而直接使用被依赖对象提供的服务。</p><h1 id="IoC容器如何管理对象间的依赖关系"><a href="#IoC容器如何管理对象间的依赖关系" class="headerlink" title="IoC容器如何管理对象间的依赖关系"></a>IoC容器如何管理对象间的依赖关系</h1><p>1、有哪些管理对象间依赖的方式？</p><ul><li>直接编码，进行对象绑定 –&gt; 不符合IoC的理念，因此Spring主要是通过下面2种方式进行对象间依赖关系的管理</li><li>配置文件，通常用xml</li><li>元数据方式</li></ul><h1 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h1><p>1、Spring有哪些IoC容器？</p><ul><li>BeanFactory</li><li>ApplicationContext</li></ul><p>BeanFactory容器特点：<br>默认延迟初始化策略（懒加载lazy-load），启动初期所需资源少，速度快</p><p>ApplicationContext容器特点：<br>在BeanFactory的基础上构建，还提供了更高级的特性，如事件发布、国际化信息处理等<br>容器启动后，默认全部初始化并完成绑定，前期所需系统资源多，启动速度较慢</p><p>这2个容器都是接口</p><p>2、ApplicationContext与BeanFactory的关系是怎样的？ApplicationContext容器如何实现比BeanFactory更丰富的功能？ — 同样的问题</p><p>ApplicationContext间接继承BeanFactory，自然拥有BeanFactory的功能，此外还继承了其他三个接口：ApplicationEventPublisher，ResourceLoader，MessageSource，因此多出来的功能是通过三个接口抽象定义的。</p><p>3、BeanFactory与ApplicationContext分别如何进行构建？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(<span class="string">&quot;配置文件路径&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;配置文件路径&quot;</span>);</span><br><span class="line"><span class="comment">// 或者根据下面的方式构建</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicatiionContext</span>(<span class="string">&quot;配置文件路径&quot;</span>)</span><br></pre></td></tr></table></figure><p>4、是不是所有的对象实例都应该通过Bean容器进行管理？</p><p>当然不是，通常来说只有需要对外提供服务的对象实例要通过Spring容器管理起来</p><p>5、Bean如何被注入Spring容器？—阅读源代码</p><p>todo</p><p>6、BeanDefinitionRegistry和BeanDefinitionReader类之间的关系？或者说Spring如何实现同一个的外部配置文件加载？</p><p>BeanDefinitionReader负责将相应的配置文件内容读取并映射到BeanDefinition，然后将映射完成的BeanDefinition注册到一个BeanDefinitionRegistry中，然后BeanDefinitionRegistry即完成Bean的注册和加载。大部分的工作，如括解析文件格式、装配BeanDefinition之类的工作，都是由BeanDefinitionReader的实现类来完成，BeanDefinitionRegistry只负责保管。</p><p>BeanDefinitionReader有3个实现类，一个抽象类AbstractBeanDefinitionReader，2个具体子类：PropertiesBeanDefinitionReader和XmlBeanDefinitionReader，说明Spring默认支持2种配置文件：xml和properties</p><p>因此，如果想要实现自定义配置文件的加载，可以通过继承AbstractBeanDefinitionReader来实现。</p><p>7、@Component和@Autowired注解的作用</p><p>@Component在类和接口上标注，开启自动扫包后，对应扫描路径下如果有该注解的类实例会注册到Spring容器中，通过Spring容器进行管理</p><p>自动扫包配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.spring21.project.base.package&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>@Autowired是从Spring容器中获取依赖的对象实例并注入到注解标注的地方</p><p>8、xml配置文件有哪些关键的配置？</p><p>某个场景下如果要对大部分的<code>&lt;bean&gt;</code>进行设置某些行为的话，可以利用<code>&lt;beans&gt;</code>统一设置。</p><p>一些常用的属性<br>default-lazy-init<br>default-autowire<br>default-dependency-check<br>default-init-method<br>default-destroy-method</p><p>添加别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;dataSourceForMasterDatabase&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;masterDataSource&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在xml配置文件进行配置时，如果通过属性注入要求类提供setter方法，通过构造参数注入要求类提供对应参数列表的构造方法</p><p>了解如何注入复杂类型的对象，如集合、空元素null、内部bean</p><p>depends-on显示指定bean之间的依赖关系，可以通过逗号分隔指定多个依赖的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classAInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...ClassA&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;configSetup,configSetup2,...&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configSetup&quot;</span> <span class="attr">class</span>=<span class="string">&quot;SystemConfigurationSetup&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configSetup2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;SystemConfigurationSetup2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>9、Spring提供了哪些自动绑定方式？<br>5种：no(默认), byName, byType, constructor, autodetect</p><p>手动指定的绑定关系，会覆盖自动绑定的关系，一般来说会使用手动绑定，明确依赖关系，便于管理，避免一些不可预知的行为发生。比如，使用byName可能会导致同名的bean定义被替换，造成问题。</p><p>10、lazy-init属性了解<br>默认会进行初始化，除非设置了<code>lazy-init=&quot;true&quot;</code>。假如一个对象A依赖了延迟初始化的bean对象B，那么A实例化时会先实例化对象B，表现为lazy-init属性设置失效。</p><p>11、如果父类和子类都要放到bean容器进行管理，需要如何配置呢？</p><p>子类会继承父类的非私有属性，假如父类和子类的属性指向同一个对象，可以使用parent属性简化配置，当然建议是在代码属性上加上@Autowired注解，或者在xml中引用同一个bean对象即可。</p><h1 id="Bean的生命周期-1"><a href="#Bean的生命周期-1" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p>1.bean的scope</p><p>标记为singleton的bean是由容器来保证这种类型的bean在同一个容器中只存在一个共享实例；<br>而Singleton模式则是保证在同一个Classloader中只存在一个这种类型的实例</p><p>2、自定义scope的步骤</p><ul><li>实现Scope接口，参考org.springframework.context.support.SimpleThreadScope实现</li><li>Spring容器（例如ApplicationContext）中注册<ul><li>直接编码：<code>beanFactory.registerScope(&quot;thread&quot;,threadScope);</code></li><li>xml配置：</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomScopeConfigurer&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scopes&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;thread&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.foo.ThreadScope&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>3、工厂bean类FactoryBean的作用是什么？使用方法？</p><p>Java强调面向接口编程，依赖的属性通常为接口，但类实例化时通常会选择具体的接口实现，FactoryBean就是将声明依赖接口的对象与接口实现类关联起来的一种方式。</p><p>FactoryBean这里有一个知识点，用到了工厂方法模式。</p><p>工厂方法模式：<br>定义一个用于创建对象的接口，让子类决定实例化哪一个类，使一个类的实例化延迟到其子类。或者更加本质的概括说：延迟到子类来选择实现</p><p>4、Spring容器有哪些地方使用了FactoryBean？</p><ul><li>JndiObjectFactoryBean</li><li>LocalSessionFactoryBean </li><li>SqlMapClientFactoryBean </li><li>ProxyFactoryBean </li><li>TransactionProxyFactoryBean </li></ul><p>4、依赖注入DI与控制反转IoC是同一个意思吗？区别是什么？</p><p>两者是对同一件事情的不同描述<br>依赖注入：应用程序依赖于容器并注入它所需要的资源<br>控制反转：由容器反向地向应用程序注入其所需要的外部资源</p><p>5、类B是类A的属性成员，假如类B定义为prototype，如果要确保每次实例化A时获取一个新的实例化对象B，需要通过lookup-method标签指定获取依赖对象B的方式，Spring会通过Cglib动态生成一个子类并覆写方法getNewsBean，把新生成的子类对象注入到对象A的newsBean属性中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;newsBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;..domain.FXNewsBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mockPersister&quot;</span> <span class="attr">class</span>=<span class="string">&quot;..impl.MockNewsPersister&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">&quot;getNewsBean&quot;</span> <span class="attr">bean</span>=<span class="string">&quot;newsBean&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BeanFactoryAware接口：<br>容器会自己本身注入到BeanFactoryAware接口的子类中，通过BeanFactoryAware接口方法setBeanFactory实现，可以定义一个BeanFactory beanFactory属性，通过覆写setBeanFactory方法设置到beanFactory属性中，后续再次获取scope为prototype的对象时，则每次都通过beanFactory.getBean(“newsBean”)来获取。这种方式与上面的效果一样。</p><p>ObjectFactoryCreatingFactoryBean是一个FactoryBean实现类，它的父类还实现了BeanFactoryAware接口，但是通常认为直接操作BeanFactory可能会导致一些安全问题。ObjectFactoryCreatingFactoryBean会返回一个ObjectFactory实例，用于与Spring容器进行交互，隔离了客户端对BeanFactory的直接引用。</p><p>与方法注入只是通过相应方法为主体对象注入依赖对象不同，方法替换更多体现在方法的实现层<br>面上，它可以灵活替换或者说以新的方法实现覆盖掉原来某个方法的实现逻辑</p><p>方法替换MethodReplacer</p><p>ObjectFactoryCreatingFactoryBean源代码示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- Prototype bean since we have state --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a.b.c.MyService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myServiceFactory&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetBeanName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">idref</span> <span class="attr">local</span>=<span class="string">&quot;myService&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a.b.c.MyClientBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myServiceFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myServiceFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClientBean</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> ObjectFactory&lt;MyService&gt; myServiceFactory;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyServiceFactory</span><span class="params">(ObjectFactory&lt;MyService&gt; myServiceFactory)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myServiceFactory = myServiceFactory;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someBusinessMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// get a &#x27;fresh&#x27;, brand new MyService instance</span></span><br><span class="line">    <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="built_in">this</span>.myServiceFactory.getObject();</span><br><span class="line">    <span class="comment">// use the service object to effect the business logic...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、BeanFactoryPostProcessor容器扩展机制，可以实现什么功能？</p><p>本身就有很多实现</p><p>BeanFactoryPostProcessor一些常见的实现：</p><p>PropertyPlaceholderConfigurer<br>（1）PropertyPlaceholderConfigurer允许我们在xml配置文件中使用&gt;${jdbc.url}之类的占位符，加载配置文件的方式对其进行填充，因此可以将这些配置信息单独配置到一个个的properties，不需要全部写到xml中。直接改properties的KV结构要比改xml配置文件更不如容易出错。<br>（2）PropertyPlaceholderConfigurer不单可以从properties文件中加载配置项，也可以从Java的System类中的Properties加载配置项，默认是先从properties文件中查找，再从System的Properties中查找。</p><p>PropertyOverrideConfigurer<br>（1）对任何的bean定义进行更改，指定一些properties配置文件，里面的kv可以替换掉其他地方的键值对定义，还可以修改bean定义。比如使用<code>beanName.propertyName=value</code>来修改。<br>（2）配置多个PropertyOverrideConfigurer时，以最后一个为准。</p><p>PropertyPlaceholderConfigurer和PropertyOverrideConfigurer都继承自PropertyResourceConfigurer，里面有一个protected类型的方法convertPropertyValue，子类可以覆盖这个方法对相应的配置项进行转换，比如有些敏感配置项是通过密文存储，加载的时候需要先解密在覆盖到bean定义中。</p><p>CustomEditorConfigurer<br>对对BeanDefinition没有做任何变动，只是将后期会用到的信息注册到容器。</p><p>PropertyEditor<br>xml文件中配置的都是String类型的字符串，解析bean定义时需要转换为实际的类型，比如</p><ul><li>StringArrayPropertyEditor：将逗号分隔的字符串转换为String[]格式</li><li>ClassEditor：根据String类型的class名称，直接将其转换成相应的Class对象，相当于Class.forName(String)完成的功效</li><li>FileEditor等等</li></ul><p>PropertyEditor也可以自定义，可以通过实现PropertyEditor接口，也可以继承PropertyEditorSupport，如果仅仅涉及格式转换，可以重写setAsText()和getAsText()方法</p><p>7、bean的实例化过程？或者说bean的生命周期<br>第一次调用beanFactory.getBean会进行bean的实例化，第二次调用会直接返回容器缓存的对象实例（prototype类型的bean除外）</p><p>实例化的过程如下：</p><ul><li>实例化bean对象</li><li>设置对象属性</li><li>检查Aware相关接口并设置相关依赖</li><li>BeanPostProcessor前置处理postProcessBeforeInitialization</li><li>检查是否是InitializingBean的实现，决定是否调用afterPropertiesSet方法</li><li>如果配置有init-method方法，则调用</li><li>BeanPostProcessor后置处理postProcessAfterInitialization</li><li>注册必要的Destruction相关回调接口</li><li><strong>使用中</strong></li><li>如果实现了DisposableBean接口，则调用destroy方法</li><li>如果配置有destroy-method方法，则调用</li></ul><p>可以AbstractAutowireCapableBeanFactory的createBean()方法查看完整实现</p><p>8、容器内部可以通过哪些方式来实例化bean？</p><p>策略模式来决定采用何种方式初始化bean实例，可以通过反射或者Cglib动态字节码的方式初始化bean或者动态生成其子类。<br>InstantiationStrategy定义是实例化策略的抽象接口，直接子类SimpleInstantiationStrategy实现了简单的对象实例化功能，可以通过反射来实例化对象实例。<br>CglibSubclassingInstantiationStrategy继承了SimpleInstantiationStrategy，除了能够通过反射实例化对象，也可以通过Cglib动态字节码技术生成某个类的子类，满足方法注入所需对象的实例化需求。<br>默认情况下，Spring容器内部采用的是CglibSubclassingInstantiationStrategy</p><p>策略模式：<br>AbstractAutowireCapableBeanFactory相当于context，持有InstantiationStrategy，而上面两种策略可以根据需要进行选择，默认选用CglibSubclassingInstantiationStrategy</p><p>BeanWrapper定义继承了org.springframework.beans.PropertyAccessor接口，可以以统一的<br>方式对对象属性进行访问</p><p>9、Spring容器的Aware接口</p><p>BeanFactory容器的Aware接口</p><ul><li>BeanNameAware：将改对象实例的bean定义对应的beanName设置到当前对象实例</li><li>BeanClassLoaderAware：将对应加载当前bean的ClassLoader注入到当前对象。默认会使用ClassUtils类的ClassLoader</li><li>：将BeanFactory容器自身注入到当前对象实例，当前对象实例就持有了BeanFactBeanFactoryAwareory容器的引用</li></ul><p>ApplicationContext容器的Aware接口</p><ul><li>ResourceLoaderAware：ApplicationContext实现了ResourceLoaderAware接口，会将当前的ApplicationContext容器注入到当前对象实例，与BeanFactoryAware类似</li><li>ApplicationEventPublisherAware：将当前的ApplicationContext容器注入到当前对象实例，还具有发布器的作用</li><li>MessageSourceAware：将当前的ApplicationContext容器注入到当前对象实例，并提供国际化的信息支持</li></ul><p>10、BeanFactoryPostProcessor和BeanPostProcessor区别<br>（1）前者是容器启动阶段，后者是对象实例化阶段。<br>（2）BeanFactoryPostProcessor会处理容器内所有符合条件的BeanDefinition，BeanPostProcessor会处理所有符合条件的实例化后的对象实例</p><h1 id="ApplicationContext容器"><a href="#ApplicationContext容器" class="headerlink" title="ApplicationContext容器"></a>ApplicationContext容器</h1><p>1、讲讲ApplicationContext如何实现统一资源加载？</p><p>Spring中通过Resource定义了资源的抽象接口，ResourceLoader定义资源的加载，两者结合完成统一资源加载。ApplicationContext继承了ResourcePatternResolver，间接实现了ResourceLoader接口，因此这就是ApplicationContext支持Spring内统一资源加载原因。</p><p>涉及的几个Aware接口：</p><ul><li>ResourceLoaderAware</li><li>ApplicationContextAware</li></ul><p>2、Java和Spring分别使用什么方式进行国际化信息的处理？</p><p>（1）Java主要涉及2个类；java.util包里的Locale和ResourceBundle，ResourceBundle用来保存特定某个Locale的信息，ResourceBundle管理一组信息序列，命名格式为：{basename}<em>{language}</em>{COUNTRY}.properties，例如messages_zh_CN.properties，每个文件涉及的key相同，value与国家语言有关。</p><p>（2）Spring通过MessageSource接口，传入相应的Locale、资源的key以及相应参数就可以获取相应的信息，不用先根据Locale取得ResourceBundle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageSource</span> &#123; </span><br><span class="line">String <span class="title function_">getMessage</span><span class="params">(String code, Object[] args, String defaultMessage, Locale locale)</span>; </span><br><span class="line"></span><br><span class="line">String <span class="title function_">getMessage</span><span class="params">(String code, Object[] args, Locale locale)</span> <span class="keyword">throws</span> NoSuchMessageException; </span><br><span class="line"></span><br><span class="line">String <span class="title function_">getMessage</span><span class="params">(MessageSourceResolvable resolvable, Locale locale)</span> <span class="keyword">throws</span> NoSuchMessage zException; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>ApplicationContext使用messageSourcec示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>messages<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>errorcodes<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> ...; </span><br><span class="line"><span class="type">String</span> <span class="variable">fileMenuName</span> <span class="operator">=</span> ctx.getMessage(<span class="string">&quot;menu.file&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;F&quot;</span>&#125;, Locale.US); </span><br><span class="line"><span class="type">String</span> <span class="variable">editMenuName</span> <span class="operator">=</span> ctx.getMessage(<span class="string">&quot;menu.file&quot;</span>, <span class="literal">null</span>, Locale.US); </span><br><span class="line">assertEquals(<span class="string">&quot;File(F)&quot;</span>, fileMenuName); </span><br><span class="line">assertEquals(<span class="string">&quot;Edit&quot;</span>, editMenuName); </span><br></pre></td></tr></table></figure><p>MessageSource的三种实现：</p><ul><li>StaticMessageSource：一般只用于测试</li><li>ResourceBundleMessageSource：提供了对多个ResourceBundle的缓存以提高查询速度，常用。</li><li>ReloadableResourceBundleMessageSource：通过其cacheSeconds属性可以指定时间段，以定期刷新并检查底层的properties资源文件是否有变更。</li></ul><p>上面三种MessageResource可以独立于容器在程序中使用。</p><p>MessageSourceAware类</p><p>3、容器内事件发布机制</p><p>（1）<br>与观察者模式有些相似，Listener相当于Observer，事件发布器Publisher+ApplicationEvent相当于主题Subject，持有Listner集合并维护集合，当主题状态发生变化时，通知所有Listener<br>注意：Spring的ApplicationContext容器内的事件发布机制，主要用于单一容器内的简单消息通知和处<br>理，并不适合分布式、多进程、多容器之间的事件通知。</p><p>（2）一旦容器内发布ApplicationEvent及其子类的事件，注册到容器的ApplicationListener就会对事件进行处理。</p><p>一些ApplicationEvent的子类：</p><ul><li>ContextClosedEvent：ApplicationContext容器在即将关闭时发布的事件类型</li><li>ContextRefreshedEvent：ApplicationContext容器在初始化或者刷新时发布的事件类型</li><li>RequestHandledEvent：Web请求处理后发布的事件类型，其中一个子类ServletRequestHandled用于Java EE的Servlet事件。</li></ul><p>ApplicationListener<br>ApplicationContext容器内使用的自定义事件监听器接口定义，继承自java.util.EventListener，ApplicationContext容器启动时，会自动识别并加载EventListener类型的bean定义，一旦容器内有事件发布，会将通知这些注册到容器的EventListener</p><p>ApplicationContext<br>继承了ApplicationEventPublisher接口，担当了事件发布者的角色，通过类层次结构可以看出来，它将对应的活委托给了ApplicationEventMulticaster接口来实现，而ApplicationEventMulticaster接口有一个抽象子类AbstractApplicationEventMulticaster，这个抽象子类实现了监听器的管理，将事件发布委托给了它的子类SimpleApplicationEventMulticaster。这个SimpleApplicationEventMulticaster事件发布交给Executor类型去执行，是否同步异步可以自定义。</p><p>（3）一些Aware类<br>ApplicationEventPublisherAware</p><p>4、Spring中的Aware接口使用场景有哪些？<br>Aware接口是Spring框架中提供的一组标记接口，用于在Bean装配的过程中获取Spring容器中提供的一些核心组件或运行时上下文等信息。通过使用Aware接口，我们可以在Bean实例化和初始化过程中获取到Spring容器中其他组件，方便Bean类实现更复杂的业务逻辑。</p><p>通俗的说，只要实现了Aware子接口的Bean都能获取到一个Spring底层组件。实现XXXAware接口的bean：通过实现的setXXX方法就可以获取到XXX组件对象，在Aware的实现类就可以对组件进行操作了。具体可以查看源码org.springframework.context.support.ApplicationContextAwareProcessor#invokeAwareInterfaces，本质是通过BeanPostProcessor的子类ApplicationContextAwareProcessor调用postProcessBeforeInitialization方法完成一些操作。</p><p>常见的是实现ApplicationContextAware获取ApplicationContext，做成一个工具类AppplicationUtil，提供应用去获取bean。</p><p>常见的Aware实现：</p><ul><li>ApplicationContextAware：web项目中可以获取ServletContext，获取国际化信息、Scheduler等定时任务</li><li>BeanFactoryAware：获取Spring容器中的Bean实例、手动注册BeanDefinition</li><li>MessageSourceAware：获取国际化信息</li><li>ResourceLoaderAware：进行资源加载操作</li><li>ServletContextAware：让Bean获取到ServletContext对象</li><li>EnvironmentAware：获取当前的环境配置，获取配置文件中的属性值</li><li>ServletConfigAware：让Bean获取到ServletConfig对象，可以获取Servlet相关参数</li><li>ApplicationContextInitializer：在Spring容器初始化之前做一些必要的操作</li><li>EmbeddedValueResolverAware：替换配置文件中的占位符，与@Value功能类似</li><li>LoadTimeWeaverAware：让Bean获取到LoadTimeWeaver对象，实现类的动态加载</li><li>ApplicationEventPublisherAware：让Bean获取到ApplicationEventPublisher对象，发布和监听事件</li><li>ConversionServiceAware：类型转换，数据校验</li></ul><h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><p>1、系统有哪些BeanPostProcessor？功能主要是做什么？</p><p>AutowiredAnnotationBeanPostProcessor：往@Autowired标注的对象注入</p><p>2、JSR250标准下的注解有哪些？</p><p>使用JSR250注解需要在xml配置文件往Spring容器中注入下面的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>@Resource：byName的方式注入<br>@PostConstruct和@PreDestroy：用于标注对象生命周期管理相关方法</p><p>同理，使用Spring的注解@Autowired，也需要在xml配置进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>当然，有一种更简便的方法，在xml配置文件中使用下面配置搞定以上所有的BeanPostProcessor配置，作用是把AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor四个BeanPostProcessor注册到容器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>classpath-scanning功能可以从某一顶层包（base package）开始扫描。当扫描到某个类标注了相应的注解之后，就会提取该类的相关信息，构<br>建对应的BeanDefinition，然后把构建完的BeanDefinition注册到容器。注意，下面配置还将AutowiredAnnotationBeanPostProcessor和<br>CommonAnnotationBeanPostProcessor一并注册到了容器中，因此上面的<code>&lt;context:annotation-config/&gt;</code>也可以不要。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.spring21&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="Spring-AOP切面"><a href="#Spring-AOP切面" class="headerlink" title="Spring AOP切面"></a>Spring AOP切面</h1><p>涉及到的设计模式：代理模式</p><p>1、什么是Spring AOP？有哪些关键概念？</p><p>Joinpoint：需要织入代码的地方，比如方法调用，字段设置、异常处理等</p><p>Pointcut：Joinpoint表达式定义<br>常见的Pointcut</p><ul><li><p>Advice：横切逻辑，有5种</p></li><li>BeforeAdvice：通常不会中断程序执行流程，除非有必要可以通过抛异常方式中断当前流。实现MethodBeforeAdvice即可</li><li>AfterAdvice：<ul><li>After returning Advice：当前Joinpoint处执行流程正常完成之后。对应接口AfterReturningAdvice</li><li>After throwing Advice：抛异常的情况下会执行。对应接口ThrowsAdvice，覆写三个方法，可以对运行时异常、普通异常、应用异常分别处理，可以发送邮件给对应人员。</li><li>After finally Advice：无论正常终了还是抛出异常都会执行，类似finally块，使用MethodInterceptor接口实现</li></ul></li><li>Around Advice：可以在Joinpoint之前和之后指定相应逻辑，甚至于中断或忽略Joinpoint原来程序流程的执行。Spring AOP没有直接定义Around Advice，使用MethodInterceptor接口实现</li></ul><p>MethodInterceptor可以干些什么？<br>什么都能干，应用场景很多，系统安全验证检查、权限控制、性能检测、限流、日志记录等等</p><p>Aspect：对系统中横切点逻辑进行模块化封装的AOP实体。</p><p>2、什么是动态代理机制？<br>Java中的动态代理由Proxy和InvocationHandler两个类实现，</p><p>3、Cglib动态字节码技术？<br>借助Cglib动态字节码技术，在系统运行期间，为目标对象生成相应的扩展子类。</p><p>4、Spring MVC的拦截器Interceptor如何实现？</p><p>实现 org.springframework.web.servlet.HandlerInterceptor接口或继承 org.springframework.web.servlet.handler.HandlerInterceptorAdapter类，重写下面方法进行拦截处理。</p><p>一些拦截器的细节：</p><ul><li>拦截链条中，假如有A、B、C三个拦截器，假如各个拦截器的preHandle和postHandle方法都返回true，那么afterCompletion方法执行顺序是：C-&gt;B-&gt;A，并且都在postHandle执行完成后执行</li><li>假如preHandle方法返回true，但是controller的方法中抛出异常，那么当前Interceptor的afterCompletion方法也会执行，postHandle方法不执行</li><li>假如preHandle方法返回false，那么后续的controller方法和拦截器及其方法都不会执行</li><li>拦截链条中，假如当前拦截器的preHandle返回false，当前拦截器的拦截方法不会执行，但是前面拦截器的afterCompletion方法还会执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309031600647.png" alt=""></p><p>使用步骤：</p><ul><li>实现HandlerInterceptor接口或者继承HandlerInterceptorAdapter，重写对应拦截方法</li><li>配置拦截器，可以用@Configuration注解或者xml配置文件进行配置，主要包括拦截请求类型、拦截的Interceptor信息，注意添加拦截器是有顺序关系的。</li></ul><p>xml配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种方式配置某个拦截器，默认是拦截所有请求的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.citi.interceptor.ZuluInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回false，后续的Interceptor不会继续执行，为true时会继续调用后续Interceptor的preHandle方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  Controller方法调用之后执行，通常用于设置一些通用的响应信息，如响应字段等，可以对Controller 处理之后的 ModelAndView 对象进行操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(</span></span><br><span class="line"><span class="params">HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在ModelAndView对象完成渲染之后且在响应返回之前会执行该方法对结果进行后置处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(</span></span><br><span class="line"><span class="params">HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：<br>（1）性能监控，监控请求处理的时长<br>通常来说controller请求处理前和后分别记录时间，两者时间差就是整个请求处理所耗费的时间，对于一些时间延迟比较大的，我们可以进行分析和优化。实现步骤如下：<br>利用ThreadLocal线程私有相关的变量，在实现的Interceptor中持有该变量，preHandle方法记录请求到达时间，在postHandle请求中记录请求处理完成后的时间，然后两个时间的差值就是所耗费的时间。</p><p>（2）拦截器通过判断 cookie/session 中是否有该标识，来决定继续流程还是重定向到登录页面<br><code>request.setAttribute(&quot;requestStartTime&quot;, startTime);</code>同样可以实现请求耗时的计算。</p><p>5、过滤器Filter与拦截器Interceptor有什么区别？分别在什么场景使用？<br>Filter和Interceptor都可以用来实现权限校验、日志处理、数据解压/压缩处理、加密/解密处理等问题，但是Filter是Servlet规范，主要在Tomcat等Web容器下使用，Interceptor是Spring MVC规范，主要由Spring容器进行管理。</p><p>（1）Filter主要用责任链模式进行设计，在Tomcat中使用org.apache.catalina.core.ApplicationFilterChain来实现上面提到的责任链模式</p><p>通常在web.xml配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MDCInsertingServletFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        ch.qos.logback.classic.helpers.MDCInsertingServletFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MDCInsertingServletFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是在Spring中使用Filter，还可以通过注解的方式<br>在自定义过滤器上使用@WebFilter注解，并在启动类上使用@ServletComponentScan注解；结合@WebFilter注解中的urlPattern字段，Spring能够将过滤器的处理粒度进一步细化，还可以通过@Order来定义过滤器的顺序</p><p>（2）Interceptor是Spring原创的，interceptor的执行时机是要晚于filter的前置处理并且早于filter的后置处理的，同样也是采用责任链的设计模式。</p><p>详细可以查看org.springframework.web.servlet.DispatcherServlet#doDispatch源码，</p><p>Spring中的配置方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">​</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">DemoInterceptor</span>()).addPathPatterns(<span class="string">&quot;/api/*&quot;</span>).excludePathPatterns(<span class="string">&quot;/api/ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309031642303.png" alt=""></p><p>6、Spring有几种拦截器<br>Filter过滤器-&gt;Interceptor拦截器-&gt;@ControllerAdvice-&gt;AOP</p><p>使用<br>Filter：通常同时实现Filter, Ordered接口并重写，可以自定义顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">Filter 进入</span><br><span class="line">Interceptor preHandle 进入</span><br><span class="line">ControllerAdvice init 进入</span><br><span class="line">Aop 进入</span><br><span class="line">业务：user.name: 宫三公子</span><br><span class="line">ControllerAdvice handleException 进入</span><br><span class="line">Interceptor afterCompletion 进入</span><br><span class="line">Filter 退出</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309031658844.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309031701159.png" alt=""></p><p>9、Spring的循环依赖如何解决？如何避免循环依赖？</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>K8s 集群搭建系列（四）：集成Kubernetes Dashboard</title>
      <link href="/2023/08/03/K8s-cluster-series-Kubernetes-dashboard-integration/"/>
      <url>/2023/08/03/K8s-cluster-series-Kubernetes-dashboard-integration/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>在k8s集群的master节点部署Kubernetes dashboard，便于管理集群、扩容。</p><h1 id="生成dashboard自签名证书"><a href="#生成dashboard自签名证书" class="headerlink" title="生成dashboard自签名证书"></a>生成dashboard自签名证书</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /export/servers/kubernetes/certs &amp;&amp; <span class="built_in">cd</span> /export/servers/kubernetes/certs/</span><br><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">openssl genrsa -out dashboard.key 2048</span><br><span class="line"><span class="comment"># 生成自签证书，CN=&lt;Master ip或者域名&gt;</span></span><br><span class="line">openssl req -days 3650 -new -key dashboard.key -out dashboard.csr -subj /C=CN/ST=BEIJING/L=BEIJING/O=JD/OU=JD/CN=192.168.2.100</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="创建Secret"><a href="#创建Secret" class="headerlink" title="创建Secret"></a>创建Secret</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls kubernetes-dashboard-certs -n kubernetes-dashboard --key dashboard.key --cert dashboard.crt</span><br></pre></td></tr></table></figure><p>如果发现Secret有问题，可以通过下面命令删除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete secret kubernetes-dashboard-certs -n kube-system</span><br></pre></td></tr></table></figure><h1 id="配置dashboard-yaml文件"><a href="#配置dashboard-yaml文件" class="headerlink" title="配置dashboard.yaml文件"></a>配置dashboard.yaml文件</h1><p><code>/export/servers/k8s_dashboard/kubernetes-dashboard.yml</code>配置文件可以直接从网上获取，也可以参考附录生成，应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /export/servers/k8s_dashboard/kubernetes-dashboard.yml</span><br><span class="line"><span class="comment"># 撤销应用配置文件：kubectl delete -f /export/servers/k8s_dashboard/kubernetes-dashboard.yml</span></span><br></pre></td></tr></table></figure><p>查看kubernetes-dashboard是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -A | grep kubernetes-dashboard</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308031620009.png" alt=""></p><p>此时已经可以访问dashboard页面，但是我们需要创建一个有管理权限的admin用户进行登陆。</p><p>web浏览器访问地址：<a href="https://192.168.2.100:31001/#/login">https://192.168.2.100:31001/#/login</a></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308031622927.png" alt=""></p><h1 id="制作访问token"><a href="#制作访问token" class="headerlink" title="制作访问token"></a>制作访问token</h1><p>创建Dashboard管理用户的配置文件。</p><p><code>/export/servers/k8s_dashboard/dashboard-adminuser.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行<code>dashboard-adminuser.yaml</code>配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面的命令是创建一个叫admin-user的服务账号，放在kubernetes-dashboard命名空间下，并将cluster-admin角色绑定到admin-user账户，这样admin-user账户就有了管理员的权限。</span></span><br><span class="line">kubectl create -f /export/servers/kubernetes/dashboard-adminuser.yaml</span><br><span class="line"><span class="comment"># 查看admin-user的token，复制可用于Dashboard UI登陆</span></span><br><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要删除帐号，可以执行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br></pre></td></tr></table></figure><h1 id="登陆Dashboard"><a href="#登陆Dashboard" class="headerlink" title="登陆Dashboard"></a>登陆Dashboard</h1><p>复制上一步的Token返回Dashboard页面进行登陆，选择全部命名空间可以查看所有的负载：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308031635854.png" alt=""></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Kubernetes-dashboard的配置文件"><a href="#Kubernetes-dashboard的配置文件" class="headerlink" title="Kubernetes dashboard的配置文件"></a>Kubernetes dashboard的配置文件</h2><p>官方推荐配置文件，注意需要修改<br><a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml">https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</a></p><p><code>/export/servers/k8s_dashboard/kubernetes-dashboard.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2017 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31001</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-csrf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">csrf:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-key-holder</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-settings</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-key-holder&quot;</span>, <span class="string">&quot;kubernetes-dashboard-certs&quot;</span>, <span class="string">&quot;kubernetes-dashboard-csrf&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-settings&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get metrics.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;proxy&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services/proxy&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;http:heapster:&quot;</span>, <span class="string">&quot;https:heapster:&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>, <span class="string">&quot;http:dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Metrics Scraper to get metrics from the Metrics server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;metrics.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>, <span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">seccompProfile:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">RuntimeDefault</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/dashboard:v2.7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--auto-generate-certificates</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">seccompProfile:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">RuntimeDefault</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/metrics-scraper:v1.0.8</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/kubernetes/dashboard">Kubernetes Dashboard Github repo</a><br><a href="https://github.com/kubernetes/dashboard/tree/06e7fac1b78727e07c0dd7b693279d13b4914b48/aio/deploy">Kubernetes Dashboard的官方配置文件参考</a><br><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/">Kubernetes Dashboard官方指导</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes Dashboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s 集群搭建系列（三）：Harbor + Docker搭建K8s集群</title>
      <link href="/2023/08/02/Create-k8s-cluster-in-linux/"/>
      <url>/2023/08/02/Create-k8s-cluster-in-linux/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>Harbor + Docker搭建K8s集群</p><h1 id="系统资源"><a href="#系统资源" class="headerlink" title="系统资源"></a>系统资源</h1><table><thead><tr><th style="text-align:left">IP</th><th style="text-align:left">角色</th><th style="text-align:left">主机名</th><th style="text-align:left">组件</th><th style="text-align:left">配置</th></tr></thead><tbody><tr><td style="text-align:left">192.168.2.183</td><td style="text-align:left">Windows10，个人PC</td><td style="text-align:left">Tsukasa</td><td style="text-align:left">VMWare</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">deploy</td><td style="text-align:left">tsukasa</td><td style="text-align:left">ansible, docker, harbor</td><td style="text-align:left">4Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-master</td><td style="text-align:left">kubectl, kubelet, kubeadm, flnanel</td><td style="text-align:left">2Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.101</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker01</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.102</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker02</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.103</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd01</td><td style="text-align:left">etcd</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.104</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd02</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.105</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd03(leader)</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.106</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql01</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr><tr><td style="text-align:left">192.168.2.107</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql02</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr></tbody></table><h1 id="一、系统基础配置"><a href="#一、系统基础配置" class="headerlink" title="一、系统基础配置"></a>一、系统基础配置</h1><h2 id="工作、日志及数据存储目录创建"><a href="#工作、日志及数据存储目录创建" class="headerlink" title="工作、日志及数据存储目录创建"></a>工作、日志及数据存储目录创建</h2><p>deploy节点执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在deploy主机也创建对应目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /export/servers</span><br><span class="line"><span class="built_in">mkdir</span> -p /export/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /export/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /export/upload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分发命令到所有节点</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;mkdir -p /export/servers&quot;</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;mkdir -p /export/logs&quot;</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;mkdir -p /export/data&quot;</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;mkdir -p /export/upload&quot;</span></span><br></pre></td></tr></table></figure><h2 id="取消SELINUX设定，关闭防火墙和关闭交换分区"><a href="#取消SELINUX设定，关闭防火墙和关闭交换分区" class="headerlink" title="取消SELINUX设定，关闭防火墙和关闭交换分区"></a>取消SELINUX设定，关闭防火墙和关闭交换分区</h2><p>deploy节点执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消SELINUX设定</span></span><br><span class="line">ansible k8s -m command -a &quot;setenforce 0&quot;</span><br><span class="line">ansible k8s -m command -a &quot;sed --follow-symlinks -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">ansible k8s -m command -a &quot;firewall-cmd --set-default-zone=trusted&quot;</span><br><span class="line">ansible k8s -m command -a &quot;firewall-cmd --complete-reload&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时关闭交换分区</span></span><br><span class="line">ansible k8s -m command -a &quot;swapoff -a&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置系统加载时关闭交换分区</span></span><br><span class="line">ansible  k8s  -m shell -a &quot;yes | cp /etc/fstab /etc/fstab_bak&quot;</span><br><span class="line">ansible  k8s  -m shell -a &quot;cat /etc/fstab_bak | grep -v swap &gt; /etc/fstab&quot;</span><br><span class="line">ansible  k8s  -m shell -a &quot;echo vm.swappiness = 0 &gt;&gt; /etc/sysctl.d/k8s.conf&quot;</span><br><span class="line">ansible  k8s  -m shell -a &quot;sysctl -p /etc/sysctl.d/k8s.conf&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果对sysctl加载顺序感兴趣，可以执行<code>sysctl --system</code>查看</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308022353017.png" alt=""></p><h2 id="ulimit优化"><a href="#ulimit优化" class="headerlink" title="ulimit优化"></a>ulimit优化</h2><p>ulimit用来限制每个用户可以使用的资源，如CPU、内存、句柄等。</p><p><code>/etc/security/limits.conf</code>设置以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br><span class="line">* soft <span class="built_in">nproc</span> 102400</span><br><span class="line">* hard <span class="built_in">nproc</span> 102400</span><br><span class="line">* soft nofile 1048576</span><br><span class="line">* hard nofile 1048576</span><br></pre></td></tr></table></figure><p>ansible命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m shell -a <span class="string">&quot;cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF</span></span><br><span class="line"><span class="string">* soft memlock unlimited</span></span><br><span class="line"><span class="string">* hard memlock unlimited</span></span><br><span class="line"><span class="string">* soft nproc 102400</span></span><br><span class="line"><span class="string">* hard nproc 102400</span></span><br><span class="line"><span class="string">* soft nofile 1048576</span></span><br><span class="line"><span class="string">* hard nofile 1048576</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><h2 id="内核及网络参数优化"><a href="#内核及网络参数优化" class="headerlink" title="内核及网络参数优化"></a>内核及网络参数优化</h2><p>所有节点的<code>/etc/sysctl.conf</code>添加下面配置信息，可以通过ansible命令批量添加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 1048576</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 5</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2 </span><br><span class="line">vm.max_map_count = 262144</span><br></pre></td></tr></table></figure><p>ansible命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m shell -a <span class="string">&quot;cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span></span><br><span class="line"><span class="string">fs.file-max = 1048576</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_fin_timeout = 5</span></span><br><span class="line"><span class="string">net.ipv4.neigh.default.gc_stale_time = 120</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.arp_announce = 2</span></span><br><span class="line"><span class="string">net.ipv4.conf.lo.arp_announce = 2 </span></span><br><span class="line"><span class="string">vm.max_map_count = 262144</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载让配置生效</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;sysctl -p&quot;</span></span><br><span class="line"><span class="comment"># 查询所有配置，根据需要执行</span></span><br><span class="line">sysctl -a</span><br></pre></td></tr></table></figure><h2 id="Kubernetes主机hosts设置"><a href="#Kubernetes主机hosts设置" class="headerlink" title="Kubernetes主机hosts设置"></a>Kubernetes主机hosts设置</h2><p><code>cd /export/upload &amp;&amp; vim hosts_set.sh</code>，输入下面内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span></span><br><span class="line"><span class="string">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span></span><br><span class="line"><span class="string">192.168.2.99 deploy harbor</span></span><br><span class="line"><span class="string">192.168.2.100 master01</span></span><br><span class="line"><span class="string">192.168.2.101 worker01</span></span><br><span class="line"><span class="string">192.168.2.102 worker02</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>deploy主机执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m copy -a <span class="string">&#x27;src=/export/upload/hosts_set.sh dest=/export/upload&#x27;</span></span><br><span class="line">ansible k8s -m <span class="built_in">command</span> -a <span class="string">&#x27;sh /export/upload/hosts_set.sh&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Deploy主机环境搭建"><a href="#Deploy主机环境搭建" class="headerlink" title="Deploy主机环境搭建"></a>Deploy主机环境搭建</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>deploy主机的docker主要用于harbor针对镜像的操作，包括镜像的打tag以及push，用于后期部署pod的时候直接通过harbor私有镜像库拉取。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在线安装</span></span><br><span class="line">yum -y install docker-ce-20.10.17</span><br><span class="line"><span class="comment"># 或者提前上传docker及其依赖rpm包，进行离线安装：yum -y ./*rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 查看Docker状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker </span><br></pre></td></tr></table></figure><h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h2><p>harbor私有镜像库的依赖docker-compose，deploy主机安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以打开下面网址，用PC下载docker-compose-linux-x86_64后，通过ftp上传到deploy服务器，目录需要有写权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -L https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o docker-compose</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动到/usr/local/bin/并添加执行权限</span></span><br><span class="line">mv docker-compose /usr/local/bin/</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker-compose的版本</span></span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h2 id="Harbor安装"><a href="#Harbor安装" class="headerlink" title="Harbor安装"></a>Harbor安装</h2><p>私有镜像仓库，deploy主机安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.4.3/harbor-offline-installer-v2.4.3.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并进行配置</span></span><br><span class="line">tar -xzvf harbor-offline-installer-v2.4.3.tgz -C /export/servers/</span><br><span class="line"><span class="built_in">cd</span> /export/servers/harbor</span><br><span class="line"><span class="built_in">mv</span> harbor.yml.tmpl harbor.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改配置文件harbor-yml"><a href="#修改配置文件harbor-yml" class="headerlink" title="修改配置文件harbor.yml"></a>修改配置文件harbor.yml</h3><p>执行配置文件修改<code>vim harbor.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改对应配置如下，注意配置文件为yml，修改需要符合yml语法</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.99</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">data_volume:</span> <span class="string">/export/data/harbor</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">/export/logs/harbor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.注释下面内容</span></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  <span class="comment">#port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  <span class="comment">#certificate: /your/certificate/path</span></span><br><span class="line">  <span class="comment">#private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.配置管理员密码</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">harbor950101</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="comment"># The password for the root user of Harbor DB. Change this before any production use.</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行命令使配置文件修改生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./prepare  <span class="comment"># 如果有二次修改harbor.yml文件，需执行该命令让配置文件生效</span></span><br><span class="line">./install.sh --<span class="built_in">help</span> <span class="comment"># 查看启动参数</span></span><br></pre></td></tr></table></figure><h3 id="导入Harbor镜像"><a href="#导入Harbor镜像" class="headerlink" title="导入Harbor镜像"></a>导入Harbor镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/servers/harbor</span><br><span class="line"><span class="comment"># harbor-offline-installer-v2.4.3.tgz解压后可以看到harbor.v2.4.3.tar.gz，用docker导入</span></span><br><span class="line">docker load -i harbor.v2.4.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">goharbor/harbor-exporter        v2.4.3    776ac6ee91f4   4 weeks ago   81.5MB</span><br><span class="line">goharbor/chartmuseum-photon     v2.4.3    f39a9694988d   4 weeks ago   172MB</span><br><span class="line">goharbor/redis-photon           v2.4.3    b168e9750dc8   4 weeks ago   154MB</span><br><span class="line">goharbor/trivy-adapter-photon   v2.4.3    a406a715461c   4 weeks ago   251MB</span><br><span class="line">goharbor/notary-server-photon   v2.4.3    da89404c7cf9   4 weeks ago   109MB</span><br><span class="line">goharbor/notary-signer-photon   v2.4.3    38468ac13836   4 weeks ago   107MB</span><br><span class="line">goharbor/harbor-registryctl     v2.4.3    61243a84642b   4 weeks ago   135MB</span><br><span class="line">goharbor/registry-photon        v2.4.3    9855479dd6fa   4 weeks ago   77.9MB</span><br><span class="line">goharbor/nginx-photon           v2.4.3    0165c71ef734   4 weeks ago   44.4MB</span><br><span class="line">goharbor/harbor-log             v2.4.3    57ceb170dac4   4 weeks ago   161MB</span><br><span class="line">goharbor/harbor-jobservice      v2.4.3    7fea87c4b884   4 weeks ago   219MB</span><br><span class="line">goharbor/harbor-core            v2.4.3    d864774a3b8f   4 weeks ago   197MB</span><br><span class="line">goharbor/harbor-portal          v2.4.3    85f00db66862   4 weeks ago   53.4MB</span><br><span class="line">goharbor/harbor-db              v2.4.3    7693d44a2ad6   4 weeks ago   225MB</span><br><span class="line">goharbor/prepare                v2.4.3    c882d74725ee   4 weeks ago   268MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果没有按照<code>编辑harbor.yml</code>章节注释，会遇到下面报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prepare base dir is set to /export/servers/harbor</span><br><span class="line">Error happened in config validation...</span><br><span class="line">ERROR:root:Error: The protocol is https but attribute ssl_cert is not set</span><br></pre></td></tr></table></figure><h3 id="启动Harbor"><a href="#启动Harbor" class="headerlink" title="启动Harbor"></a>启动Harbor</h3><p>如果配置文件harbor.yml有改动，需要执行<code>./prepare</code>使配置修改生效后再启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh --with-chartmuseum</span><br></pre></td></tr></table></figure><p>启动成功后，浏览器可以直接访问Harbor：<code>http://192.168.2.99:8090/</code>，根据harbor.yml配置的管理员帐号和密码登陆</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308030121841.png" alt=""></p><p><strong>配置对Harbor的HTTPS访问请参考：</strong><br><a href="https://blog.csdn.net/RtxTitanV/article/details/107140001">https://blog.csdn.net/RtxTitanV/article/details/107140001</a></p><h1 id="Kubernetes集群配置"><a href="#Kubernetes集群配置" class="headerlink" title="Kubernetes集群配置"></a>Kubernetes集群配置</h1><h2 id="Docker安装-1"><a href="#Docker安装-1" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>docker离线下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p><p>配置docker-ce.repo的镜像仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="comment"># 或者通过下面方式添加下面方式添加镜像仓库</span></span><br><span class="line"><span class="comment"># yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们要在所有K8s节点安装Docker，因此下载回来后离线安装更快捷。</p><p>yum命令只下载不安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install --downloadonly -downloaddir /export/upload docker-ce-20.10.17</span><br></pre></td></tr></table></figure><p>deploy主机执行下面的ansible命令，将打包好的压缩包分发给k8s集群机器，并执行解压、安装，启动docker等操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分发安装包</span></span><br><span class="line">ansible k8s -m copy -a <span class="string">&quot;src=/export/upload/docker-rpm.tar.gz dest=/export/upload/&quot;</span></span><br><span class="line"><span class="comment"># 解压并安装</span></span><br><span class="line">ansible k8s -m shell -a <span class="string">&quot;tar -xzvf /export/upload/docker-rpm.tar.gz -C /export/upload/ &amp;&amp; yum -y install /export/upload/docker-rpm/*&quot;</span></span><br><span class="line"><span class="comment"># 设置Docker开机自启，以及启动Docker</span></span><br><span class="line">ansible k8s -m shell -a <span class="string">&quot;systemctl enable docker &amp;&amp; systemctl start docker&quot;</span></span><br><span class="line"><span class="comment"># 查看Docker启动状态</span></span><br><span class="line">ansible k8s -m shell -a <span class="string">&quot;docker version&quot;</span></span><br></pre></td></tr></table></figure><p>所有k8s节点返回下面消息证明完成安装</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308030133314.png" alt=""></p><p><strong>附：常用压缩打包、解压缩命令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">tar –cvf xxx.tar &lt;file or <span class="built_in">dir</span>&gt;</span><br><span class="line"><span class="comment"># 打包并且压缩</span></span><br><span class="line">tar –zcvf docker-rpm.tar.gz &lt;file or <span class="built_in">dir</span>&gt;</span><br><span class="line"><span class="comment"># 解压缩到指定位置</span></span><br><span class="line">tar -xzvf docker-rpm.tar.gz  -C &lt;位置&gt;</span><br></pre></td></tr></table></figure><h2 id="Kubernetes安装"><a href="#Kubernetes安装" class="headerlink" title="Kubernetes安装"></a>Kubernetes安装</h2><p>deploy节点执行，所有k8s节点需要安装。</p><p>1、添加阿里云YUM的kubernetes软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、下载kubelet、kubeadm、kubectl组件但不安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet-1.22.4 kubeadm-1.22.4 kubectl-1.22.4 --downloadonly --downloaddir /export/download/kubeadm-rpm</span><br></pre></td></tr></table></figure><p>3、执行解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/download</span><br><span class="line">tar -zcvf kubeadm-rpm.tgz kubeadm-rpm</span><br></pre></td></tr></table></figure><p>4、分发到k8s集群所有节点并解压安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m copy -a <span class="string">&quot;src=/export/upload/kubeadm-rpm.tgz dest=/export/upload/&quot;</span></span><br><span class="line">ansible k8s -m shell -a <span class="string">&quot;tar xzvf /export/upload/kubeadm-rpm.tgz -C /export/upload/ &amp;&amp; yum -y install /export/upload/kubeadm-rpm/*&quot;</span></span><br></pre></td></tr></table></figure><p>5、启动kubelet并设置开机自启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m shell -a <span class="string">&quot;systemctl enable kubelet &amp;&amp; systemctl start kubelet&quot;</span></span><br></pre></td></tr></table></figure><p>注：此时kubelet启动失败，会进入不断重启，这个是正常现象，执行init或join后问题会自动解决，对此官网有如下描述，也就是此时不用理会kubelet.service，可执行发下命令查看kubelet状态。</p><p><code>journalctl -xefu kubelet</code>可以查看日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Jul 29 08:34:33 k8s-worker02 systemd[1]: Starting kubelet: The Kubernetes Node Agent...</span><br><span class="line">-- Subject: Unit kubelet.service has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit kubelet.service has begun starting up.</span><br><span class="line">Jul 29 08:34:33 k8s-worker02 kubelet[9377]: E0729 08:34:33.685622    9377 server.go:206] &quot;Failed to load kubelet config file&quot; err=&quot;failed to load Kubelet config file /var/lib/kubelet/config.yaml, error failed to read kubelet config file \&quot;/var/lib/kubelet/config.yaml\&quot;, error: open /var/lib/kubelet/config.yaml: no such file or directory&quot; path=&quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">Jul 29 08:34:33 k8s-worker02 systemd[1]: kubelet.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">Jul 29 08:34:33 k8s-worker02 systemd[1]: Unit kubelet.service entered failed state.</span><br><span class="line">Jul 29 08:34:33 k8s-worker02 systemd[1]: kubelet.service failed.</span><br><span class="line">Jul 29 08:34:43 k8s-worker02 systemd[1]: kubelet.service holdoff time over, scheduling restart.</span><br><span class="line">Jul 29 08:34:43 k8s-worker02 systemd[1]: Started kubelet: The Kubernetes Node Agent.</span><br></pre></td></tr></table></figure><h3 id="Deploy主机下载镜像"><a href="#Deploy主机下载镜像" class="headerlink" title="Deploy主机下载镜像"></a>Deploy主机下载镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker拉取镜像</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5</span><br><span class="line">docker pull rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span><br><span class="line">docker pull rancher/mirrored-flannelcni-flannel:v0.19.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出镜像到/export/upload/docker-images/位置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /export/upload/docker-images/</span><br><span class="line">docker save -o /export/upload/docker-images/rancher-mirrored-flannelcni-flannel-v0.19.1.tar rancher/mirrored-flannelcni-flannel </span><br><span class="line">docker save -o /export/upload/docker-images/rancher-mirrored-flannelcni-flannel-cni-plugin-v1.1.0.tar rancher/mirrored-flannelcni-flannel-cni-plugin </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-kube-apiserver-v1.22.4.tar registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-kube-controller-manager-v1.22.4.tar registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-kube-scheduler-v1.22.4.tar registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-kube-proxy-v1.22.4.tar registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-etcd-3.5.0-0.tar registry.cn-hangzhou.aliyuncs.com/google_containers/etcd </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-coredns-v1.8.4.tar registry.cn-hangzhou.aliyuncs.com/google_containers/coredns </span><br><span class="line">docker save -o /export/upload/docker-images/google_containers-pause-3.5.tar registry.cn-hangzhou.aliyuncs.com/google_containers/pause </span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker导入镜像</span></span><br><span class="line"><span class="built_in">cd</span> /export/upload/docker-images/</span><br><span class="line">docker load -i rancher-mirrored-flannelcni-flannel-v0.19.1.tar</span><br><span class="line">docker load -i rancher-mirrored-flannelcni-flannel-cni-plugin-v1.1.0.tar</span><br><span class="line">docker load -i google_containers-kube-apiserver-v1.22.4.tar</span><br><span class="line">docker load -i google_containers-kube-controller-manager-v1.22.4.tar</span><br><span class="line">docker load -i google_containers-kube-scheduler-v1.22.4.tar</span><br><span class="line">docker load -i google_containers-kube-proxy-v1.22.4.tar</span><br><span class="line">docker load -i google_containers-etcd-3.5.0-0.tar</span><br><span class="line">docker load -i google_containers-coredns-v1.8.4.tar</span><br><span class="line">docker load -i google_containers-pause-3.5.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像打harbor镜像库tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 192.168.2.99:8090/community/coredns:v1.8.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 192.168.2.99:8090/community/etcd:3.5.0-0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.4 192.168.2.99:8090/community/kube-apiserver:v1.22.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.4 192.168.2.99:8090/community/kube-controller-manager:v1.22.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.4 192.168.2.99:8090/community/kube-proxy:v1.22.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.4 192.168.2.99:8090/community/kube-scheduler:v1.22.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 192.168.2.99:8090/community/pause:3.5</span><br><span class="line">docker tag rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0 192.168.2.99:8090/community/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span><br><span class="line">docker tag rancher/mirrored-flannelcni-flannel:v0.19.1 192.168.2.99:8090/community/mirrored-flannelcni-flannel:v0.19.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送至harbor镜像库，后续可以通过docker pull从harbor中直接拉取</span></span><br><span class="line">docker push 192.168.2.99:8090/community/coredns:v1.8.4</span><br><span class="line">docker push 192.168.2.99:8090/community/etcd:3.5.0-0</span><br><span class="line">docker push 192.168.2.99:8090/community/kube-apiserver:v1.22.4</span><br><span class="line">docker push 192.168.2.99:8090/community/kube-controller-manager:v1.22.4</span><br><span class="line">docker push 192.168.2.99:8090/community/kube-proxy:v1.22.4</span><br><span class="line">docker push 192.168.2.99:8090/community/kube-scheduler:v1.22.4</span><br><span class="line">docker push 192.168.2.99:8090/community/pause:3.5</span><br><span class="line">docker push 192.168.2.99:8090/community/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span><br><span class="line">docker push 192.168.2.99:8090/community/mirrored-flannelcni-flannel:v0.19.1</span><br></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><p><strong>1、docker push推送过程中可能会报错，提示docker推送要求为https，而harbor服务端通信协议为http。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@tsukasa docker-images]# docker push 192.168.2.99:8090/community/mirrored-flannelcni-flannel:v0.19.1</span><br><span class="line">The push refers to repository [192.168.2.99:8090/community/mirrored-flannelcni-flannel]</span><br><span class="line">Get &quot;https://192.168.2.99:8090/v2/&quot;: http: server gave HTTP response to HTTPS client</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改docker的配置文件/etc/docker/daemon.json（文件不存在则新增），添加下面内容，下面IP端口为harbor的http配置：</p><p><code>vim /etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;192.168.2.99:8090&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重启docker服务、重新加载harbor镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br><span class="line"><span class="comment"># 重新加载harbor</span></span><br><span class="line">docker load -i harbor.v2.4.3.tar.gz</span><br><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line"><span class="built_in">cd</span> /export/servers/harbor</span><br><span class="line">./install.sh --with-chartmuseum</span><br></pre></td></tr></table></figure><p><strong>2、docker push推送过程中提示project community not found: project community not found</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tsukasa harbor]<span class="comment"># docker push 192.168.2.99:8090/community/coredns:v1.8.4</span></span><br><span class="line">The push refers to repository [192.168.2.99:8090/community/coredns]</span><br><span class="line">f72781b18181: Preparing</span><br><span class="line">225df95e717c: Preparing</span><br><span class="line">unauthorized: project community not found: project community not found</span><br></pre></td></tr></table></figure><p>解决办法是在harbor管理台创建项目</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307300117189.png" alt=""></p><p><strong>3、docker push进行推送时出现unauthorized: unauthorized to access repository</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tsukasa harbor]# docker push 192.168.2.99:8090/community/coredns:v1.8.4</span><br><span class="line">The push refers to repository [192.168.2.99:8090/community/coredns]</span><br><span class="line">f72781b18181: Preparing</span><br><span class="line">225df95e717c: Preparing</span><br><span class="line">unauthorized: unauthorized to access repository: community/coredns, action: push: unauthorized to access repository: community/coredns, action: push</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决办法是在需要推送镜像的主机上（这里是deploy）登陆harbor：<code>docker login 192.168.2.99:8090</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tsukasa harbor]<span class="comment"># docker login 192.168.2.99:8090</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Master节点"><a href="#Master节点" class="headerlink" title="Master节点"></a>Master节点</h3><p>通常地，k8s集群Master节点有多个，本地因资源问题，只创建了一台master。</p><h4 id="部署首个Master"><a href="#部署首个Master" class="headerlink" title="部署首个Master"></a>部署首个Master</h4><p>1、在docker配置文件/etc/docker/daemon.json中添加下面内容，重启docker</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>3、在k8s-master(ip:192.168.2.100)执行初始化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果初始化失败，先强制重置kubeadm再初始化：kubeadm reset -f</span></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--control-plane-endpoint <span class="string">&quot;192.168.2.100:6443&quot;</span> \</span><br><span class="line">--image-repository 192.168.2.99:8090/community \</span><br><span class="line">--kubernetes-version v1.22.4 \</span><br><span class="line">--service-cidr=172.16.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--token <span class="string">&quot;abcdef.0123456789abcdef&quot;</span> \</span><br><span class="line">--token-ttl <span class="string">&quot;0&quot;</span> \</span><br><span class="line">--upload-certs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>--image-repository</code>参数是镜像仓库，目前设置为搭建的harbor，也可以使用阿里云<code>registry.aliyuncs.com/google_containers</code></p><p>执行后的控台输出如下，进行其他Master和Worker节点初始化需要用到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm init \</span><br><span class="line">&gt; --control-plane-endpoint &quot;192.168.2.100:6443&quot; \</span><br><span class="line">&gt; --image-repository 192.168.2.99:8090/community \</span><br><span class="line">&gt; --kubernetes-version v1.22.4 \</span><br><span class="line">&gt; --service-cidr=172.16.0.0/16 \</span><br><span class="line">&gt; --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">&gt; --token &quot;abcdef.0123456789abcdef&quot; \</span><br><span class="line">&gt; --token-ttl &quot;0&quot; \</span><br><span class="line">&gt; --upload-certs</span><br><span class="line">[init] Using Kubernetes version: v1.22.4</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not function correctly</span><br><span class="line">        [WARNING Hostname]: hostname &quot;k8s-master&quot; could not be reached</span><br><span class="line">        [WARNING Hostname]: hostname &quot;k8s-master&quot;: lookup k8s-master on 223.5.5.5:53: no such host</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [172.16.0.1 192.168.2.100]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.2.100 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.2.100 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 7.005575 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.22&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">7ed3ef5d6b04a668e7bed67e419fd9f69ce482047350e5b391357005064db994</span><br><span class="line">[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="line">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: abcdef.0123456789abcdef</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of the control-plane node running the following command on each as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.2.100:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:fdfca7204c17842d264752cc0cf9efcf4da515837f5deb7f69cc3ec3f3fe00c6 \</span><br><span class="line">        --control-plane --certificate-key 7ed3ef5d6b04a668e7bed67e419fd9f69ce482047350e5b391357005064db994</span><br><span class="line"></span><br><span class="line">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span><br><span class="line">As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use</span><br><span class="line">&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.2.100:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:fdfca7204c17842d264752cc0cf9efcf4da515837f5deb7f69cc3ec3f3fe00c6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果控制台信息被清理，可以在通过下面的命令查看token</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看token列表</span></span><br><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><p>如果token过期，可以重新创建再查看token</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><p>4、生成kubelet环境配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h4 id="配置网络插件flannel"><a href="#配置网络插件flannel" class="headerlink" title="配置网络插件flannel"></a>配置网络插件flannel</h4><p>Kubernetes跨主机容器之间的通信组件，目前主流的是flannel和calico，这里选择flannel。<br>如果使用<code>kubectl get nodes</code>查看节点状态，Worker节点显示<code>NotReady</code>，是因为缺少网络插件导致的。</p><p>（1）创建/export/servers/kubernetes/flannel.yml配置文件，内容参考附录。</p><p>在执行下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用flannel配置文件</span></span><br><span class="line">kubectl apply -f /export/servers/kubernetes/flannel.yml</span><br></pre></td></tr></table></figure><p>如果配置文件有改动需要重新加载，可以执行下面命令进行撤销</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f /export/servers/kubernetes/flannel.yml</span><br></pre></td></tr></table></figure><h4 id="其他Master"><a href="#其他Master" class="headerlink" title="其他Master"></a>其他Master</h4><p>复制首个Master节点kubeadm初始化后的master节点加入命令，到其他Master节点执行即可。也可以用deploy主机使用ansible命令批量执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.2.100:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">      --discovery-token-ca-cert-hash sha256:fdfca7204c17842d264752cc0cf9efcf4da515837f5deb7f69cc3ec3f3fe00c6 \</span><br><span class="line">      --control-plane --certificate-key 7ed3ef5d6b04a668e7bed67e419fd9f69ce482047350e5b391357005064db994</span><br></pre></td></tr></table></figure><h3 id="Worker节点"><a href="#Worker节点" class="headerlink" title="Worker节点"></a>Worker节点</h3><p>复制首个Master节点kubeadm初始化后的Worker节点加入命令，到所有Worker节点分别执行。也可以用deploy主机使用ansible命令批量执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.2.100:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:fdfca7204c17842d264752cc0cf9efcf4da515837f5deb7f69cc3ec3f3fe00c6</span><br></pre></td></tr></table></figure><p>ansible命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible worker -m shell -a <span class="string">&quot;kubeadm join 192.168.2.100:6443 --token abcdef.0123456789abcdef \</span></span><br><span class="line"><span class="string">        --discovery-token-ca-cert-hash sha256:fdfca7204c17842d264752cc0cf9efcf4da515837f5deb7f69cc3ec3f3fe00c6&quot;</span></span><br></pre></td></tr></table></figure><p>查看所有pod状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308030235232.png" alt=""></p><p>至此，Kubernetes集群已经建立！</p><h3 id="可能遇到的问题-1"><a href="#可能遇到的问题-1" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><h4 id="1-Pod状态显示ImagePullBackoff"><a href="#1-Pod状态显示ImagePullBackoff" class="headerlink" title="1.Pod状态显示ImagePullBackoff"></a>1.Pod状态显示ImagePullBackoff</h4><p>需要手动拉取镜像，等待k8s重试成功后即可解决</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/mirrored-flannelcni-flannel:v0.19.1</span><br></pre></td></tr></table></figure><h4 id="常用的定位命令"><a href="#常用的定位命令" class="headerlink" title="常用的定位命令"></a>常用的定位命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命名空间kube-system详细的pod状态</span></span><br><span class="line">kubectl get pod -n kube-system -o wide</span><br><span class="line"><span class="comment"># 查看pod的日志</span></span><br><span class="line">kubectl describe pod &lt;Pod名称&gt; -n &lt;命名空间&gt;</span><br><span class="line"><span class="comment"># 查看pod的详细日志，可以查看到代码报错的堆栈</span></span><br><span class="line">kubectl logs -f kubernetes-dashboard-658b66597c-jcw4s -n kubernetes-dashboard </span><br></pre></td></tr></table></figure><h3 id="Kubernetes常用命令"><a href="#Kubernetes常用命令" class="headerlink" title="Kubernetes常用命令"></a>Kubernetes常用命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all <span class="comment">#查看所有启动的配置，包括容器，服务，监视等等等等 --all-namespaces 参数 可以看到所有命名空间的 -o wide 可以看到更多的信息，如容器启动在哪台机器上</span></span><br><span class="line">kubectl get pods -o wide <span class="comment">#查看pod</span></span><br><span class="line">kubectl get pod name --output json <span class="comment">#以JSON格式输出POD信息:</span></span><br><span class="line">kubectl get pod name --output yaml <span class="comment">#以yaml格式输出POD信息</span></span><br><span class="line">kubectl get svc  <span class="comment">#查询所有实例的对外端口</span></span><br><span class="line">kubectl describe pod xxx-mariadb-0   <span class="comment">#查看pod的详情</span></span><br><span class="line">kubectl get nodes <span class="comment">#查看node节点</span></span><br><span class="line">kubectl get rc,namespace <span class="comment">#查看rc ,namespace</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti xxx-jw64d sh    <span class="comment">#登陆到某个模块实例查日志或配置</span></span><br><span class="line">kubectl cluster-info     <span class="comment">#查看集群状态</span></span><br><span class="line">kubectl get deployments <span class="comment">#查询Deployment当前状态</span></span><br><span class="line">NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3         3         3            3           2h</span><br><span class="line">其中DESIRED为期望的Pod数量，CURRENT为当前的数量，UP-TO-DATE为已更新的数量，AVAILABLE为已运行的数量</span><br><span class="line">kubectl get rs <span class="comment">#Replica Set（RS）是k8s新一代的Pod controller</span></span><br><span class="line">kubectl get cs <span class="comment">#检查组件状态是否都正常 component status （CS）</span></span><br><span class="line">kubectl get pods --show-labels</span><br><span class="line">kubectl describe deployments</span><br><span class="line">kubectl get pvc <span class="comment">#获取 StatefulSet 的 PersistentVolumeClaims</span></span><br><span class="line">kubectl <span class="built_in">exec</span> nginx -- <span class="built_in">printenv</span> | grep SERVICE <span class="comment">#检查正在运行的 Nginx Pod 的环境变量</span></span><br><span class="line">kubectl get services kube-dns --namespace=kube-system <span class="comment">#检查 DNS 插件 Service</span></span><br><span class="line">kubectl get pods -o yaml | grep -i podip</span><br><span class="line">kubectl <span class="built_in">exec</span> xxx-2xd57 <span class="built_in">date</span>      <span class="comment">#对pod中的容器执行命令</span></span><br><span class="line"> </span><br><span class="line">kubectl delete pod name <span class="comment">#删除某个POD</span></span><br><span class="line">kubectl delete deployment kubernetes-dashboard --namespace=kubernetes-dashboard <span class="comment">#删除</span></span><br><span class="line">kubectl delete secrets xxx-secrets   <span class="comment">#或者在页面删除</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="网络插件flannel的配置文件"><a href="#网络插件flannel的配置文件" class="headerlink" title="网络插件flannel的配置文件"></a>网络插件flannel的配置文件</h2><p><code>/export/servers/kubernetes/flannel.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">pod-security.kubernetes.io/enforce:</span> <span class="string">privileged</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni-plugin</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/cni/bin/flannel</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni-plugin</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/cni/bin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel:v0.19.1</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel:v0.19.1</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span> [<span class="string">&quot;NET_ADMIN&quot;</span>, <span class="string">&quot;NET_RAW&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">EVENT_QUEUE_DEPTH</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;5000&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtables-lock</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/xtables.lock</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni-plugin</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/opt/cni/bin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtables-lock</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/xtables.lock</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">FileOrCreate</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://juejin.cn/post/7161621568747995166">IoT运维 - 如何部署一套高可用K8S集群</a><br><a href="https://juejin.cn/post/7179072854397288509">手把手教你一套完善且高效的k8s离线部署方案</a><br><a href="https://github.com/flannel-io/flannel">Flannel-io Github repo</a><br><a href="https://github.com/easzlab/kubeasz">快速部署高可用k8s集群的工具kubeasz</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Harbor </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s集群搭建系列（二）：搭建ETCD多节点单实例集群</title>
      <link href="/2023/08/02/Create-etcd-cluster-in-linux-system/"/>
      <url>/2023/08/02/Create-etcd-cluster-in-linux-system/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>ETCD是一个分布式键值存储组件，可以用于服务注册与发现。这篇文章主要记录下ETCD多节点单实例集群的搭建。etcd是服务端，etcdctl是客户端命令行。</p><h1 id="系统资源"><a href="#系统资源" class="headerlink" title="系统资源"></a>系统资源</h1><table><thead><tr><th style="text-align:left">IP</th><th style="text-align:left">角色</th><th style="text-align:left">主机名</th><th style="text-align:left">组件</th><th style="text-align:left">配置</th></tr></thead><tbody><tr><td style="text-align:left">192.168.2.183</td><td style="text-align:left">Windows10，个人PC</td><td style="text-align:left">Tsukasa</td><td style="text-align:left">VMWare</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">deploy</td><td style="text-align:left">tsukasa</td><td style="text-align:left">ansible, docker, harbor</td><td style="text-align:left">4Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-master</td><td style="text-align:left">kubectl, kubelet, kubeadm, flnanel</td><td style="text-align:left">2Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.101</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker01</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.102</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker02</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.103</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd01</td><td style="text-align:left">etcd</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.104</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd02</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.105</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd03(leader)</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.106</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql01</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr><tr><td style="text-align:left">192.168.2.107</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql02</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr></tbody></table><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>默认已经完成SSH免密登陆、时间同步等基础配置，如果未完成需要参考同系列之前的文章配置。</p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>deploy主机执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible etcd -m shell -a <span class="string">&quot;systemctl stop firewalld &amp;&amp; systemctl disable firewalld&quot;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/g&#x27; /etc/selinux/config&quot;</span></span><br></pre></td></tr></table></figure><h1 id="生成证书信息"><a href="#生成证书信息" class="headerlink" title="生成证书信息"></a>生成证书信息</h1><p>deploy主机执行，后续通过ansible命令将生成好的证书信息发送到etcd节点。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/bin/cfssl</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/bin/cfssljson</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/bin/cfssl-certinfo </span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/cfssl*</span><br></pre></td></tr></table></figure><h2 id="创建CA配置文件"><a href="#创建CA配置文件" class="headerlink" title="创建CA配置文件"></a>创建CA配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/ssl</span><br><span class="line"><span class="built_in">cd</span> /root/ssl</span><br><span class="line"><span class="built_in">cat</span> &gt;ca-config.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;signing&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;default&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;expiry&quot;: &quot;876000h&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;profiles&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;etcd&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;usages&quot;: [</span></span><br><span class="line"><span class="string">            &quot;signing&quot;,</span></span><br><span class="line"><span class="string">            &quot;key encipherment&quot;,</span></span><br><span class="line"><span class="string">            &quot;server auth&quot;,</span></span><br><span class="line"><span class="string">            &quot;client auth&quot;</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        &quot;expiry&quot;: &quot;876000h&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="创建CA证书签名请求"><a href="#创建CA证书签名请求" class="headerlink" title="创建CA证书签名请求"></a>创建CA证书签名请求</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;ca-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">      &quot;ST&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">      &quot;L&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;jdt&quot;,</span></span><br><span class="line"><span class="string">      &quot;OU&quot;: &quot;iot&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure><h2 id="创建etcd的TLS认证证书"><a href="#创建etcd的TLS认证证书" class="headerlink" title="创建etcd的TLS认证证书"></a>创建etcd的TLS认证证书</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; etcd-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class="line"><span class="string">  &quot;hosts&quot;: [</span></span><br><span class="line"><span class="string">    &quot;192.168.2.103&quot;, </span></span><br><span class="line"><span class="string">    &quot;192.168.2.104&quot;, </span></span><br><span class="line"><span class="string">    &quot;192.168.2.105&quot;,</span></span><br><span class="line"><span class="string">    &quot;192.168.2.100&quot;,</span></span><br><span class="line"><span class="string">    &quot;etcd01&quot;,</span></span><br><span class="line"><span class="string">    &quot;etcd02&quot;,</span></span><br><span class="line"><span class="string">    &quot;etcd03&quot;,</span></span><br><span class="line"><span class="string">    &quot;master&quot;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">      &quot;ST&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">      &quot;L&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;jdt&quot;,</span></span><br><span class="line"><span class="string">      &quot;OU&quot;: &quot;iot&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="生成并分发etcd证书和私钥"><a href="#生成并分发etcd证书和私钥" class="headerlink" title="生成并分发etcd证书和私钥"></a>生成并分发etcd证书和私钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">ansible  etcd -m copy -a <span class="string">&quot;src=/root/ssl/ dest=/export/Data/certs/&quot;</span></span><br></pre></td></tr></table></figure><h1 id="ETCD安装和配置"><a href="#ETCD安装和配置" class="headerlink" title="ETCD安装和配置"></a>ETCD安装和配置</h1><p>上面已经把etcd的证书和私钥分发到了各个etcd节点，下面进行etcd的安装和配置。</p><h2 id="下载并分发etcd"><a href="#下载并分发etcd" class="headerlink" title="下载并分发etcd"></a>下载并分发etcd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建etcd数据目录</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;mkdir -p /export/Data/etcd_data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果下载速度很慢，可以通过用windows主机下载再上传至deploy主机</span></span><br><span class="line">wget https://github.com/etcd-io/etcd/releases/download/v3.5.1/etcd-v3.5.1-linux-amd64.tar.gz</span><br><span class="line">tar xf etcd-v3.5.1-linux-amd64.tar.gz  &amp;&amp; <span class="built_in">cd</span> etcd-v3.5.1-linux-amd64</span><br><span class="line">ansible etcd -m copy -a <span class="string">&quot;src=etcd  dest=/usr/bin/&quot;</span></span><br><span class="line">ansible etcd -m copy -a <span class="string">&quot;src=etcdutl  dest=/usr/bin/&quot;</span></span><br><span class="line">ansible etcd -m copy -a <span class="string">&quot;src=etcdctl  dest=/usr/bin/&quot;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;chmod +x /usr/bin/etcd*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置etcd"><a href="#配置etcd" class="headerlink" title="配置etcd"></a>配置etcd</h2><p>创建etcd配置文件：<code>/export/upload/etcd_config.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PEER_NAME指定本节点的主机名称/域名，</span></span><br><span class="line"><span class="comment">#PRIVATE_IP指定本节点的IP(用于后面配置文件的生成)</span></span><br><span class="line"><span class="comment">#ETCD_CLUSTER群集列表，是所有节点信息（内容格式: 各节点名称=https://ip:端口  名称任意但要有标识性）</span></span><br><span class="line"><span class="comment">#ETCD_INITIAL_CLUSTER_TOKEN为该etcd集群Token,同一集群token一致</span></span><br><span class="line">interface_name=`<span class="built_in">cat</span> /proc/net/dev | sed -n <span class="string">&#x27;3,$p&#x27;</span> | awk -F <span class="string">&#x27;:&#x27;</span> &#123;<span class="string">&#x27;print $1&#x27;</span>&#125; | grep  -E <span class="string">&quot;^ &quot;</span> | grep -v lo | <span class="built_in">head</span> -n1`</span><br><span class="line">ipaddr=`ip a | grep <span class="variable">$interface_name</span>  | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class="string">&quot;/&quot;</span>  <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">export</span> PEER_NAME=`hostname`</span><br><span class="line"><span class="built_in">export</span> PRIVATE_IP=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\r&#x27;</span>`</span><br><span class="line"><span class="built_in">export</span> ETCD_CLUSTER=<span class="string">&quot;etcd01=https://192.168.2.103:2380,etcd02=https://192.168.2.104:2380,etcd03=https://192.168.2.105:2380&quot;</span></span><br><span class="line"><span class="built_in">export</span> ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster-1&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/etcd.service  &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=etcd</span></span><br><span class="line"><span class="string">Documentation=https://github.com/coreos/etcd</span></span><br><span class="line"><span class="string">Conflicts=etcd.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=5s</span></span><br><span class="line"><span class="string">LimitNOFILE=65536</span></span><br><span class="line"><span class="string">TimeoutStartSec=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/etcd --name $&#123;PEER_NAME&#125; \</span></span><br><span class="line"><span class="string">    --data-dir /export/Data/etcd_data\</span></span><br><span class="line"><span class="string">    --listen-client-urls https://$&#123;PRIVATE_IP&#125;:2379 \</span></span><br><span class="line"><span class="string">    --advertise-client-urls https://$&#123;PRIVATE_IP&#125;:2379 \</span></span><br><span class="line"><span class="string">    --listen-peer-urls https://$&#123;PRIVATE_IP&#125;:2380 \</span></span><br><span class="line"><span class="string">    --initial-advertise-peer-urls https://$&#123;PRIVATE_IP&#125;:2380 \</span></span><br><span class="line"><span class="string">    --cert-file=/export/Data/certs/etcd.pem \</span></span><br><span class="line"><span class="string">    --key-file=/export/Data/certs/etcd-key.pem \</span></span><br><span class="line"><span class="string">    --client-cert-auth \</span></span><br><span class="line"><span class="string">    --trusted-ca-file=/export/Data/certs/ca.pem \</span></span><br><span class="line"><span class="string">    --peer-cert-file=/export/Data/certs/etcd.pem \</span></span><br><span class="line"><span class="string">    --peer-key-file=/export/Data/certs/etcd-key.pem \</span></span><br><span class="line"><span class="string">    --peer-client-cert-auth \</span></span><br><span class="line"><span class="string">    --peer-trusted-ca-file=/export/Data/certs/ca.pem \</span></span><br><span class="line"><span class="string">    --initial-cluster $&#123;ETCD_CLUSTER&#125; \</span></span><br><span class="line"><span class="string">    --initial-cluster-token etcd-cluster-1 \</span></span><br><span class="line"><span class="string">    --initial-cluster-state new</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>分发etcd配置文件到各个etcd节点。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分发etcd_config.sh配置脚本到etcd节点</span></span><br><span class="line">ansible etcd -m copy -a <span class="string">&quot;src=/export/upload/etcd_config.sh dest=/root/etcd_config.sh&quot;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;chmod u+x,g+x /root/etcd_config.sh&quot;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;sh /root/etcd_config.sh&quot;</span></span><br><span class="line"><span class="comment"># 重启etcd服务</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;systemctl daemon-reload&quot;</span></span><br><span class="line">ansible etcd -m service -a <span class="string">&#x27;name=etcd  state=started&#x27;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;systemctl enable etcd&quot;</span> </span><br></pre></td></tr></table></figure><h2 id="etcd健康检查"><a href="#etcd健康检查" class="headerlink" title="etcd健康检查"></a>etcd健康检查</h2><p>创建etcd的健康检查脚本：<code>/export/upload/check_etcd.sh</code>，用于在各个etcd节点快速检查etcd集群健康状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">HOST1=192.168.2.103</span><br><span class="line">HOST2=192.168.2.104</span><br><span class="line">HOST3=192.168.2.105</span><br><span class="line">ENDPOINTS=<span class="variable">$HOST1</span>:2379,<span class="variable">$HOST2</span>:2379,<span class="variable">$HOST3</span>:2379</span><br><span class="line"><span class="comment">#因为开启了证书验证，因此执行命令需加上证书</span></span><br><span class="line">KEY=<span class="string">&quot;--cacert=/export/Data/certs/ca.pem \</span></span><br><span class="line"><span class="string">--cert=/export/Data/certs/etcd.pem \</span></span><br><span class="line"><span class="string">--key=/export/Data/certs/etcd-key.pem&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#etcd集群健康信息</span></span><br><span class="line">etcdctl --endpoints=<span class="variable">$ENDPOINTS</span> <span class="variable">$KEY</span> endpoint health</span><br><span class="line"></span><br><span class="line"><span class="comment">#etcd集群状态信息</span></span><br><span class="line">etcdctl --endpoints=<span class="variable">$ENDPOINTS</span> <span class="variable">$KEY</span> --write-out=table endpoint status</span><br><span class="line"></span><br><span class="line"><span class="comment">#etcd集群成员信息</span></span><br><span class="line">etcdctl --endpoints=<span class="variable">$ENDPOINTS</span> <span class="variable">$KEY</span> member list -w table</span><br><span class="line"></span><br><span class="line">etcdctl --endpoints 192.168.2.103:2379,192.168.2.104:2379,192.168.2.105:2379 --cacert=/export/Data/certs/ca.pem --cert=/export/Data/certs/etcd.pem --key=/export/Data/certs/etcd-key.pem endpoint health</span><br></pre></td></tr></table></figure><p>分发到各个etcd节点：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x,g+x check_etcd.sh</span><br><span class="line"></span><br><span class="line">ansible etcd -m copy -a <span class="string">&quot;src=/export/upload/check_etcd.sh dest=/root/check_etcd.sh&quot;</span></span><br><span class="line">ansible etcd -m shell -a <span class="string">&quot;chmod u+x,g+x /root/check_etcd.sh&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ETCDCTL_API=3 etcdctl --cacert=/export/Data/certs/ca.pem --cert=/export/Data/certs/etcd.pem --key=/export/Data/certs/etcd-key.pem --endpoints=<span class="string">&quot;https://192.168.2.103:2379,https://192.168.2.104:2379,https://192.168.2.105:2379&quot;</span> endpoint health --write-out=table</span><br><span class="line"></span><br><span class="line">etcdctl --cacert=/export/Data/certs/ca.pem --cert=/export/Data/certs/etcd.pem --key=/export/Data/certs/etcd-key.pem --endpoints=<span class="string">&quot;https://192.168.2.103:2379,https://192.168.2.104:2379,https://192.168.2.105:2379&quot;</span> endpoint health --write-out=table</span><br></pre></td></tr></table></figure><p>执行etcd健康检查脚本，即可查询到etcd集群状态。下图显示etcd集群健康检查正常。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307310147910.png" alt=""></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/etcd-io/etcd">etcd github repo</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s集群搭建系列（一）：Windows下使用VMWare搭建linux集群和基础配置</title>
      <link href="/2023/07/27/Create-Virtual-Machine-for-linux-cluster/"/>
      <url>/2023/07/27/Create-Virtual-Machine-for-linux-cluster/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>Windows可以使用VMWare搭建linux集群，用于日常学习、工作开发测试。自身电脑配置较好的情况下，可以节省购买云服务器的开销。</p><h1 id="系统资源"><a href="#系统资源" class="headerlink" title="系统资源"></a>系统资源</h1><p>下面是我根据集群最少节点要求，自身电脑配置来规划的集群信息。</p><p>kubernetes集群：最少3台，1 master，2 worker<br>etcd集群：最少3台，1 master, 2 node<br>mysql主从同步集群：最少2台，1 master，1 slave</p><table><thead><tr><th style="text-align:left">IP</th><th style="text-align:left">角色</th><th style="text-align:left">主机名</th><th style="text-align:left">组件</th><th style="text-align:left">配置</th></tr></thead><tbody><tr><td style="text-align:left">192.168.2.183</td><td style="text-align:left">Windows10，个人PC</td><td style="text-align:left">Tsukasa</td><td style="text-align:left">VMWare</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">deploy</td><td style="text-align:left">tsukasa</td><td style="text-align:left">ansible, docker, harbor</td><td style="text-align:left">4Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.100</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-master</td><td style="text-align:left">kubectl, kubelet, kubeadm, flnanel</td><td style="text-align:left">2Cx2Gx20G</td></tr><tr><td style="text-align:left">192.168.2.101</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker01</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.102</td><td style="text-align:left">kubernetes</td><td style="text-align:left">k8s-worker02</td><td style="text-align:left">kubectl</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.103</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd01</td><td style="text-align:left">etcd</td><td style="text-align:left">2Cx1Gx20G</td></tr><tr><td style="text-align:left">192.168.2.104</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd02</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.105</td><td style="text-align:left">etcd</td><td style="text-align:left">etcd03(leader)</td><td style="text-align:left">etcd</td><td style="text-align:left">1Cx1Gx10G</td></tr><tr><td style="text-align:left">192.168.2.106</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql01</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr><tr><td style="text-align:left">192.168.2.107</td><td style="text-align:left">mysql</td><td style="text-align:left">mysql02</td><td style="text-align:left">mysql</td><td style="text-align:left">2Cx1Gx15G</td></tr></tbody></table><p>System：Centos 7，64位<br>User：root/tsukasa</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[tsukasa@tsukasa ~]$ cat /proc/version</span><br><span class="line">Linux version 3.10.0-693.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC) ) #1 SMP Tue Aug 22 21:09:27 UTC 2017</span><br></pre></td></tr></table></figure><h1 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h1><p>网络上创建虚拟主机的教程很多，为了方便，网络设置通过桥接模式上网，下面上面一章节的系统资源创建主机。</p><p>k8s-master主机配置示例：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307272252370.png" alt=""></p><p>安装过程中，可以在下面图形化界面进行网络配置，也可以参照下一章节进行网络配置。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307291540000.png" alt=""></p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>通过桥接模式上网，下面配置在所有节点执行。</p><h2 id="1、修改hostname"><a href="#1、修改hostname" class="headerlink" title="1、修改hostname"></a>1、修改hostname</h2><p>如果前期设置hostname不符合预期，可以执行下面命令，或者修改<code>/etc/hostname</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br></pre></td></tr></table></figure><h2 id="2、修改虚拟网卡置"><a href="#2、修改虚拟网卡置" class="headerlink" title="2、修改虚拟网卡置"></a>2、修改虚拟网卡置</h2><p>（1）执行命令<code>ifconfig</code>，查看虚拟网卡位<code>ens33</code>，修改网卡配置命令：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=a4214b82-9e0e-4c27-b499-9890e5068306</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPV6_PRIVACY=no</span><br><span class="line">IPADDR=192.168.2.100</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.2.1</span><br><span class="line">DNS1=223.5.5.5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重要参数</p><ul><li><strong>BOOTPROTO</strong>：默认是dhcp，动态分配ip地址，这里指定为static，后续ip则不会改变</li><li><strong>NAME, DEVICE</strong>: 与<code>ifconfig</code>命令中看到的网卡名称保持一致</li><li><strong>ONBOOT</strong>：yes表示开机自启</li><li><strong>IPADDR, NETMASK, GATEWAY, DNS1</strong>：根据自己的网络配置进行配置即可宿主机器（Windows）查询<code>ipconfig</code>，查到网关为192.168.2.1，子网掩码为255.255.255.0，个人PC地址为192.168.2.183。这里我们手动给k8s-master主机分配IP为192.168.2.100，不与当前局域网下其他ip冲突即可。DNS服务器选择阿里云的公共免费DNS -&gt; 223.5.5.5或者223.6.6.6</li></ul><p>（2）修改完成后，重启网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果配置成功</p><ul><li>执行<code>ping baidu.com</code>可以正常联网。</li><li>局域网主机之间可以互相ping通，个人PC可以通过<code>ping 192.168.2.100</code></li></ul><h1 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h1><p>按照系统资源创建好所有主机并完成网络配置后，可以配置下deploy跳板机SSH免密登陆集群中的其他机器，方便后续通过ansible进行批量操作。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>SSH通过RSA非对称密钥算法实现身份验证，客户端A把公钥发给服务端B，服务端用客户端的公钥加密一段随机字符串返回给客户端，客户端用私钥解密再次发给服务端，服务端验证通过，在<code>~/.ssh/authorized_keys</code>中追加客户端公钥后，后续可以免密登陆。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="服务端配置允许公钥授权登陆"><a href="#服务端配置允许公钥授权登陆" class="headerlink" title="服务端配置允许公钥授权登陆"></a>服务端配置允许公钥授权登陆</h3><p>所有主机需要修改下面配置，允许公钥授权登陆。</p><p><code>vi /etc/ssh/sshd_config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>重启sshd服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h3 id="客户端生成RSA公私钥对"><a href="#客户端生成RSA公私钥对" class="headerlink" title="客户端生成RSA公私钥对"></a>客户端生成RSA公私钥对</h3><p>客户端切换到需要免密登陆的用户，执行下面命令生成RSA公私钥对，系统自动生成~/.ssh目录和公私钥。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在deploy主机下执行</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">[root@tsukasa ~]<span class="comment"># ll ~/.ssh</span></span><br><span class="line">total 12</span><br><span class="line">-rw-------. 1 root root 1675 Jul 29 01:26 id_rsa</span><br><span class="line">-rw-r--r--. 1 root root  394 Jul 29 01:26 id_rsa.pub</span><br><span class="line">-rw-r--r--. 1 root root 1400 Jul 29 01:30 known_hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h3><p><strong>方法一：ssh-copy-id（推荐）</strong></p><p>单台服务器配置免密登陆，后续可以通过ssh user@host直接登陆。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub user@host</span><br></pre></td></tr></table></figure><p>通常linux集群中会根据业务分配一个业务用户，后续跳板机可以通过<code>ssh &lt;ip&gt;</code>更简洁的方式登陆。我所有主机的业务用户都为tsukasa</p><p>因为集群中的机器很多，可以通过循环的方式，批量授权。具体步骤：<br>确认所有服务器设置好允许通过公钥授权登陆后，登陆到deploy主机，切换到想要免密登陆的用户如tsukasa，执行下列命令完成批量授权。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for xIp in 192.168.2.&#123;100..107&#125;; do  ssh-copy-id  -i ~/.ssh/id_rsa.pub $xIp; done</span><br></pre></td></tr></table></figure><p><strong>方法二：手动在服务端的authorized_keys文件追加客户端公钥</strong></p><p>这种方法需要在每一台服务器上执行，追加完成后，在deploy主机中分别验证：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v user@host</span><br></pre></td></tr></table></figure><h3 id="MobaXterm或shell客户端分组维护服务器信息"><a href="#MobaXterm或shell客户端分组维护服务器信息" class="headerlink" title="MobaXterm或shell客户端分组维护服务器信息"></a>MobaXterm或shell客户端分组维护服务器信息</h3><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202308021818041.png" alt=""></p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="ssh目录和authorized-keys文件的权限问题"><a href="#ssh目录和authorized-keys文件的权限问题" class="headerlink" title="~/.ssh目录和authorized_keys文件的权限问题"></a>~/.ssh目录和authorized_keys文件的权限问题</h3><p>Linux出于安全的考虑，~/.ssh目录目录权限和authorized_keys文件权限不能过大，手动创建场景要修改访问权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="SSH服务端可能配置了不允许root用户登录"><a href="#SSH服务端可能配置了不允许root用户登录" class="headerlink" title="SSH服务端可能配置了不允许root用户登录"></a>SSH服务端可能配置了不允许root用户登录</h3><p>修改<code>/etc/ssh/sshd_config</code>，将<code>PermitRootLogin no</code>改为<code>PermitRootLogin yes</code></p><h3 id="Linux创建用户设置密码提示：BAD-PASSWORD-The-password-is-shorter-than-8-characters"><a href="#Linux创建用户设置密码提示：BAD-PASSWORD-The-password-is-shorter-than-8-characters" class="headerlink" title="Linux创建用户设置密码提示：BAD PASSWORD: The password is shorter than 8 characters"></a>Linux创建用户设置密码提示：BAD PASSWORD: The password is shorter than 8 characters</h3><p>linux在系统初始化的时候可以强制创建密码少于8个字符的用户，初始化成功通过命令行终端创建会失败，提示BAD PASSWORD: The password is shorter than 8 characters</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd tsukasa</span><br><span class="line">useradd tsukasa -g tsukasa</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><p>通常地，在生产环境我们不应该设置过于简单的密码，因为是个人开发环境，没有必要设置那么复杂。此时，可以这样进行密码设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 密码 |passwd --stdin 用户名</span><br></pre></td></tr></table></figure><h2 id="ansible工具"><a href="#ansible工具" class="headerlink" title="ansible工具"></a>ansible工具</h2><p>为了后续操作在各个服务器主机批量执行，减少重复工作，选择基于SSH协议传输数据的ansible工具。</p><p>因为所有操作在跳板机进行，ansible在deploy主机安装即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.9.27-1.el7.ans.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@tsukasa ~]<span class="comment"># ansible --version</span></span><br><span class="line">ansible 2.9.27</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, u<span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]</span><br></pre></td></tr></table></figure><h3 id="设备管理主机列表ansible配置"><a href="#设备管理主机列表ansible配置" class="headerlink" title="设备管理主机列表ansible配置"></a>设备管理主机列表ansible配置</h3><p>在<code>/etc/ansible/hosts</code>文件中配置集群分组信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">192.168.2.100    node_name=k8s-master</span><br><span class="line"></span><br><span class="line">[worker]</span><br><span class="line">192.168.2.101    node_name=k8s-worker01</span><br><span class="line">192.168.2.102    node_name=k8s-worker02</span><br><span class="line"></span><br><span class="line">[etcd]</span><br><span class="line">192.168.2.103    etcd_name=etcd01</span><br><span class="line">192.168.2.104    etcd_name=etcd02</span><br><span class="line">192.168.2.105    etcd_name=etcd03</span><br><span class="line"></span><br><span class="line">[k8s:children]</span><br><span class="line">master</span><br><span class="line">worker</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">192.168.2.106</span><br><span class="line">192.168.2.107</span><br><span class="line"></span><br><span class="line">[elb]</span><br><span class="line">192.168.2.108</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="禁用主机检查"><a href="#禁用主机检查" class="headerlink" title="禁用主机检查"></a>禁用主机检查</h3><p><code>vi /etc/ansible/ansible.cfg</code><br></br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uncomment this to <span class="built_in">disable</span> SSH key host checking</span></span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure><h3 id="配置时间同步"><a href="#配置时间同步" class="headerlink" title="配置时间同步"></a>配置时间同步</h3><p>搭建集群通常要求集群节点必须精确一致，因此所有机器都需要配置时间同步，在deploy主机执行ansible命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;yum install ntpdate -y&quot;</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&quot;ntpdate ntp.aliyun.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将时间同步加入linux定时任务，每30分钟执行一次</span></span><br><span class="line">ansible all -m cron -a <span class="string">&#x27;minute=*/30 job=&quot;/usr/sbin/ntpdate ntp.aliyun.com&quot; name=&quot;time sync&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 删除任务：ansible elb -m cron -a &#x27;name=&quot;time sync&quot; state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="http://ip.yqie.com/ziwangyanma.aspx">在线计算子网掩码</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMWare </tag>
            
            <tag> SSH </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven配置文件详解和使用</title>
      <link href="/2023/07/25/Maven-configuration-guide-01/"/>
      <url>/2023/07/25/Maven-configuration-guide-01/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>本文详细分析了Maven的全局/用户级配置文件settings.xml和项目级配置文件pom.xml，便于查阅。</p><!-- toc --><h1 id="一、工作原理"><a href="#一、工作原理" class="headerlink" title="一、工作原理"></a>一、工作原理</h1><p>项目根据Maven配置，通常先从本地仓库去拉取jar包，如果没有则取远程仓库拉取，这个远程仓库可以是私服，也可以是中央仓库或者镜像仓库。</p><h1 id="二、仓库管理"><a href="#二、仓库管理" class="headerlink" title="二、仓库管理"></a>二、仓库管理</h1><p>Maven分为本地仓库和远程仓库，本地仓库即<code>&lt;localRepository&gt;</code>标签配置的路径。<br>远程仓库分为中央仓库、私服、其他公共库。</p><p>Maven仓库的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307260017629.png" alt=""></p><p>由于墙的存在，国内访问国外中央仓库不顺利，Maven拉取Jar包时会很慢甚至无法拉取，因此需要配置下国内的中央镜像仓库。镜像仓库在Maven配置文件settings.xml下进行配置。</p><p><strong>镜像仓库</strong>：将国外的中心仓库复制一份到国内，提升访问速度。</p><p><strong>私服</strong>：基于系统保密性的原因，搭建的内部远程仓库，存储一些公司内部不希望被公开的依赖服务，也可以避免因外部中央仓库网络的访问不顺畅导致的各种问题。</p><h1 id="三、Maven配置文件"><a href="#三、Maven配置文件" class="headerlink" title="三、Maven配置文件"></a>三、Maven配置文件</h1><p>Maven配置文件有三种：</p><ul><li>全局配置文件：<code>%MAVEN_HOME%\conf\settings.xml</code></li><li>用户配置文件：<code>C:\Users\用户名\.m2\settings.xml</code></li><li>项目配置文件：项目下的<code>pom.xml</code></li></ul><p>配置优先级：项目pom.xml &gt; 本地settings &gt; 全局settings，如果配置文件同时存在，会进行合并，有重复的配置时，优先级高的配置会覆盖优先级低的配置。</p><h1 id="四、Settings配置详解"><a href="#四、Settings配置详解" class="headerlink" title="四、Settings配置详解"></a>四、Settings配置详解</h1><p>首先，可以从Maven安装目录的conf下查看配置文件settings.xml，示例如下（注意仅展示结构，要经过定制才可使用）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>com.your.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>deploymentRepo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>repouser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>repopwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Another sample, using keys to authenticate. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>siteServer<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>/path/to/private/key<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>optional; leave empty if not used.<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>optional<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>proxypass<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.host.net<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>local.net|some.host.com<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk14<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Repository for JDK 1.4 builds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.myhost.com/maven/jdk14<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshotPolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">snapshotPolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Another sample --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>env-dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>target-env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tomcatPath</span>&gt;</span>/path/to/tomcat/instance<span class="tag">&lt;/<span class="name">tomcatPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>alwaysActiveProfile<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>anotherAlwaysActiveProfile<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、localRepository"><a href="#1、localRepository" class="headerlink" title="1、localRepository"></a>1、localRepository</h2><p>配置本地仓库位置，默认位置为<code>$&#123;user.home&#125;/.m2/repository</code>，可以配置为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Workslace\Maven\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、interactiveMode"><a href="#2、interactiveMode" class="headerlink" title="2、interactiveMode"></a>2、interactiveMode</h2><p>Maven是否需要和用户交互以获得输入，默认为true</p><h2 id="3、offline"><a href="#3、offline" class="headerlink" title="3、offline"></a>3、offline</h2><p>用来标识是否以离线模式运营Maven。当系统不能联网时，可以通过该配置来离线运行。</p><h2 id="4、pluginGroups"><a href="#4、pluginGroups" class="headerlink" title="4、pluginGroups"></a>4、pluginGroups</h2><p>pluginGroups当插件的组织id(groupId)没有显示提供时，供搜寻插件组织Id的列表。</p><h2 id="5、servers"><a href="#5、servers" class="headerlink" title="5、servers"></a>5、servers</h2><p>访问私服时，某些私服需要配置认证信息，在这里填写。之所以servers配置不写在pom.xml，是因为pom.xml会随着代码上传代码仓库，而settings.xml存储在本地，相对安全。因此，通常在settings.xml中配置servers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--鉴权用户名。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--鉴权密码。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;/.ssh/id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;usr.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--鉴权时使用的私钥密码。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、proxies"><a href="#6、proxies" class="headerlink" title="6、proxies"></a>6、proxies</h2><p>用来配置代理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理id。用来区分不同的代理元素。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式：协议://主机名:端口 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理的协议。 协议://主机名:端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理的主机名。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理的端口。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理的用户名。用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理的密码。用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、mirrors"><a href="#7、mirrors" class="headerlink" title="7、mirrors"></a>7、mirrors</h2><p>配置镜像仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven_public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当本地仓库没有需要的依赖时，根据<code>&lt;mirrorOf&gt;</code>匹配远程仓库请求，去对应的镜像仓库地址拉取依赖。</p><p>下面是一些常用的语法示例：</p><ul><li><code>&lt;mirrorOf&gt;*&lt;mirrorOf&gt;</code>：匹配所有远程仓库。</li><li><code>&lt;mirrorOf&gt;external:*&lt;mirrorOf&gt;</code>：匹配所有不在本机上的远程仓库。</li><li><code>&lt;mirrorOf&gt;repo1,repo2&lt;mirrorOf&gt;</code>：匹配仓库repo1和repo2，使用逗号分隔多个远程仓库。</li><li><code>&lt;mirrorOf&gt;*,!repo1&lt;mirrorOf&gt;</code>：匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。</li></ul><p><strong>注意</strong>：<br>镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven仍将无法访问被镜像仓库，因而将无法下载jar包。</p><p>此外，maven读取mirror配置是从上往下读取的，因此谨慎配置<code>&lt;mirrorOf&gt;*&lt;mirrorOf&gt;</code>，因为如果第一个镜像仓库配置了如此标志，那么如果该仓库即使不存在对应依赖也不会向下游查询。</p><h2 id="8、profiles"><a href="#8、profiles" class="headerlink" title="8、profiles"></a>8、profiles</h2><p>根据环境参数来调整构建配置的列表。可以将settings.xml下的profile理解为pom.xml种profile的阉割版。<br>settings.xml中的profiles包含了id、activation、repositories、pluginRepositories和properties元素</p><p><strong>注意：</strong><br>如果一个settings.xml的profile被激活，那么它的值会覆盖任何其他定义在pom.xml种带有相同id的profile</p><p><strong>激活profile有三种方式</strong></p><ul><li>通过命令行编译构建时激活，最常用的方式。</li><li>通过activeProfiles直接激活，详细往下看。</li><li>通过activation激活，详细往下看。</li></ul><p><strong>通过命令行激活</strong></p><p>通常在pom.xml中定义不同环境的profile，在编译构建不同的包时，执行下面的命令即可激活对应的profile进行编译构建。</p><p>以开发环境为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：mvn package -P [profile的ID]</span></span><br><span class="line">mvn package -P dev</span><br></pre></td></tr></table></figure><h3 id="repositories"><a href="#repositories" class="headerlink" title="repositories"></a>repositories</h3><p>定义了一组远程仓库的列表，当该属性对应的profile被激活时，会使用该远程仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库唯一标识 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>定义一组拓展属性，当对应的profile被激活时该属性才生效。<br>执行<code>mvn help:system</code>可以获取System Properties和Environment Variables，根据下面注释进行使用即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1. env.X: 在一个变量前加上&quot;env.&quot;的前缀，会返回一个shell环境变量。例如,&quot;env.PATH&quot;指代了$path环境变量（在Windows上是%PATH%）。</span></span><br><span class="line"><span class="comment">  2. project.x：指代了POM中对应的元素值。例如: &lt;project&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt;通过$&#123;project.version&#125;获得version的值。</span></span><br><span class="line"><span class="comment">  3. settings.x: 指代了settings.xml中对应元素的值。例如：&lt;settings&gt;&lt;offline&gt;false&lt;/offline&gt;&lt;/settings&gt;通过 $&#123;settings.offline&#125;获得offline的值。</span></span><br><span class="line"><span class="comment">  4. java System Properties: 所有可通过java.lang.System.getProperties()访问的属性都能在POM中使用该形式访问，例如 $&#123;java.home&#125;。可以实际运行获取查看</span></span><br><span class="line"><span class="comment">  5. x: 在&lt;properties/&gt;元素中，或者外部文件中设置，以$&#123;someVar&#125;的形式使用。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user.install</span>&gt;</span>$&#123;user.home&#125;/our-project<span class="tag">&lt;/<span class="name">user.install</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>全局唯一标识，如果一个settings.xml中的profile被激活，它的值会覆盖任何其它定义在pom.xml中带有相同id的profile。</p><h3 id="pluginRepositories"><a href="#pluginRepositories" class="headerlink" title="pluginRepositories"></a>pluginRepositories</h3><p>同repositories差不多，不过该标签定义的是插件的远程仓库。</p><h3 id="activation"><a href="#activation" class="headerlink" title="activation"></a>activation</h3><p>触发激活该profile的条件。注意在Maven 3.2.2之前，当满足一项指定条件时就会激活。从Maven 3.2.2开始，需要满足所有指定条件时才会激活。可以移步<a href="https://maven.apache.org/pom.html#Activation">官方文档</a>查阅。</p><blockquote><p>Before Maven 3.2.2 activation occurs when one or more of the specified criteria have been met. When the first positive result is encountered, processing stops and the profile is marked as active. Since Maven 3.2.2 activation occurs when all of the specified criteria have been met.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile默认是否激活的标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。可以结合java.lang.System.getProperties()中的属性进行配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;name&#125;引用），其拥有对应的name = 值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9、activeProfiles"><a href="#9、activeProfiles" class="headerlink" title="9、activeProfiles"></a>9、activeProfiles</h2><p>指定激活的profile，不管profile的activation配置如何，都会激活对应的profile。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要激活的profile id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、Settings-xml配置文件中mirrors和profile中repositories的关系"><a href="#10、Settings-xml配置文件中mirrors和profile中repositories的关系" class="headerlink" title="10、Settings.xml配置文件中mirrors和profile中repositories的关系"></a>10、Settings.xml配置文件中<code>mirrors</code>和<code>profile中repositories</code>的关系</h2><p>两个标签都定义了一个远程仓库的位置，如果一个依赖同时存在于这2个仓库，会先加载哪个依赖？</p><p>mirrors相当于拦截器，maven加载依赖时，如果mirror的mirrorOf配置的值与对应的repository的id相同，那么mirror的仓库地址替换掉repository的仓库地址。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307260222852.png" alt=""></p><h1 id="五、pom-xml配置详解"><a href="#五、pom-xml配置详解" class="headerlink" title="五、pom.xml配置详解"></a>五、pom.xml配置详解</h1><p>settings.xml定义的是全局或用户的配置，pom.xml定义的是一个项目的依赖配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 一般不用更改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，也是打包成jar包路径的依据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 例如com.companyname.project-group，maven打包jar包的路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>projectid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目产生的构件类型，</span></span><br><span class="line"><span class="comment">    jar、war主要用来标识项目打包出的服务是jar包还是war包 </span></span><br><span class="line"><span class="comment">    pom一般用作多moudle的项目中 顶层的pom用来指定子moudle中需要依赖的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义了本项目的名称与example的网址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>blog project<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>blog.tsukasa.moe<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、dependencies"><a href="#1、dependencies" class="headerlink" title="1、dependencies"></a>1、dependencies</h2><p>定义了项目中所需要的相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  依赖坐标 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖项目的坐标三元素：groupId + artifactId + version --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖传递 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖排除，即告诉maven只依赖指定的项目，不依赖该项目的这些依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可选依赖，用于阻断依赖的传递性。如果在项目B中把C依赖声明为可选，那么依赖B的项目中无法使用C依赖，如使用到C依赖提供的服务，需要另外引入C依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来</span></span><br><span class="line"><span class="comment">            - compile：默认范围，适用于所有阶段，会随着项目一起发布;  </span></span><br><span class="line"><span class="comment">            - runtime: 在执行时需要使用，如JDBC驱动，适用运行和测试阶段，不同于例如fastjson，需要在编译时使用;   </span></span><br><span class="line"><span class="comment">            - test: 只在测试时使用，用于编译和运行测试代码，例如junit，不同于junit，在发布时并不需要;    </span></span><br><span class="line"><span class="comment">            - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、dependencyManagement"><a href="#2、dependencyManagement" class="headerlink" title="2、dependencyManagement"></a>2、dependencyManagement</h2><p>一个服务中存在多个module时，每个子module可能都引用了相同的jar包，此时可以通过maven继承，父级pom.xml统一管理依赖版本。需要使用到<code>&lt;dependencyManagement&gt;</code>标签。</p><p>示例：</p><p>父级pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父pom中定义子pom需要的相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子module的pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在子pom中  如下定义了父pom中相关依赖信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为引用了父pom 所以可以不指定版本 maven会自动去父pom中查找指定版本 此处为1.0.0 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、properties"><a href="#3、properties" class="headerlink" title="3、properties"></a>3、properties</h2><p>properties主要用来定义常量，常见的有依赖版本、JDK版本、字节编码等，通过${value}来使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring cloud Settings   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring cloud--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slf4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，Maven还通过约定大于配置的方式定义了一些常用的属性：</p><table><thead><tr><th>属性</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td><code>$&#123;basedir&#125;</code></td><td style="text-align:left">存放pom.xml和所有的子目录</td></tr><tr><td><code>$&#123;basedir&#125;/src/main/java</code></td><td style="text-align:left">项目的java源代码</td></tr><tr><td><code>$&#123;basedir&#125;/src/main/resources</code></td><td style="text-align:left">项目的资源，比如说property文件，springmvc.xml</td></tr><tr><td><code>$&#123;basedir&#125;/src/main/webapp/WEB-INF</code></td><td style="text-align:left">web应用文件目录，web项目的信息，比如web.xml</td></tr><tr><td><code>$&#123;basedir&#125;/target</code></td><td style="text-align:left">打包输出目录</td></tr><tr><td><code>$&#123;project.version&#125;</code></td><td style="text-align:left">项目版本</td></tr><tr><td><code>$&#123;project.groupId&#125;</code></td><td style="text-align:left">项目groupId</td></tr></tbody></table><h2 id="4、resources"><a href="#4、resources" class="headerlink" title="4、resources"></a>4、resources</h2><p><code>&lt;build&gt;</code>下面的<code>&lt;resources&gt;</code>标签用来标识项目在编译运行时需要额外编译的文件。例如手工引入jar包、不同运行环境对应不同的profile等等。</p><p><code>&lt;testResources&gt;</code>用法与<code>&lt;resources&gt;</code>类似。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--首先将默认resources目录下的所有文件包含进来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只编译所有以.fxml结尾的文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.fxml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除掉所有的yaml文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.yaml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将不同环境下对应的不同yaml或properties文件编译运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             &lt;directory&gt;src/main/profiles/dev&lt;/directory&gt;&lt;directory&gt;src/main/profiles/beta&lt;directory&gt;&lt;directory&gt;src/main/profiles/pre&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/profiles/product<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.fxml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将手工引入的jar包编译运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>BOOT-INF/lib/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、profile"><a href="#5、profile" class="headerlink" title="5、profile"></a>5、profile</h2><p>通常地，setting.xml用来标识不同的远程仓库，而pom中的profile一般用来标识当前profile的配置属于哪个环境，当然也可以用来指定远程仓库。</p><p>在编译打包时，通过<code>mvn package -P prod</code>命令来激活不同环境。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--激活条件 其中默认为该profile --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当此profile被激活时，会将 project.active 的属性赋值为dev --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">project.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">project.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当此profile被激活时，会将 project.active 的属性赋值为test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">project.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">project.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--根据不同的环境 project.active 取得不同的值 从而会将不同的环境下的yaml或properties文件编译进项目中 达到只需要在编译时指定环境变量即可 不用每次都要修改配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/$&#123;project.active&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.fxml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Intellij IDEA的Maven窗口中，profile作为一个个的可选项存在。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/icons/202307261811603.png" alt=""></p><h2 id="6、modules"><a href="#6、modules" class="headerlink" title="6、modules"></a>6、modules</h2><p>项目中存在多个module时，如果需要单独打包需要在每一个module都执行maven命令，通过父级pom.xml添加的<code>&lt;modules&gt;</code>标签可以将自服务进行聚合，只需要打包该服务，也会将子module同时打包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入子模块所在的相对目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-sub-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入同级模块所在的相对目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、查找并添加依赖"><a href="#7、查找并添加依赖" class="headerlink" title="7、查找并添加依赖"></a>7、查找并添加依赖</h2><p>配置好Maven后，想要添加什么依赖，可以到<a href="https://mvnrepository.com/">仓库索引</a>搜索，然后选择对应的坐标，复制到pom.xml文件<code>&lt;dependencies&gt;</code>中即可。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307251628969.png" alt=""></p><h2 id="8、依赖范围管理"><a href="#8、依赖范围管理" class="headerlink" title="8、依赖范围管理"></a>8、依赖范围管理</h2><p>Maven项目构建生命周期包括clean清理项目，default构建项目，site生成项目文档和站点。重点关注default生命周期的各个阶段：</p><table><thead><tr><th style="text-align:left">阶段</th><th style="text-align:left">中文名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">validate</td><td style="text-align:left">校验</td><td style="text-align:left">验证项目是否正确，所有必需信息是否可用。</td></tr><tr><td style="text-align:left">initialize</td><td style="text-align:left">初始化</td><td style="text-align:left">初始化构建状态，例如设置属性或创建目录。</td></tr><tr><td style="text-align:left">generate-sources</td><td style="text-align:left">生成源代码</td><td style="text-align:left">生成项目的源代码。</td></tr><tr><td style="text-align:left">process-sources</td><td style="text-align:left">处理源代码</td><td style="text-align:left">处理项目的源代码，例如进行过滤等操作。</td></tr><tr><td style="text-align:left">generate-resources</td><td style="text-align:left">生成资源文件</td><td style="text-align:left">生成项目的资源文件。</td></tr><tr><td style="text-align:left">process-resources</td><td style="text-align:left">处理资源文件</td><td style="text-align:left">复制并处理资源文件，为打包做准备。</td></tr><tr><td style="text-align:left"><strong>compile</strong></td><td style="text-align:left">编译</td><td style="text-align:left">编译项目的源代码。</td></tr><tr><td style="text-align:left">process-classes</td><td style="text-align:left">处理类文件（字节码）</td><td style="text-align:left">对编译后的字节码进行处理。</td></tr><tr><td style="text-align:left">generate-test-sources</td><td style="text-align:left">生成测试源代码</td><td style="text-align:left">生成项目的测试源代码。</td></tr><tr><td style="text-align:left">process-test-sources</td><td style="text-align:left">处理测试源代码</td><td style="text-align:left">处理项目的测试源代码，例如进行过滤等操作。</td></tr><tr><td style="text-align:left">generate-test-resources</td><td style="text-align:left">生成测试资源文件</td><td style="text-align:left">生成项目的测试资源文件。</td></tr><tr><td style="text-align:left">process-test-resources</td><td style="text-align:left">处理测试资源文件</td><td style="text-align:left">复制并处理测试资源文件，为测试做准备。</td></tr><tr><td style="text-align:left"><strong>test-compile</strong></td><td style="text-align:left">编译测试源代码</td><td style="text-align:left">编译项目的测试源代码。</td></tr><tr><td style="text-align:left">process-test-classes</td><td style="text-align:left">处理测试类文件（字节码）</td><td style="text-align:left">对测试编译后的字节码进行处理。</td></tr><tr><td style="text-align:left"><strong>test</strong></td><td style="text-align:left">测试</td><td style="text-align:left">使用合适的测试框架运行测试（一般我们在idea种开发项目时，可以选择屏蔽掉test步骤）。</td></tr><tr><td style="text-align:left">prepare-package</td><td style="text-align:left">准备打包</td><td style="text-align:left">进行必要的操作，以便进行打包。</td></tr><tr><td style="text-align:left"><strong>package</strong></td><td style="text-align:left">打包</td><td style="text-align:left">将编译后的代码打包成可分发的格式，例如 JAR、WAR。</td></tr><tr><td style="text-align:left">pre-integration-test</td><td style="text-align:left">集成测试前</td><td style="text-align:left">在集成测试之前进行的操作。</td></tr><tr><td style="text-align:left">integration-test</td><td style="text-align:left">集成测试</td><td style="text-align:left">处理和部署项目，以便进行集成测试。</td></tr><tr><td style="text-align:left">post-integration-test</td><td style="text-align:left">集成测试后</td><td style="text-align:left">在集成测试之后进行的操作。</td></tr><tr><td style="text-align:left">verify</td><td style="text-align:left">验证</td><td style="text-align:left">检查包是否有效，符合质量标准。</td></tr><tr><td style="text-align:left"><strong>install</strong></td><td style="text-align:left">安装</td><td style="text-align:left">将包安装到本地仓库，以便其他项目依赖。</td></tr><tr><td style="text-align:left">deploy</td><td style="text-align:left">部署</td><td style="text-align:left">将最终的包复制到远程仓库，共享给其他开发人员和项目。</td></tr></tbody></table><p></br><br>在pom.xml文件的<code>&lt;dependency&gt;</code>标签中有一个子标签<code>&lt;scope&gt;</code>，默认值为compile，记录了依赖的jar包在哪些环境有效<br></br></p><table><thead><tr><th style="text-align:center">Scope</th><th style="text-align:center">编译环境</th><th style="text-align:center">测试环境</th><th style="text-align:center">运行环境</th><th style="text-align:left">例子</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">compile</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:left">spring-core</td><td style="text-align:left">依赖对所有的classpath都有效</td></tr><tr><td style="text-align:center">provided</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:left">servlet-api</td><td style="text-align:left">执行打包<code>mvn package</code>时会移除，运行时由应用服务器提供</td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:left">本地的，Maven仓库之外的类库文件</td><td style="text-align:left">类似provided，但依赖项不会从maven仓库中查找，通过<code>&lt;systemPath&gt;</code>标签获取</td></tr><tr><td style="text-align:center">runtime</td><td style="text-align:center">-</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:left">jdbc驱动包</td><td style="text-align:left">编译的时候不需要，只在运行和测试的时候需要用到</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">-</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:left">Junit/Mockito</td><td style="text-align:left">只在测试编译和测试运行阶段可用</td></tr></tbody></table><p>还有一个特殊的取值：<code>import</code>，仅在父级pom.xml的<code>&lt;dependencyManagement&gt;</code>的标签中可用，不做展开。</p><p>scope为system示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.open<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>open-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- package时会排除这个jar，运行时由应用服务器提供 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/WebContent/WEB-INF/lib/open-core.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于Dependency Scope的官方描述，请查阅：<a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html</a></p><p><strong>总结</strong></p><p>通过maven引入的jar包，里面的类都是已经编译好的字节码，与scope参数没有什么联系。</p><p>compile、runtime和provided的区别，需要在执行打包<code>mvn package</code>命令，并且打包格式时war时才能看出来。<br>通过compile和runtime引入的jar包，执行打包命令后会出现在war包里，而provided引入的jar包则不会。</p><p>通过compile和provided引入的jar包，里面的类，在项目中直接import进来就可以使用了，编译也没有问题；<br>而通过runtime引入的jar包中的类，项目代码不能直接使用，用了无法通过编译，只能通过反射的方式来调用。</p><h2 id="9、解决依赖冲突"><a href="#9、解决依赖冲突" class="headerlink" title="9、解决依赖冲突"></a>9、解决依赖冲突</h2><p>依赖传递遵循三个原则：</p><ul><li>最短路径优先：项目中存在两级以上的不同依赖，引用同一个依赖时，层级越浅，优先级越高。举例：项目A -&gt; B -&gt; C1，A -&gt; D -&gt; E -&gt; C2，其中C1和C2是同一个依赖的不同版本，此时A项目以C1的版本为准。</li><li>声明优先：对于两级以上的同级依赖，先声明的依赖会覆盖后声明的依赖包。举例：项目A -&gt; B -&gt; C1，A -&gt; D -&gt; C2，以C1版本为准。</li><li>特殊优先：同级依赖中，后加载覆盖先加载原则。举例：项目A-&gt;C1，再次配置A-&gt;C2，那么以C1版本为准。</li></ul><p>Intellij IDEA解决依赖冲突思路：</p><ul><li>通过Maven Helper插件的Dependency Analyzer对pom文件进行依赖分析，找到冲突或重复的jar包，用<code>&lt;exclusions&gt;</code>标签排除不需要的版本，要注意是否存在兼容性问题。此外也可以通过命令行<code>mvn dependency:tree</code>查看项目的依赖树，观察实际加载的版本。</li><li>编译打包后打开查看实际打的jar包版本，进行核对</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307260245785.png" alt=""></p><p><strong>依赖分析相关的maven命令</strong></p><p><code>mvn dependency:list</code>：查看项目已解析的依赖。<br><code>mvn dependency:tree</code> 查看项目的依赖树。<br><code>mvn dependency:analyze</code>：分析项目的依赖信息，有2种，根据需要选择主动声明，或者移除不需要的依赖。</p><ul><li>Used undeclared dependencies，项目中已使用但未声明的依赖。</li><li>Unused declared dependencies，项目中未使用但已声明的依赖。</li></ul><h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="https://juejin.cn/post/7248219648054739002?searchId=2023072515490122F2732AC2519B001AAA">Maven进阶学习指南 | 京东云技术团队</a><br><a href="https://juejin.cn/post/7257122036597669943?searchId=202307260227417A7D2F23A819C3475E0C">实际上手体验maven面对冲突Jar包的加载规则 | 京东云技术团队</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Maven安装配置</title>
      <link href="/2023/07/25/Maven-configuration-for-windows/"/>
      <url>/2023/07/25/Maven-configuration-for-windows/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>Windows开发环境下Maven配置，包括环境变量、设置中央仓库镜像。</p><!-- toc --><h1 id="Maven下载安装"><a href="#Maven下载安装" class="headerlink" title="Maven下载安装"></a>Maven下载安装</h1><p>官网下载Maven压缩包：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a><br>下载完成后解压到需要安装的目录即可。</p><h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307251600821.png" alt=""></p><p>配置完成后打开cmd命令行输入<code>mvn -v</code>验证配置结果</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307251603354.png" alt=""></p><h1 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h1><p>Maven分为本地仓库和远程仓库，本地仓库即localRepository配置的路径。<br>远程仓库分为中央仓库、私服、其他公共库。</p><p>由于墙的存在，国内访问国外中央仓库不顺利，Maven拉取Jar包时会很慢甚至无法拉取，因此需要配置下国内的镜像仓库。镜像仓库在Maven下进行配置。</p><h2 id="配置镜像仓库"><a href="#配置镜像仓库" class="headerlink" title="配置镜像仓库"></a>配置镜像仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;mirrorOf&gt;</code>标签用来匹配当请求什么仓库依赖时使用该镜像去下载jar包。<br>下面是一些常用的语法示例：</p><ul><li><code>&lt;mirrorOf&gt;*&lt;mirrorOf&gt;</code>：匹配所有远程仓库。</li><li><code>&lt;mirrorOf&gt;external:*&lt;mirrorOf&gt;</code>：匹配所有不在本机上的远程仓库。</li><li><code>&lt;mirrorOf&gt;repo1,repo2&lt;mirrorOf&gt;</code>：匹配仓库repo1和repo2，使用逗号分隔多个远程仓库。</li><li><code>&lt;mirrorOf&gt;*,!repo1&lt;mirrorOf&gt;</code>：匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。</li></ul><p>注意：镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven仍将无法访问被镜像仓库，因而将无法下载jar包。</p><p>此外，maven读取mirror配置是从上往下读取的，因此谨慎配置<code>&lt;mirrorOf&gt;*&lt;mirrorOf&gt;</code>，因为如果第一个镜像仓库配置了如此标志，那么如果该仓库即使不存在对应依赖也不会向下游查询。</p><h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><p>本地仓库即jar包下载的路径。默认jar包下载到<code>$&#123;user.home&#125;/.m2/repository</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Workslace\Maven\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8新特性Lambda表达式学习笔记</title>
      <link href="/2023/07/23/Learning-notes-for-java-8-new-feature-lambda-expression/"/>
      <url>/2023/07/23/Learning-notes-for-java-8-new-feature-lambda-expression/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>Java 8新特性lambda表达式，未完成。</p><h1 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h1><ul><li>lambda表达式的类型依赖于上下文，通过编译器编译阶段javac即可推断出来，程序依旧要经过类型检查保证运行的安全性。</li><li>lambda表达式可以传入外部既成事实上是final的变量，比如只赋值了一次。</li><li>函数接口是只有一个抽象方法的接口，用作lambda表达式的类型</li><li>Stream 是用函数式编程方式在集合类上进行复杂操作的工具</li><li>通常是一系列的惰性求值行成的链，然后通过一个早求值返回想要的结果，与Builder模式有共通之处。</li><li>及早求值函数执行之前，惰性函数求值不会真正参与运算。</li><li>Stream是一个接口，继承了AutoCloseable，一个流只能消费一次（调用及早求值方法一次）。</li><li>流可以嵌套使用，流的某个步骤需要某个值也可以通过流来获取。</li><li>掌握重要的函数接口，要融会贯通。</li></ul><p>基本函数接口：</p><table><thead><tr><th>接口</th><th>参数</th><th>返回类型</th><th>示例</th></tr></thead><tbody><tr><td>Predicate<T></td><td>T</td><td>boolean</td><td>这张唱片已经发行了吗</td></tr><tr><td>Consumer<T></td><td>T</td><td>void</td><td>输出一个值</td></tr><tr><td>Function<T,R></td><td>T</td><td>R</td><td>获得 Artist 对象的名字</td></tr><tr><td>Supplier<T></td><td>None</td><td>T</td><td>工厂方法</td></tr><tr><td>UnaryOperator<T></td><td>T</td><td>T</td><td>逻辑非（!）</td></tr><tr><td>BinaryOperator<T></td><td>(T, T)</td><td>T</td><td>求两个数的乘积（*）</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; predicate = x -&gt; x == <span class="number">1</span>;</span><br><span class="line">Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">Function&lt;Integer, Integer&gt; function = x -&gt; x = x + <span class="number">1</span>;</span><br><span class="line">Supplier&lt;Integer&gt; supplier = () -&gt; <span class="number">1</span>;</span><br><span class="line">UnaryOperator&lt;Integer&gt; unaryOperator = x -&gt; x + <span class="number">1</span>;</span><br><span class="line">BinaryOperator&lt;Integer&gt; binaryOperator = (x, y) -&gt; x * y;</span><br><span class="line"></span><br><span class="line">System.out.println(predicate.test(<span class="number">1</span>));</span><br><span class="line">consumer.accept(<span class="number">1</span>);</span><br><span class="line">System.out.println(function.apply(<span class="number">1</span>));</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(unaryOperator.apply(<span class="number">1</span>));</span><br><span class="line">System.out.println(binaryOperator.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h1><ul><li>基本类型与包装类型：ToLongFunction, mapToInt</li><li>@FunctionalInterface注解：强制javac检查一个接口是否符合函数接口的标准，即只有一个抽象方法的接口，如Comparator接口的compare方法则是抽象方法，其他不是。</li><li>默认方法（default）：增加默认方法的目的是实现接口向后兼容，类中重写的方法优先级高于接口中定义的默认方法</li><li>接口多重继承默认方法相同，需要显示指定调用的父接口方法</li><li>Optional避免NullPointerException，消除if语句</li><li>方法引用、元素排序、收集器（转换为其他集合、转换成值、数据分块、数据分组、字符串）、并行处理</li><li>方法引用是一种更简短的语法，如artist -&gt; artist.getName()可以简写为Artist::getName，标准语法为Classname::methodName，分为三种:<ul><li>指向静态方法的引用，如Objects::nonNull</li><li>指向任意类型实例方法的引用，如String::length</li><li>指向现有对象的实例方法引用，如user::getName</li></ul></li><li>使用并行流时，forEach无法保证元素是按顺序处理，应该使用forEachOrdered。</li><li>peak可以查看流中的每个值，类似forEach操作但不是及早求值方法</li></ul><h1 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h1><h2 id="常用Java-8-API"><a href="#常用Java-8-API" class="headerlink" title="常用Java 8 API"></a>常用Java 8 API</h2><p>collect：将流转换为一个集合。<br>filter：过滤出流中符合条件的元素。<br>map：将流中的每个元素转化为另一个元素。<br>flatMap：将底层元素全部抽出来放到一个流中，将多个流合并为一个流进行操作。<br>reduce：将Stream流中的数据通过递归的方式，聚合成一个数据，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(nums1, nums2).flatMap(num -&gt; num.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>reduce：递归概念，归约成一个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce([p1,p2,p3,p4],fn) = reduce([fn(p2,p4),fn(p1,p3)])</span><br></pre></td></tr></table></figure><h2 id="集合的遍历（List-Set-Map）"><a href="#集合的遍历（List-Set-Map）" class="headerlink" title="集合的遍历（List, Set, Map）"></a>集合的遍历（List, Set, Map）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历map</span></span><br><span class="line">map.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;=&quot;</span> + value));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>## </p><h2 id="集合之间的转换"><a href="#集合之间的转换" class="headerlink" title="集合之间的转换"></a>集合之间的转换</h2><p>常用方法如下，可以查看源码获取重载方法：<br>Collectors.toList(), Collectors.toSet(), Collectors.toMap(), Collectors.toConcurrentMap(), Collectors.toArray()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list转map</span></span><br><span class="line">Map&lt;String, String&gt; map = channelParameters.stream()</span><br><span class="line">            .sorted(Comparator.comparing(ChannelParameter::getVersion).reversed())</span><br><span class="line">            .collect(Collectors.toMap(ChannelParameter::getName,</span><br><span class="line">                ChannelParameter::getValue, (v1, v2) -&gt; v1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象数组转Map</span></span><br><span class="line">Map&lt;String, String&gt; studentMap = Arrays.stream(studentArray).collect(Collectors.toMap(Student::getName, Student::getScore));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String[]转set</span></span><br><span class="line">Set&lt;String&gt; set = Arrays.stream(strArray).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多线程解密</span></span><br><span class="line">List&lt;Runnable&gt; jobs = getDecryptJobs(xxx);</span><br><span class="line">CompletableFuture&lt;?&gt;[] futures = jobs.stream()</span><br><span class="line">    .map(job -&gt; CompletableFuture.runAsync(job,</span><br><span class="line">        AsyncManager.getExecutor(<span class="string">&quot;decryptParam&quot;</span>, getSupportExecutorProvider())))</span><br><span class="line">    .toArray(CompletableFuture[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line">Collections.sort(studentList);</span><br><span class="line"><span class="comment">// 写法2， Comparator也可以不采取匿名类的形式</span></span><br><span class="line">Collections.sort(studentList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getScore() - o2.getScore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 写法3</span></span><br><span class="line">Collections.sort(studentList, (o1, o2) -&gt; o1.getScore() - o2.getScore());</span><br><span class="line"><span class="comment">// 写法4</span></span><br><span class="line">Collections.sort(studentList, Comparator.comparingInt(Student::getScore));</span><br><span class="line"><span class="comment">// 写法5，推荐</span></span><br><span class="line">studentList.sort(Comparator.comparingInt(Student::getScore));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line">Arrays.sort(strArray);</span><br></pre></td></tr></table></figure><p><strong>list对象多字段排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先按照score降序排列，再按照name升序排列</span></span><br><span class="line"><span class="comment">// 写法1</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(Student::getScore).reversed().thenComparing(Student::getName));</span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(Student::getScore, Comparator.reverseOrder()).thenComparing(Student::getName));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 及早求值排序</span></span><br><span class="line">versionList.sort((a, b) -&gt; b.getUpdateTime().compareTo(a.getUpdateTime()));</span><br></pre></td></tr></table></figure><p><strong>字典排序拼接字符串用作签名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sortedContent</span> <span class="operator">=</span> data.entrySet().stream()</span><br><span class="line">        .filter(key -&gt; !Constants.FIELD_SIGN.equals(data.get(key)))</span><br><span class="line">        .filter(key -&gt; StringUtils.isNoneBlank(key.getValue()))</span><br><span class="line">        .sorted(Map.Entry.comparingByKey())</span><br><span class="line">        .map(entry -&gt; entry.getKey() + <span class="string">&quot;=&quot;</span> + StringUtils.trim(entry.getValue()))</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;&amp;&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="Optional处理空值"><a href="#Optional处理空值" class="headerlink" title="Optional处理空值"></a>Optional处理空值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免if判空，空值返回orElse的值</span></span><br><span class="line">List&lt;ChannelResponse.ChannelParameter&gt; channelParameters = Optional.ofNullable(response)</span><br><span class="line">            .map(ChannelResponse::getChannelParameters)</span><br><span class="line">            .orElse(Collections.emptyList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流中使用流，max函数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">latestVal</span> <span class="operator">=</span> Optional.ofNullable(channelParameters)</span><br><span class="line">            .map(data -&gt; data.stream()</span><br><span class="line">                .filter(v -&gt; name.equals(v.getName()))</span><br><span class="line">                .max(Comparator.comparing(GetChannelParametersResponse.ChannelParameter::getVersion))</span><br><span class="line">                .map(GetChannelParametersResponse.ChannelParameter::getValue)</span><br><span class="line">                .get())</span><br><span class="line">            .orElse(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>Comparable与Java8的Comparator区别？<br>多层排序？<br>Arrays类使用<br>使用各套测试框架，每个框架都要实现一定的测试场景<br>Mockito测试框架</p><p>Runtime.getRuntime().availableProcessors()<br>Arrays.parallelSetAll(array, i -&gt; i);</p><p>数组上的并行化操作：parallelPrefix, parallelSetAll, parallelSort</p><p>javafx.util.Pair使用</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java 8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《代码整洁之道》读书笔记</title>
      <link href="/2023/07/23/Reading-notes-for-Clean-code/"/>
      <url>/2023/07/23/Reading-notes-for-Clean-code/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候业务交付压力使得开发人员只关注了交付本身，而忽略了质量，但作为一名研发人员，质量上是不能够作让步的。有些业务金融敏感，搞砸了很可能损害公司商业利益，自己也丢掉饭碗。因此，重申质量的重要性是很有必要的。</p><p>质量是上百万次全身心投入的结果，需要落实到每天，每小时之中。开发工作中，我们通常会遇到2种情形，一种是新特性开发，特点是与原有代码关联较少，另一种是特性增强，需要改大量原有代码。开发人员通常会想先把功能开发完成，再去重构、优化，虽然说出发点不错，但稍后等于永不(Later equals never)。</p><p>这里我提出自己的想法，抛砖引玉。</p><ul><li>对于自己编写和改动的部分，有重构思路可以直接着手修改，不然拖到转测了后只会不了了之。对于非特性开发范围的不合理的代码，需要认真评估。<br>对于有把握的重构、优化(必须能够评估影响)，不要害怕修改。重构其实不意味着重写，提取方法，修改参数命名等等利用IDE是比较安全便捷的。我们要胆大心细，谨慎地修改，修改后一定要自测通过，确保DevOps测试用例通过，最好申请重构单号，单独做一次commit，在代码评审时请大家评审自己的改动。</li><li>对于无法评估的影响范围和后果的修改，坚决不修改，要学会敬畏，否则一个配置的改动将引发大灾难。</li></ul><p>作为开发，要做到小处诚实，放下身段，谦虚审慎承认代码现状，做到不自欺，而后思改进。</p><p>写代码跟写文章一样，结构条理清晰，如白居易的诗一样通俗易懂，代码即注释，注释太多可能预示着功能的难以理解，代码含义应由自身表达，重构时直接以用代码代替文字描述列大纲，从上到下去编写。<br>此外重构的过程，遵循小步快跑，重构完一个独立的代码片段应该及时验证。</p><h1 id="整洁代码定义"><a href="#整洁代码定义" class="headerlink" title="整洁代码定义"></a>整洁代码定义</h1><p>衡量代码质量的唯一有效标准：WTF/minute in code review，意思是代码评审者每分钟骂出”WTF”的频率=w=</p><p>写整洁代码，要遵循大量小技巧。</p><p>把写代码当成故事来讲，让听故事的人能够清晰的了解整个故事情节。</p><p>破窗理论：一栋建筑的窗户破了，如果没人去修理，那将越来越多人的破坏其他窗户。意思是环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。<br>代码开发中深受破窗理论影响，想必每个开发都会遇到代码中一串长长的if else if条件代码块在不断膨胀，因为人们刚开始觉得不对劲，但是想了想应该有历史原因而效仿着前辈，继续写着shit code，却没有人想着用多态或者查表得方式重构下。</p><h2 id="什么是整洁代码"><a href="#什么是整洁代码" class="headerlink" title="什么是整洁代码"></a>什么是整洁代码</h2><p>几乎没有改进的余地的代码即好代码</p><ul><li>通过所有测试</li><li>没有重复代码</li><li>体现系统中的全部设计理念</li></ul><p>所有程序都由极为相似的元素构成，如“在集合中查找某物”，一旦出现这种情况，可以把实现手段封装到更抽象的方法中。</p><p>一个人写代码的过程，读与写花费时间的比例超过10:1，因此要先让代码易读。<br>让营地比你来时更干净，消除重复和提高表达力。</p><h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><p><strong>名副其实</strong></p><ul><li>一旦发现更好的名称，就换掉旧的。</li><li>上下文在代码中要被明确的体现出来，降低代码的模糊度。</li></ul><p><strong>避免误导</strong><br>举例：accountList的list有特殊含义，考虑accounts, accountGroup, bunchOfAccounts</p><p><strong>做有意义的区分</strong><br>xxxInfo，xxxData是废话</p><p><strong>一些准则</strong></p><ul><li>使用读得出来的名称</li><li>使用可搜索的名称</li><li>避免使用新的编码约定</li><li>类名应是名词或名词短语</li><li>避免使用Manager, Processor等？</li><li>方法名应当是动词或动词短语</li><li>使用解决方案领域名称</li><li>添加有意义的语境</li><li>前缀不要添加没有用的语境，短名称足够清楚就比长名称好</li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>短小、还要更短小。100行以内，20行最佳</li><li>只做一件事。判断一个函数是否只做了一件事，就看是否能再拆出一个函数</li><li>每个函数一个抽象层级，自上而下读代码</li><li>Switch语句可以考虑利用多态，移动到工厂底下</li><li>使用描述性的名称，长而具有描述性的名称，比短而令人费解的名称好，比描述性的注释好；命名方式保持一致</li><li>函数参数<ul><li>函数参数尽量少，超过3个参数可以考虑参数对象的方式。没有参数时需要注意是否大量运用上下文，大量运用上下文不是一个好的设计。</li><li>标识参数丑陋不堪，不要往参数传入布尔值（意味着true做一件事，false做另一件事）</li><li>遵循数学约定表示，如new Point(x, y)也是见参知义。</li><li>动词、动名词做为参数名称</li><li>无副作用，函数只承诺做一件事，但实际是谎言。</li><li>避免使用输出参数。</li></ul></li><li>分隔指令（做某件事）与询问（判断语句）</li><li>使用异常替代错误码，因为返回错误码意味着可能要马上进行处理</li><li>抽离try/catch块</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>别给糟糕的代码加注释，重新写吧。</li><li>注释的恰当用法是弥补我们在用代码表达意图时遭遇的失败，注释总是一种失败。把力气用在写清楚代码上。</li></ul><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><ul><li>关系密切的概念和代码应该互相靠近，便于阅读理解，如函数调用，调用者放在被调用者的上面。</li><li>变量声明应该靠近使用的位置</li><li>遵循一个编程规约，如阿里Java编程规约</li></ul><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盘点Java项目中的线程池</title>
      <link href="/2023/07/23/Anylysis-thread-pool-of-java-project/"/>
      <url>/2023/07/23/Anylysis-thread-pool-of-java-project/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章主要梳理下一个项目的各种线程池，以及这些线程池如何配合着完成工作，都实现了些什么功能。文章主要着眼于整体的线程池设计，可能涉及具体线程池的实现，但不会做太深入的讲解，目的是让自己对整体项目有个线程池视角的全局观。</p><h1 id="线程池基本概念"><a href="#线程池基本概念" class="headerlink" title="线程池基本概念"></a>线程池基本概念</h1><p><strong>线程池是什么</strong><br>进程是内存分配的基本单位，而线程是CPU调度的基本单位，线程池通过预先维护一定数量的线程，减少线程创建与销毁的开销，提升响应速度，便于管理系统资源。</p><p><strong>线程池解决的问题是什么</strong><br>线程池解决的核心问题是资源管理的问题。并发环境下，系统无法确定某个时刻，有多少任务需要执行，有多少资源需要投入，而系统的资源是有限的，这个不确定性会带来以下问题：</p><ul><li>频繁的创建、调度、销毁资源，会带来额外的消耗，降低响应速度；</li><li>资源无限制的申请可能导致系统资源被耗尽。</li></ul><p><strong>应用</strong></p><blockquote><ul><li>数据库连接池</li><li>Tomcat处理线程池</li></ul></blockquote><h1 id="项目线程池的视图和分类"><a href="#项目线程池的视图和分类" class="headerlink" title="项目线程池的视图和分类"></a>项目线程池的视图和分类</h1><p>项目</p><h2 id="Tomcat线程池"><a href="#Tomcat线程池" class="headerlink" title="Tomcat线程池"></a>Tomcat线程池</h2><h2 id="项目请求处理线程池"><a href="#项目请求处理线程池" class="headerlink" title="项目请求处理线程池"></a>项目请求处理线程池</h2><h2 id="定时任务线程池"><a href="#定时任务线程池" class="headerlink" title="定时任务线程池"></a>定时任务线程池</h2><h2 id="数据库客户端连接线程池"><a href="#数据库客户端连接线程池" class="headerlink" title="数据库客户端连接线程池"></a>数据库客户端连接线程池</h2><h2 id="数据库服务端连接池"><a href="#数据库服务端连接池" class="headerlink" title="数据库服务端连接池"></a>数据库服务端连接池</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA个性化配置</title>
      <link href="/2023/07/14/Intellij-IDEA-custom-configurations/"/>
      <url>/2023/07/14/Intellij-IDEA-custom-configurations/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>文章记录我的Intellij IDEA配置，方便以后在新环境快速配置一个符合个人使用习惯的IDE</p><!-- toc --><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>通常的IDEA的配置分为三种：当前项目的全局设置，项目或Module的单独设置，新建项目的设置。</p><ul><li>全局设置快捷键：<code>Ctrl+Alt+S</code></li><li>项目或者Module设置快捷键：<code>Ctrl+Shift+Alt+S</code></li><li>新建项目的设置：<code>File -&gt; New Project Setup -&gt; Setting for New Project...</code></li></ul><h1 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK配置</h1><p>通常Intellij IDEA也会内置有JDK或者JRE环境，为了便于管理，建议使用自己PC下载的JDK和JRE</p><h2 id="1、当前项目的全局设置"><a href="#1、当前项目的全局设置" class="headerlink" title="1、当前项目的全局设置"></a>1、当前项目的全局设置</h2><p>JDK Importer<br>配置Maven下载依赖默认的JDK，配置路径：<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven | Importing</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142251679.png" alt=""></p><p>Java Compiler<br>Project bytecode version配置</p><p>配置路径：<code>File | Settings | Build, Execution, Deployment | Compiler | Java Compiler</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150206099.png" alt=""></p><p>Maven Runner<br>配置路径：<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven | Runner</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142254340.png" alt=""></p><h2 id="2、项目或Module的单独设置"><a href="#2、项目或Module的单独设置" class="headerlink" title="2、项目或Module的单独设置"></a>2、项目或Module的单独设置</h2><p>Project</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150157308.png" alt=""></p><p>Modules：可以设置不同的Module使用不同的配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150158511.png" alt="Sources"><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150158870.png" alt="Dependencies"></p><p>SDKs：多版本JDK管理</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150201185.png" alt=""></p><h2 id="3、新建项目的设置"><a href="#3、新建项目的设置" class="headerlink" title="3、新建项目的设置"></a>3、新建项目的设置</h2><p>注意新建项目配置面板是通过<code>File -&gt; New Project Setup -&gt; Setting for New Project...</code>方式打开，下面的配置与全局的类似。</p><p>JDK Importer<br>配置路径：<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven | Importing</code></p><p>Java Compiler<br>Project bytecode version配置</p><p>配置路径：<code>File | Settings | Build, Execution, Deployment | Compiler | Java Compiler</code></p><p>Maven Runner<br>配置路径：<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven | Runner</code></p><h1 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h1><p>需要配置的地方：</p><ul><li>当前项目的全局设置</li><li>新建项目的设置</li></ul><p>配置路径：<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven</code><br>设置Maven的home地址，修改Setting文件，以及Maven进行Jar包依赖下载时，可以设置<code>Thread Count</code>多线程方式加快下载速度.</p><p>可以输入CPU核心数2C或者线程数 8，根据PC性能设置即可。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142253846.png" alt=""></p><h1 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h1><p>需要配置的地方：</p><ul><li>当前项目的全局设置</li><li>新建项目的设置</li></ul><p><code>File | Settings | Build, Execution, Deployment | Build Tools | Gradle</code>下配置Gradle的根目录</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150133582.png" alt=""></p><h1 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h1><p>需要配置的地方：</p><ul><li>当前项目的全局设置</li></ul><h2 id="1、软件界面字体设置"><a href="#1、软件界面字体设置" class="headerlink" title="1、软件界面字体设置"></a>1、软件界面字体设置</h2><p>设置界面字体大小<code>File | Settings | Appearance &amp; Behavior | Appearance</code>，勾选<code>Use custom font</code>，仅修改字体大小：16或14。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142233356.png" alt=""></p><h2 id="2、代码文件字体设置"><a href="#2、代码文件字体设置" class="headerlink" title="2、代码文件字体设置"></a>2、代码文件字体设置</h2><p><code>File | Settings | Editor | Font</code>可以设置代码的字体类型、大小。</p><ul><li>字体类型：Consolas</li><li>字体大小：16，18均可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142218703.png" alt=""></p><p>通过鼠标滚动调节字体大小开关，根据需要打开。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142245046.png" alt=""></p><h2 id="3、控制台字体设置"><a href="#3、控制台字体设置" class="headerlink" title="3、控制台字体设置"></a>3、控制台字体设置</h2><p><code>File | Settings | Editor | Color Scheme | Console Font</code>下设置，默认配置挺合适，根据需要调整。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142242889.png" alt=""></p><h1 id="全局统一编码"><a href="#全局统一编码" class="headerlink" title="全局统一编码"></a>全局统一编码</h1><h2 id="1、项目文件编码配置"><a href="#1、项目文件编码配置" class="headerlink" title="1、项目文件编码配置"></a>1、项目文件编码配置</h2><p>需要配置的地方：</p><ul><li>当前项目的全局设置</li></ul><p>统一编码可以避免不必要的麻烦，将所有文件编码格式为UTF-8。<br>建议整个开发团队都勾选<code>Transparent-native-to-ascii</code>，否则properties文件中的中文将使用unicode编码进行展示。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142103136.png" alt=""></p><h2 id="2、设置控制台文字编码"><a href="#2、设置控制台文字编码" class="headerlink" title="2、设置控制台文字编码"></a>2、设置控制台文字编码</h2><p><code>File | Settings | Editor | General | Console</code>设置控制台日志的字体编码，尽管这个设置非必须，但是建议保持统一。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142239386.png" alt=""></p><h2 id="3、设置VM-Options编码"><a href="#3、设置VM-Options编码" class="headerlink" title="3、设置VM Options编码"></a>3、设置VM Options编码</h2><p>点击顶部菜单栏<code>Help-&gt;Edit Custom VM Options</code>，会打开下面的配置文件idea64.exe.vmoption<br><code>C:\Users\Tsukasa\AppData\Roaming\JetBrains\IdeaIC2023.1\idea64.exe.vmoptions</code></p><p>设置file.encoding为UTF-8：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142127194.png" alt=""></p><h2 id="4、IDEA安装目录下的idea64-exe-vmoptions也要设置文件编码"><a href="#4、IDEA安装目录下的idea64-exe-vmoptions也要设置文件编码" class="headerlink" title="4、IDEA安装目录下的idea64.exe.vmoptions也要设置文件编码"></a>4、IDEA安装目录下的idea64.exe.vmoptions也要设置文件编码</h2><p>配置文件：<code>C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.1.4\bin</code>，添加编码配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><h2 id="5、设置Tomcat-VM-Options"><a href="#5、设置Tomcat-VM-Options" class="headerlink" title="5、设置Tomcat VM Options"></a>5、设置Tomcat VM Options</h2><p>如果用Tomcat方式启动项目，也需要设置编码。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142208797.png" alt=""></p><h2 id="6、项目的-idea-encodings-xml文件中设置编码"><a href="#6、项目的-idea-encodings-xml文件中设置编码" class="headerlink" title="6、项目的.idea/encodings.xml文件中设置编码"></a>6、项目的.idea/encodings.xml文件中设置编码</h2><p>可以检查下文件是否有其他编码格式，结合实际项目情况再进行配置。<br><a href="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151024244.png">https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151024244.png</a><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150043883.png" alt=""></p><p>TIPS：IDEA中，在软件页面的右下角处，可以查看和设置当前打开文件的编码格式。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150033237.png" alt=""></p><p>文件编码设置完成后，重启IDEA。</p><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="1、配置显示内存使用情况"><a href="#1、配置显示内存使用情况" class="headerlink" title="1、配置显示内存使用情况"></a>1、配置显示内存使用情况</h2><p><code>Shift+Shift</code>按键直接输入<code>Show memory indicator</code>，打开开关即可。</p><h2 id="2、设置背景图片"><a href="#2、设置背景图片" class="headerlink" title="2、设置背景图片"></a>2、设置背景图片</h2><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150138213.png" alt=""></p><h2 id="3、控制台shell更换为git-bash"><a href="#3、控制台shell更换为git-bash" class="headerlink" title="3、控制台shell更换为git bash"></a>3、控制台shell更换为git bash</h2><p>配置位置：<code>File | Settings | Tools | Terminal</code>，更换shell path。可以设置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307141513510.png" alt=""></p><h2 id="4、文件标签多行显示"><a href="#4、文件标签多行显示" class="headerlink" title="4、文件标签多行显示"></a>4、文件标签多行显示</h2><p>一般项目比较大，需要打开很多个标签，可以设置最多允许打开的TAB数，以及分行显示。如下图，取消勾选<code>Show tabs in one raw</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150019838.png" alt=""></p><h2 id="5、代码补全大小写不敏感"><a href="#5、代码补全大小写不敏感" class="headerlink" title="5、代码补全大小写不敏感"></a>5、代码补全大小写不敏感</h2><p><code>File | Settings | Editor | General | Code Completion</code>，设置代码补全大小写不敏感</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142052496.png" alt=""></p><h2 id="6、统一设置Copyright"><a href="#6、统一设置Copyright" class="headerlink" title="6、统一设置Copyright"></a>6、统一设置Copyright</h2><p>公司项目，统一在设置CopyRight，配置路径：<code>File | Settings | Editor | Copyright</code></p><h2 id="7-代码模板"><a href="#7-代码模板" class="headerlink" title="7.代码模板"></a>7.代码模板</h2><p>配置路径：<code>File | Settings | Editor | File and Code Templates</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151529295.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Description message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Created in $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span>: Copyright (c) $&#123;YEAR&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span>: $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h1><p>通常地，IDEA内存需要根据计算机配置、项目占用内存情况来调整JVM参数，达到性能最优的效果。一般打开项目时可以现在VisualVM中查看项目内存占用状况，适当做出调整。</p><p>VisualVM：用于Java应用的性能分析和调优，可以到<a href="https://visualvm.github.io/download.html">官网</a>下载。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151545761.jpg" alt=""></p><p>配置文件：<br>32位系统，配置文件为IDEA安装目录的bin\idea.exe.vmoptions<br>64位系统，配置文件为IDEA安装目录的bin\idea64.exe.vmoptions</p><p>配置入口：</p><p>Maven的Runner配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151549498.png" alt=""></p><p>当前项目Run/Debug配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307151551310.png" alt=""></p><p>涉及的JVM参数：</p><table><thead><tr><th>JVM参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>Xms</td><td style="text-align:left">最小堆容量，初始化堆内存值</td></tr><tr><td>Xmx</td><td style="text-align:left">最大堆容量</td></tr><tr><td>XX:PermSize</td><td style="text-align:left">初始化的非堆内存</td></tr><tr><td>XX:MaxPermSize</td><td style="text-align:left">最大的非堆内存</td></tr></tbody></table><p>配置示例：</p><p>32位计算机的idea.exe.vmoptions配置示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xms200m</span><br><span class="line">-Xmx500m</span><br><span class="line">-XX:MaxPermSize=120m</span><br></pre></td></tr></table></figure><p>64位计算机的idea64.exe.vmoptions配置示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx750m</span><br><span class="line">-XX:ReservedCodeCacheSize=240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=<span class="literal">false</span></span><br><span class="line">-Djava.net.preferIPv4Stack=<span class="literal">true</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br></pre></td></tr></table></figure><h1 id="WGesture手势配置"><a href="#WGesture手势配置" class="headerlink" title="WGesture手势配置"></a>WGesture手势配置</h1><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307142308902.png" alt=""></p><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><p>安装插件路径：<code>File | Settings | Plugins</code></p><h2 id="常用插件列表"><a href="#常用插件列表" class="headerlink" title="常用插件列表"></a>常用插件列表</h2><table><thead><tr><th>名称</th><th style="text-align:left">描述</th><th style="text-align:left">地址</th></tr></thead><tbody><tr><td>MyBatisX</td><td style="text-align:left">Mybatis 增强工具包 - 只做增强不做改变，简化CRUD操作</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></td></tr><tr><td>Maven Helper</td><td style="text-align:left">开源认证，做Jar包依赖分析很有用，右键项目集成一些Maven的快捷命令操作</td><td style="text-align:left"><a href="https://github.com/krasa/MavenHelper">https://github.com/krasa/MavenHelper</a></td></tr><tr><td>Key Promoter X</td><td style="text-align:left">快捷键学习神器</td><td style="text-align:left"><a href="https://github.com/halirutan/IntelliJ-Key-Promoter-X/blob/master/README.md">https://github.com/halirutan/IntelliJ-Key-Promoter-X/blob/master/README.md</a></td></tr><tr><td>Arthas</td><td style="text-align:left">帮助开发人员解决基于 Java 的应用程序生产环境中的问题，而无需修改代码或重新启动服务器</td><td style="text-align:left"><a href="https://www.yuque.com/arthas-idea-plugin">https://www.yuque.com/arthas-idea-plugin</a></td></tr><tr><td>Sequence Diagram</td><td style="text-align:left">生成序列图</td><td style="text-align:left"><a href="http://vanco.github.io/SequencePlugin/">http://vanco.github.io/SequencePlugin/</a></td></tr><tr><td>GenerateSerialVersionUID</td><td style="text-align:left">自动生成随机serialVersionUUD</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid">https://plugins.jetbrains.com/plugin/185-generateserialversionuid</a></td></tr><tr><td>Translation</td><td style="text-align:left">集成了谷歌翻译、微软翻译、DeepL 翻译、有道翻译、百度翻译等众多翻译引擎，在你的 IDE 内随时对想要翻译的文本、代码注释、代码文档等进行翻译</td><td style="text-align:left"><a href="https://yiiguxing.github.io/TranslationPlugin/#/docs">https://yiiguxing.github.io/TranslationPlugin/#/docs</a></td></tr><tr><td>Rainbow Brackets</td><td style="text-align:left">括号和双标签上色</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets</a></td></tr><tr><td>Presentation Assistant</td><td style="text-align:left">演示必备插件，在屏幕上显示按下的快捷键</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/7345-presentation-assistant">https://plugins.jetbrains.com/plugin/7345-presentation-assistant</a></td></tr><tr><td>Grep Console</td><td style="text-align:left">Grep、tail、过滤器、突出显示</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/7125-grep-console">https://plugins.jetbrains.com/plugin/7125-grep-console</a></td></tr><tr><td>jclasslib Bytecode Viewer</td><td style="text-align:left">Java 类文件的字节码查看工具</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></td></tr><tr><td>RestfulTool</td><td style="text-align:left">Restful服务开发的一套辅助工具</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></td></tr><tr><td>LeetCode with labuladong</td><td style="text-align:left">刷题必备，基于LeetCode Editor开发的labuladong 的刷题全家桶</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/19317-leetcode-with-labuladong">https://plugins.jetbrains.com/plugin/19317-leetcode-with-labuladong</a></td></tr><tr><td>String Manipulation</td><td style="text-align:left">大小写切换、排序、过滤、递增、对齐列、grepping、转义、编码等</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></td></tr><tr><td>IDEA Mind Map</td><td style="text-align:left">阅读和编写思维导图</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/8045-idea-mind-map">https://plugins.jetbrains.com/plugin/8045-idea-mind-map</a></td></tr><tr><td>CheckStyle-IDEA</td><td style="text-align:left">CheckStyle，统一代码风格</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></td></tr><tr><td>CodeGlance Pro</td><td style="text-align:left">支持滚动条预览，方便找到代码片段</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/18824-codeglance-pro">https://plugins.jetbrains.com/plugin/18824-codeglance-pro</a></td></tr><tr><td>JPA Buddy</td><td style="text-align:left">帮助开发人员在 Java 和 Kotlin 中高效地使用 Hibernate、EclipseLink、Spring Data JPA、Flyway、Liquibase、Lombok、MapStruct 以及其他相关技术</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/15075-jpa-buddy">https://plugins.jetbrains.com/plugin/15075-jpa-buddy</a></td></tr><tr><td>One Dark</td><td style="text-align:left">一款暗黑主题</td><td style="text-align:left"><a href="https://github.com/atom/one-dark-syntax">https://github.com/atom/one-dark-syntax</a></td></tr><tr><td>Gerry Themes</td><td style="text-align:left">一款高分的主题，免费版提供10种配色方案</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/18922-gerry-themes">https://plugins.jetbrains.com/plugin/18922-gerry-themes</a></td></tr><tr><td>.ignore</td><td style="text-align:left">提供.gitignore等等模板，推荐</td><td style="text-align:left"><a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></td></tr></tbody></table><p>上面插件根据需要安装和开启，避免过多占用内存和CPU，降低IDE响应效率。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>快捷键查找和设置路径：<code>File | Settings | Keymap</code></p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307150229472.png" alt=""></p><h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">功能</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td><code>Ctrl+Shift+\</code></td><td style="text-align:left">Select File in Project View</td><td style="text-align:left">在Project中快速定位到当前打开文件的所在路径</td></tr><tr><td><code>Ctrl+Shift+Alt+O</code></td><td style="text-align:left">Show in Explorer</td><td style="text-align:left">选中的文件在Windows文件浏览器中打开</td></tr></tbody></table><h2 id="查找与定位"><a href="#查找与定位" class="headerlink" title="查找与定位"></a>查找与定位</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Ctrl+Shift+F</code></td><td style="text-align:left">全局搜索</td></tr><tr><td><code>双击SHIFT</code></td><td style="text-align:left">在项目的所有目录查找文件，Search Everywhere</td></tr><tr><td><code>Ctrl+E</code></td><td style="text-align:left">最近打开的文件，结合输入可以很方便搜索类，配置文件等</td></tr><tr><td><code>Ctrl+G</code></td><td style="text-align:left">跳到自定义的行列位置</td></tr><tr><td><code>Ctrl+Alt+B</code></td><td style="text-align:left">跳转到实现类或实现方法</td></tr><tr><td><code>Ctrl+B</code></td><td style="text-align:left">跳转到接口类或者接口方法</td></tr><tr><td><code>Ctrl+N</code></td><td style="text-align:left">查找Class</td></tr><tr><td><code>Ctrl+Shift+Alt+N</code></td><td style="text-align:left">查找Symbol，如当前类下的方法、变量、常量等</td></tr><tr><td><code>Ctrl+Shift+A</code></td><td style="text-align:left">查找Action</td></tr><tr><td><code>F3</code></td><td style="text-align:left">Ctrl+F搜索时按F3为下一个，Shift+F3为向上一个</td></tr><tr><td><code>Ctrl+F12</code></td><td style="text-align:left">查看文件结构，在Class文件中输入快捷键则弹窗展示当前类的结构</td></tr><tr><td><code>Alt+F7</code></td><td style="text-align:left">查找代码中哪里有使用，Find Usage，选中查找结果F4进入源码</td></tr><tr><td><code>Ctrl+Shift+R</code></td><td style="text-align:left">项目所有文件的查找并替换，replace in path</td></tr><tr><td><code>Ctrl+R</code></td><td style="text-align:left">当前打开文件下查找并替换</td></tr><tr><td><code>Ctrl+H</code></td><td style="text-align:left">显示类结构图</td></tr><tr><td><code>Ctrl+Shift+N</code></td><td style="text-align:left">查找文件名</td></tr><tr><td><code>F11</code></td><td style="text-align:left">添加/删除书签</td></tr></tbody></table><h2 id="打开窗口"><a href="#打开窗口" class="headerlink" title="打开窗口"></a>打开窗口</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Shift+F11</code></td><td style="text-align:left">弹出bookmarks</td></tr><tr><td><code>Alt+F12</code></td><td style="text-align:left">打开Terminal控制台</td></tr><tr><td><code>Alt+1</code></td><td style="text-align:left">打开Project视图</td></tr><tr><td><code>Alt+2</code></td><td style="text-align:left">打开favorite</td></tr><tr><td><code>Alt+6</code></td><td style="text-align:left">打开Problem视图，可以查看Todo</td></tr><tr><td><code>Alt+7</code></td><td style="text-align:left">打开Structure视图</td></tr><tr><td><code>Alt+9</code></td><td style="text-align:left">打开版本控制视图Version Control</td></tr><tr><td><code>F4</code></td><td style="text-align:left">在Project窗口F4，即打开项目或者Module设置</td></tr><tr><td><code>Ctrl+Alt+S</code></td><td style="text-align:left">打开IDEA全局设置</td></tr><tr><td><code>Ctrl+Alt+Shift+S</code></td><td style="text-align:left">打开IDEA项目设置</td></tr></tbody></table><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Ctrl+Shift+T</code></td><td style="text-align:left">创建或者打开Test类或者方法</td></tr><tr><td><code>Ctrl+O</code></td><td style="text-align:left">重写方法</td></tr><tr><td><code>Ctrl+Alt+V</code></td><td style="text-align:left">提取变量，Introduce Variable</td></tr><tr><td><code>Ctrl+Alt+C</code></td><td style="text-align:left">提取常量，Introduce Constant</td></tr><tr><td><code>Ctrl+Alt+F</code></td><td style="text-align:left">提取属性，Introduce Field</td></tr><tr><td><code>Ctrl+F6</code></td><td style="text-align:left">修改方法签名（名称，参数，返回值，异常等）</td></tr><tr><td><code>Ctrl+Alt+Shift+P</code></td><td style="text-align:left">引入函数参数，Introduce Functional Parameter</td></tr><tr><td><code>Ctrl+Alt+M</code></td><td style="text-align:left">提取方法，Extract Method</td></tr><tr><td><code>Alt+Delete</code></td><td style="text-align:left">安全删除</td></tr><tr><td><code>Ctrl+Alt+N</code></td><td style="text-align:left">内联方法，Inline Method</td></tr></tbody></table><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Alt+Insert</code></td><td style="text-align:left">创建构造方法、Getter/Setter等</td></tr><tr><td><code>Ctrl+Y</code></td><td style="text-align:left">删除行</td></tr><tr><td><code>Ctrl+D</code></td><td style="text-align:left">duplicate line or Selection，往下复制一行</td></tr><tr><td><code>Ctrl+W</code></td><td style="text-align:left">逐渐扩大选择范围，加上Shift是逐渐扩小选择范围</td></tr><tr><td><code>Ctrl+P</code></td><td style="text-align:left">在调用的方法上面执行，显示方法参数</td></tr><tr><td><code>Ctrl+Enter</code></td><td style="text-align:left">当前位置右边另起一行</td></tr><tr><td><code>Shift+Enter</code></td><td style="text-align:left">另起一行</td></tr><tr><td><code>Alt+左/右</code></td><td style="text-align:left">左右切换TAB标签</td></tr><tr><td><code>Alt+上/下</code></td><td style="text-align:left">切换上一个/下一个方法</td></tr><tr><td><code>Alt+上/下</code></td><td style="text-align:left">切换上一个/下一个方法</td></tr><tr><td><code>Ctrl+上/下</code></td><td style="text-align:left">相当于鼠标滚轮</td></tr><tr><td><code>Ctrl+左/右</code></td><td style="text-align:left">往左/往右跳一个单词</td></tr><tr><td><code>Ctrl+Delete</code></td><td style="text-align:left">删除光标后面一个单词</td></tr><tr><td><code>Ctrl+Backspace</code></td><td style="text-align:left">删除光标前面一个单词</td></tr><tr><td><code>Shift+Home/End</code></td><td style="text-align:left">选中当前行光标左边的部分/右边的内容</td></tr><tr><td><code>Ctrl+/</code></td><td style="text-align:left">注释</td></tr><tr><td><code>Ctrl+Alt+左/右</code></td><td style="text-align:left">光标位置的前进与后退，阅读代码经常用到</td></tr><tr><td><code>Ctrl+Shift+E</code></td><td style="text-align:left">显示编辑过位置</td></tr><tr><td><code>Ctrl+Shift+V</code></td><td style="text-align:left">打开剪切板历史记录</td></tr><tr><td><code>Ctrl+Shift+Enter</code></td><td style="text-align:left">自动补全当前行，然后光标移动到最后</td></tr><tr><td><code>Ctrl+Alt+Enter</code></td><td style="text-align:left">向上空出一行</td></tr><tr><td><code>Ctrl+Shift+U</code></td><td style="text-align:left">大小写转换</td></tr><tr><td><code>Ctrl+Alt+T</code></td><td style="text-align:left">用if/while/try catch等代码块包裹，Surround with …</td></tr><tr><td><code>Shift+F6</code></td><td style="text-align:left">重命名文件/文件夹</td></tr><tr><td><code>Shift+TAB</code></td><td style="text-align:left">取消缩进</td></tr><tr><td><code>Ctrl+Shift+C</code></td><td style="text-align:left">复制文件/目录磁盘路径到剪贴板</td></tr><tr><td><code>Ctrl+Shift+V</code></td><td style="text-align:left">弹出剪贴板</td></tr><tr><td><code>Ctrl+Alt+Shift+左/右</code></td><td style="text-align:left">交换方法参数位置</td></tr><tr><td><code>Ctrl+[或]</code></td><td style="text-align:left">定位括号开始和结束</td></tr></tbody></table><h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Ctrl+Alt+L</code></td><td style="text-align:left">格式化代码，可以在当前文件或包目录上执行</td></tr><tr><td><code>Ctrl+Alt+O</code></td><td style="text-align:left">优化导包</td></tr><tr><td><code>Ctrl+Alt+I</code></td><td style="text-align:left">光标所在行代码自动缩进</td></tr><tr><td><code>Ctrl+Alt+H</code></td><td style="text-align:left">调用层次，类内部使用</td></tr></tbody></table><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Shift+Alt+N</code></td><td style="text-align:left">新建一个task，比如当前打开了10个文件在做订单支付，我不想关闭这些文件，新建一个任务就好，下次切换到这个任务时10个文件也可以打开</td></tr><tr><td><code>Ctrl+K</code></td><td style="text-align:left">提交代码，打开Commit窗口</td></tr></tbody></table><h2 id="代码调试Debug"><a href="#代码调试Debug" class="headerlink" title="代码调试Debug"></a>代码调试Debug</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>F7</code></td><td style="text-align:left">步进，当前断点行如果为方法，则进入方法体内，但不会进入该方法体内的方法</td></tr><tr><td><code>F8</code></td><td style="text-align:left">步进，当前断点行如果为方法，不会进入方法内</td></tr><tr><td><code>F9</code></td><td style="text-align:left">跳转到下一个断点</td></tr><tr><td><code>Shift+F7</code></td><td style="text-align:left">步入，断点所在行有多个方法调用，会弹出进入哪个方法</td></tr><tr><td><code>Shift+F8</code></td><td style="text-align:left">跳出，与F9效果相同</td></tr><tr><td><code>Shift+F9</code></td><td style="text-align:left">等效于工具栏的Debug按钮</td></tr><tr><td><code>Shift+F10</code></td><td style="text-align:left">等效于工具栏的Run按钮</td></tr><tr><td><code>Ctrl+Shift+F8</code></td><td style="text-align:left">打开所有断点设置窗口</td></tr></tbody></table><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><table><thead><tr><th>快捷键</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td><code>Ctrl+Shift+F9</code></td><td style="text-align:left">编译选中的文件/包/Module</td></tr><tr><td><code>Ctrl+Shift+F12</code></td><td style="text-align:left">编辑器最大化</td></tr></tbody></table><h1 id="配置迁移"><a href="#配置迁移" class="headerlink" title="配置迁移"></a>配置迁移</h1><p>IDEA的配置文件idea.properties默认的config如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</span><br><span class="line">idea.plugins.path=$&#123;idea.config.path&#125;/plugins</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法一：直接拷贝</p><p>拷贝原来的Config和Plugin文件，重新指定下路径可以快速完成迁移。<br>本人的Intellij IDEA配置路径：<code>C:\Users\Tsukasa\AppData\Roaming\JetBrains\IdeaIC2023.1</code></p><p>方法二：通过<code>Export Settings...</code>功能导出配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307262350302.png" alt=""></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://shortcutworld.com/IntelliJ-IDEA/win/IntelliJ_Shortcuts">Intellij IDEA快捷键</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github和PicGo搭建图床</title>
      <link href="/2023/07/14/Use-Github-and-PicGo-to-integrate-picture-bed/"/>
      <url>/2023/07/14/Use-Github-and-PicGo-to-integrate-picture-bed/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录自己使用Github和PicGo搭建图床，手机使用，以及一些个性化配置，方便在新环境重新搭建。</p><p>使用到的几个工具：</p><p>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具。<br>Github：在这里作为图床，用于存储图片<br>Flutter-PicGo: 一个用于快速上传图片并获取图片URL链接的手机版工具，这里用于手机<del>涩图</del>图片的保存<br>JSDeliver：一个用于开源项目的免费CDN，这里用于GitHub图床加速，非必须。</p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>大致分为3个步骤，具体可以参考官方文档和别人写的博客，很详细了不加赘述。</p><ul><li>Github创建图床仓库，生成并记录Access token</li><li>PicGo上配置GitHub的图床仓库，配置access token用于图床仓库的访问</li><li>Flutter-PicGo安装到手机上，扫描PicGo PC端生成的配置二维码完成手机端配置</li></ul><p>教程参考：</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">官方教程搭建GitHub图床</a><br><a href="https://zhuanlan.zhihu.com/p/347342082">如何利用 Github 搭建自己的免费图床？</a></p><p>搭建过程中如果不熟悉，可以不用一步到位，可以先默认，配置成功后在自定义，配置CDN加速。</p><h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><h3 id="GitHub图床配置"><a href="#GitHub图床配置" class="headerlink" title="GitHub图床配置"></a>GitHub图床配置</h3><p>CDN加速地址规则：<code>https://cdn.jsdelivr.net/gh/&#123;GitHub帐户&#125;/&#123;图床仓库名&#125;</code></p><p>写出自己的CDN加速地址：<br><code>https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe</code></p><p>GitHub个人图床仓库：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/TsukasaMoe/PicturesOfTsukasaMoe.git</span><br><span class="line">git@github.com:TsukasaMoe/PicturesOfTsukasaMoe.git</span><br></pre></td></tr></table></figure></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>原生的Github Uploader只支持上传图片而不支持删除，因此推荐支持上传和删除图片的<a href="https://github.com/zWingz/picgo-plugin-github-plus">github-plus插件</a></p><p>附上：<a href="https://github.com/PicGo/Awesome-PicGo">PicGo插件列表</a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>下面的是个人的配置（Github和Github-plus两个Uploader用法相同），在上传图片之前选定对应的配置，这样就能够传到对应的目录下了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;github&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_configName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;色气可爱的老婆们&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github生成的Access token，请替换&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;erocutewifes/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c3778d30-bc65-4836-8bf6-418b3eeea128&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_createdAt&quot;</span><span class="punctuation">:</span> <span class="number">1689265763160</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_updatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1689266184223</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_configName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;headers&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github生成的Access token，请替换&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;headers/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ed98bed1-a665-45d9-a352-7c53d4b854f1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_createdAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268245274</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_updatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268260929</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_configName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;others&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github生成的Access token，请替换&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/others&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a9181327-92e2-4d2a-b16f-89c5a216e87f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_createdAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268305137</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_updatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268315947</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_configName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icons&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github生成的Access token，请替换&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icons/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;648c75e8-020f-40c5-ac38-565e94eaa9bc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_createdAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268367750</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_updatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1689268367750</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_configName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tech&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tech/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsukasaMoe/PicturesOfTsukasaMoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github生成的Access token，请替换&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b39774a6-1015-4f88-8f51-102877a5282e&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_createdAt&quot;</span><span class="punctuation">:</span> <span class="number">1689303337162</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_updatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1689303337162</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c3778d30-bc65-4836-8bf6-418b3eeea128&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h3><p>PicGo配置文件地址：<code>%APPDATA%\picgo\data.json</code></p><p>PicGo客户端个性化配置：</p><ul><li>开机自启</li><li>时间戳重命名（不用开启上传前命名==&gt;可以手动）</li><li>Mini窗口置顶：悬浮球置顶，上传图片可以直接拖拽进去，掌握快捷键后不用开启</li><li>上传后自动复制URL</li><li>选择显示图床只勾选使用的</li><li>关闭自动更新检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307141350496.png" alt="PicGo客户端个性化配置"></p><p>上传热键默认为Ctrl+Shift+P，可以重新设置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307141400277.png" alt="热键默认为Ctrl+Shift+P，可以重新设置"></p><h2 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h2><h3 id="图床设置-GitHub"><a href="#图床设置-GitHub" class="headerlink" title="图床设置 - GitHub"></a>图床设置 - GitHub</h3><p>打开图床配置二维码，或者将github图床配置信息导出填写好，通过<a href="https://cli.im/">草料</a>转换成二维码，APP中扫码配置即可。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307141412478.png" alt=""></p><h3 id="App内进行PicGo设置"><a href="#App内进行PicGo设置" class="headerlink" title="App内进行PicGo设置"></a>App内进行PicGo设置</h3><ul><li>设置时间戳重命名</li><li>仅删除本地图片：即删除图片时不会删除图床的照片。</li></ul><p>接下来就可以愉快的上传你喜欢的涩图啦w</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307141418757.jpg" alt=""></p><h1 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h1><p>快捷的上传方式</p><ul><li>做好个性化设置后，只要选中图片，或者剪切板复制了图片，又或者是复制了网上的图片链接，选好图床配置（上传到的图床目录），直接执行热键即可马上传输，传输完成后会自动复制上传好的图片地址到剪切板。</li><li>拖拽到图标、拖拽到图片上传区，或者传统的打开文件系统选择图片，都可以实现上传。</li></ul><p>相册管理页面：可以实现上传图片的预览，以及复制从PicGo PC端上传的图片，删除是仅将预览删除，不会删除远端图床的图片，如果想要删除，需要手动执行git命令删除，然后推送到远端。</p><p>手机端使用：通常手机内存有限，如果发现有好的涩图，需要保存起来可以暂时把GitHub图传作为一个中转站，当然建议定期复制图片到硬盘或同步到网盘更好。</p><p>注意：GitHub图床设置为公开，所以尽量不要上传带有个人隐私、安全等相关图片，避免泄露。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/PicGo/PicGo-Core">PicGo项目的GitHub仓库</a><br><a href="https://github.com/PicGo/flutter-picgo">Flutter-PicGo手机app</a><br><a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo插件开发指南</a><br><a href="https://github.com/PicGo/Awesome-PicGo">PicGo插件列表合集</a><br><a href="https://www.jsdelivr.com/?docs=gh">JSDeliver官网</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git进阶知识总结</title>
      <link href="/2023/07/10/record-some-normal-command-of-git/"/>
      <url>/2023/07/10/record-some-normal-command-of-git/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>平常工作经常需要与Git打交道，记录一些常用的命令和使用场景。</p><h1 id="GitHub配置公钥用于下载代码仓"><a href="#GitHub配置公钥用于下载代码仓" class="headerlink" title="GitHub配置公钥用于下载代码仓"></a>GitHub配置公钥用于下载代码仓</h1><p>如果代码要同步到远程仓库，需要在远程代码仓库托管平台（如Gitlab, GitHub, Gitee）要添加本地公钥，基本步骤是本地生成一对RSA密钥，然后将公钥添加到远程仓库代码托管平台。<br>下面以Github为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.配置用户名和邮箱地址，提交代码时的用户，与代码托管平台如github的账户无关联</span></span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@xx.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.本地生成RSA私钥对</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;example@xx.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者采用</span></span><br><span class="line">ssh-keygen -m PEM -t rsa -b 4096 -C &quot;example@xx.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.代码托管平台添加rsa公钥id_rsa.pub</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.验证配置结果</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -T git@github.com</span></span><br><span class="line">Hi TsukasaMoe! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1.第一次同步远程仓库代码</strong></p><p>生成新密钥，在GitHub配置好公钥后，第一次用git clone拉取代码仓时可能会遇到下面提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (20.205.243.166)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span><br></pre></td></tr></table></figure><p>原因是rsa密钥对所在目录~/.ssh下没有known_hosts文件，输入yes即可生成。</p><p><strong>2.Git bash中文乱码问题</strong></p><p>如果有中文乱码问题可以设置下编码格式：</p><ol><li>Git bash 中右键，选择“Option”</li><li>选择“Text”,设置字符编码为UTF-8</li></ol><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>global：配置文件在~/.gitconfig文件下<br>system：用户级别<br>local：项目级别，在当前项目的.git/config文件下</p><p>配置优先级别：local&gt;system&gt;global</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --local user.name &quot;xxx&quot;</span><br><span class="line">git config --local user.email &quot;xxx@xx.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分支-git-branch"><a href="#分支-git-branch" class="headerlink" title="分支 git branch"></a>分支 git branch</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch -a</span><br><span class="line">git branch -av</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆仓库到本地</span></span><br><span class="line">git clone git@github.com:square/okhttp.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支最后一次提交</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地分支关联的远程仓库</span></span><br><span class="line">git branch -vv</span><br><span class="line">git remote show origin</span><br><span class="line">cat .git/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建分支</span></span><br><span class="line">git branch mybranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名分支</span></span><br><span class="line">git branch -m mybranch dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支</span></span><br><span class="line">git checkout mybranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line">git branch -d mybranch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除分支</span></span><br><span class="line">git branch -D mybranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关联当前分支到远程分支</span></span><br><span class="line">git branch --set-upstream-to=origin&lt;分支名称&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：git branch --set-upstream debug origin/debug</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换分支：https://www.cnblogs.com/mcat/p/5831212.html</span></span><br><span class="line">git checkout -b mybranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程分支最新内容</span></span><br><span class="line">git pull</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="标签-git-tag"><a href="#标签-git-tag" class="headerlink" title="标签 git tag"></a>标签 git tag</h1><p>项目发布时，一般会打标签标明版本，针对整个项目，与具体分支无关。</p><p>.git/refs/tags下记录了创建的标签</p><p>简单标签：只存储commit的sha1值<br>带注释的标签：存储了带注释的信息，包含commit的sha1值（创建一个新的commit）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打简单标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打标签加注释</span></span><br><span class="line">git tag -a xxx -m &quot;xxx&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">误打标签</span></span><br><span class="line">git tag v2.0 v1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询标签</span></span><br><span class="line">git tag -l</span><br><span class="line">git show v1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">支持通配符进行查询</span></span><br><span class="line">git tag -l &#x27;1.*&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除标签，远程仓库可以直接在托管平台删除或创建标签</span></span><br><span class="line">git push origin :refs/tags/v1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程的标签删除后，本地无法感知，可通过下面命令手动删除</span></span><br><span class="line">git tag -d v1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送所有tags变更到远端</span></span><br><span class="line">git push --tags</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只推送某些标签到远端</span></span><br><span class="line">git push origin v1.0</span><br><span class="line">git push origin v1.0 v2.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整写法</span></span><br><span class="line">git push origin refs/tags/v1.0:refs/tags/v1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只获取远程标签</span></span><br><span class="line">git fetch origin tag v1.0</span><br><span class="line">git fetch origin tag</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分支合并与冲突"><a href="#分支合并与冲突" class="headerlink" title="分支合并与冲突"></a>分支合并与冲突</h1><p>分支：一个commit链，一条工作线。</p><p><strong>1.合并无冲突场景：</strong><br>如果一个分支靠前（dev），另一个分支落后（master），master合并dev分支后直接追赶上dev分支，成为fast forward。可以用git log查看commit id变化情况。</p><p>fast forward本质是分支指针的移动。</p><ul><li>两个分支fast forward归于一点，指向同一个commit</li><li>没有分支信息（丢失分支信息）</li></ul><p>git在merge时，默认使用fast forward，也可以禁止：git merge –no-ff &lt;分支&gt;</p><ul><li>两个分支的fast forward不会归于一点，主动合并的分支会前进一步，指向最新的commit</li><li>分支信息完整（不会丢失分支信息），可以用git log –graph查看</li></ul><p><strong>2.合并有冲突：</strong><br>需要解决冲突：git add xxx, git commit -m “xxx”<br>注意：master在merge时，遇到冲突并解决后，会进行2次提交，1次是最终提交，另一次是将dev分支的提交信息也拿过来。</p><p>如果一个分支落后（dev），另一个分支领先（master），则落后的分支可以直接通过git merge合并领先分支，不会报冲突，也是采用fast forward的方式合并。</p><p>.git文件夹下的HEAD文件记录了当前分支的Head</p><h1 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h1><p>回退和前进到对应的commit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加到暂存区并提交</span></span><br><span class="line">git commit -am &quot;xxxx&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改上一次提交的commit注释</span></span><br><span class="line">git commit --amend -m &quot;xxxx&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到上两次commit</span></span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到上n次commit</span></span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到某个commit，通过sha1值，无需写完整的commit <span class="built_in">id</span></span></span><br><span class="line">git reset --hard  4c03f5c6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git reset –hard的后悔药：git reflog<br>git reflog记录了git的所有操作，包括commit，reset等，找到需要回退到的commit id，使用git reset –hard进行回退。</p><h1 id="git-checkout的放弃与游离操作"><a href="#git-checkout的放弃与游离操作" class="headerlink" title="git checkout的放弃与游离操作"></a>git checkout的放弃与游离操作</h1><p>取消工作区的修改，暂存区的修改会保留<br>git checkout filename</p><p>git reset HEAD filename，将之前增加到暂存区的内容，回退到工作区。</p><p>git checkout还可以进行版本穿梭（游离状态）</p><p>git checkout <commitid>后</p><ul><li>修改后必须commit，提交后可以用<code>git branch mybranch &lt;刚才生成的commit id&gt;</code>，生成新分支</li><li>可以用<code>git checkout -b &lt;新分支名称&gt;</code>创建新分支，再进行修改等操作</li></ul><h1 id="git-log操作"><a href="#git-log操作" class="headerlink" title="git log操作"></a>git log操作</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看倒数第n次提交 git <span class="built_in">log</span> -n</span></span><br><span class="line">git log -1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程仓库分支的日志</span></span><br><span class="line">git log refs/remotes/origin/master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tree和parent对象</span></span><br><span class="line">git log --pretty=raw &lt;commit&gt;</span><br><span class="line">git log --pretty=raw</span><br></pre></td></tr></table></figure><p>git blame：查询文件编辑历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件的所有提交commit <span class="built_in">id</span>，以及每一行的作者</span></span><br><span class="line">git blame 1.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>diff: 比较文件<br>git diff: 比较工作区与暂存区中的文件差异，通常用IDE或者beyond compare等软件进行差异比较更直观。<br>git diff –cached：比较对象区和暂存区的差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对象区和暂存区的差异</span></span><br><span class="line">git diff --cached &lt;commit id&gt;</span><br><span class="line">git diff --cached HEAD</span><br></pre></td></tr></table></figure><h1 id="个人远程仓库回退"><a href="#个人远程仓库回退" class="headerlink" title="个人远程仓库回退"></a>个人远程仓库回退</h1><p>工作中每个人有自己的远程仓库，有时候自己作死做了一些危险的操作，导致个人远程仓库的master分支与主仓库的有差别，不能够发起merge request，需要重写覆盖，下面命令不要在项目的远程仓库执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到需要回退commitId</span></span><br><span class="line">git reflog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制回退</span></span><br><span class="line">git reset --hard &#123;commiId&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送到远程仓库</span></span><br><span class="line">git push -u &#123;远程仓库名&#125; &#123;远程仓库分支&#125; -f </span><br><span class="line">git push -f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="删除github对象区的某个文件"><a href="#删除github对象区的某个文件" class="headerlink" title="删除github对象区的某个文件"></a>删除github对象区的某个文件</h1><p><code>git rm</code>: 如果文件已经在对象区，执行删除操作会放到暂存区。<br>如果想要放回到工作区：<code>git restore --staged &lt;file&gt;</code><br>放回工作区后，如果不想删除文件了：<code>git restore &lt;file&gt;</code><br>放回工作区后，如果想要放回暂存区，可以执行：<code>git add/rm &lt;file&gt;</code></p><p><code>git rm --cache</code>: 仅从索引中（暂存区）删除文件，本地文件（工作区中）保留，适用于不将该文件被版本控制。<br><code>rm</code>: 本地删除文件，但是没有将其从git的记录中删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 1.txt</span><br><span class="line">git commit -m &quot;变更描述&quot;</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">git rm 1.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="保存现场-git-stash"><a href="#保存现场-git-stash" class="headerlink" title="保存现场 git stash"></a>保存现场 git stash</h1><p>如果两个分支不在同一个commit上，暂存区有内容则不能切换分支，可以先commit或者stash后再切换，恢复现场的内容会进入工作区。</p><p>如果两个分支在同一个commit上，在commit之前，可以checkout.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时保存到栈中</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看有哪些临时保存内容</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原最新保存的内容，该保存内容会删除（出栈）</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原保存的内容，但是不会将该内容删除（出栈）</span></span><br><span class="line">git stash apply</span><br><span class="line">git stash apply stash&#123;1&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除保存的内容</span></span><br><span class="line">git stash drop stash&#123;0&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存现场时可以指定名字</span></span><br><span class="line">git stash save &quot;mystash&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="远程仓库-git-remote"><a href="#远程仓库-git-remote" class="headerlink" title="远程仓库 git remote"></a>远程仓库 git remote</h1><p>git push：本地提交推送到远程仓库<br>git pull：远程仓库到本地，拉取fetch+合并merge。</p><p>git stash冲突：保存现场后修改了内容并commit，然后再还原现场导致的冲突场景。解决冲突后需要git add，commit。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置远程仓库名称为origin，地址（或者https协议）</span></span><br><span class="line">git remote add origin git@github.com:TsukasaMoe/tsukasamoe.github.io.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送本地master分支到远程仓库origin，-u表示后续不用加参数，直接git push即可</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程仓库有哪些</span></span><br><span class="line">git remote show</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看具体的远程仓库origin信息，包括查看远程仓库是否有更新</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="本地分支与远程分支关联操作"><a href="#本地分支与远程分支关联操作" class="headerlink" title="本地分支与远程分支关联操作"></a>本地分支与远程分支关联操作</h1><p>三个分支：</p><ul><li>远程分支</li><li>追踪分支：本地的远程分支，或者说感知分支</li><li>本地分支：需要通过追踪分支感知远程分支</li></ul><p>本地创建分支dev，在dev中提交了一些修改后，不能直接git push，解决办法有两种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.本地创建dev分支，在dev中提交了一些修改后，首次push需要先创建远程仓库，并指定远程仓库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dev分支是否有修改不是必须的，可以直接推送新分支到远程仓库</span></span><br><span class="line">git remote add origin git@github.com:TsukasaMoe/tsukasamoe.github.io.git</span><br><span class="line">git push -u origin dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.将dev分支关联到远程仓库origin</span></span><br><span class="line">git push --set-upstream origin dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首次拉取远程仓库时，可以进行本地分支关联远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法一：创建分支dev并和远程仓库的dev分支关联</span></span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二：创建追踪分支</span></span><br><span class="line">git checkout -b test --track origin/dev</span><br><span class="line">git checkout --track origin/dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果远程有新分支dev2，可以一步到位进行关联，src:desc</span></span><br><span class="line">git pull origin dev2:dev</span><br></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地分支</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地分支推送到远程仓库origin下的目标分支</span></span><br><span class="line">git push origin 本地分支:目标分支</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远端分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法一：将远程仓库下的<span class="built_in">test</span>分支删除，可以理解为本地分支为空，即删除远程分支<span class="built_in">test</span></span></span><br><span class="line">git push origin :test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二</span></span><br><span class="line">git push origin --delete 远程分支</span><br></pre></td></tr></table></figure><p>本地通过.git/refs/remote/origin目录进行远端分支的感知，创建一个感知远程仓库分支的本地分支</p><p><code>git fetch origin master:refs/remotes/origin/test</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测本地没有关联的远程分支</span></span><br><span class="line">git remote prune origin --dry-run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理无效的追踪分支</span></span><br><span class="line">git remote prune origin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="别名-alias"><a href="#别名-alias" class="headerlink" title="别名 alias"></a>别名 alias</h1><p>可以给git的命令取别名，也可以在.gitconfig下配置<br>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 给checkout命令创建别名ch</span><br><span class="line">git config --global alias.ch checkout</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="垃圾回收-git-gc"><a href="#垃圾回收-git-gc" class="headerlink" title="垃圾回收 git gc"></a>垃圾回收 git gc</h1><p>objects、refs中记录了很多commit的sha1值，执行命令<code>git gc</code>压缩.git/refs/到.git/packed-refs，同时.git/objects被压缩后会有2个子目录info、pack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc</span><br></pre></td></tr></table></figure><h1 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h1><p>默认有GUI和gitk等等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开gitk工具</span></span><br><span class="line">gitk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开git gui工具</span></span><br><span class="line">git gui</span><br></pre></td></tr></table></figure><h1 id="子模块-git-submodule"><a href="#子模块-git-submodule" class="headerlink" title="子模块 git submodule"></a>子模块 git submodule</h1><p>子模块submodule应用场景：<br>一个仓库中引用另一个仓库的代码。两个子模块之间存在引用关系，例如A模块依赖B模块，那么此时虽然可以通过B模块打个jar包给A模块的开发人员使用，假如此时B模块有功能更新则A模块无法用到最新的功能，或者要依赖于B模块先完成开发，不利于两个模块的并行开发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前项目添加引用子模块submodule的仓库地</span></span><br><span class="line">git submodule add git@github.com:AobingJava/JavaFamily.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从工作区添加到暂存区并提交</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者采用交互式命令</span></span><br><span class="line">git add -i</span><br><span class="line">git commit -m &quot;添加子模块submodule&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送到远程仓库</span></span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A模块引用B模块，要获取B模块的更新，需要进入到子模块B目录下进行git pull</span></span><br><span class="line">cd B</span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时本地能够感知B库的更新，但是A的远程仓库没法感知B的更新，需要推送到远程端</span></span><br><span class="line">git commit -am &quot;更新B模块的变化到A的远程仓库&quot;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取多个子模块的更新场景</span></span><br><span class="line">git submodule foreach git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同上，A的远程要感知其他子模块的更新，需要推送到远端</span></span><br><span class="line">git commit -am &quot;更新所有子模块的变化到A的远程仓库&quot;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取一个带submodule的项目</span></span><br><span class="line">git clone git@github.com:TsukasaMoe/tsukasamoe.github.io.git --recursive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除子模块submodule：暂存区、工作区删除后提交（对象区删除），推送到远端</span></span><br><span class="line">git rm --cached B .gitmodule</span><br><span class="line">rm -rf B .gitmodule</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;删除子模块B&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>git裸库：没有工作区的工作仓库，存在于服务端。<br>创建裸库：<code>git init --bare</code></p><h1 id="git-subtree"><a href="#git-subtree" class="headerlink" title="git subtree"></a>git subtree</h1><p>与submodule应用场景类似，但是要双向修改那么可以用subtree</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">父工程中添加子工程</span></span><br><span class="line">git subtree add -P 子工程仓库地址 子工程仓库下的某个分支名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">git subtree add -P git@github.com:AobingJava/JavaFamily.git master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者先添加一个子仓库</span></span><br><span class="line">git remote add subProjRep git@github.com:AobingJava/JavaFamily.git</span><br><span class="line">git subtree add -P subProjRep master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新子工程代码</span></span><br><span class="line">git subtree pull -P 子工程名称 subProjRep master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>子工程修改了，父工程如何感知子工程的修改？</strong></p><ul><li>修改子工程之后push到远端</li><li>本地将子工程的修改更新到父工程中：<code>git subtree pull -P subProj suProj-origin master</code></li><li>父工程中子工程的更新情况推送到父工程的远程仓库</li></ul><p>注意：<br>–squash参数的作用是合并commit，为了防止子工程干扰父工程，不然git log下父子工程项目下子工程的多次提交会产生干扰，该参数会产生一个新的提交，往前走2步。<br>产生冲突的原因有：</p><ul><li>修改同一个文件同一行</li><li>共同祖先不同</li></ul><p>使用建议：在做subtree时，如果加squash，以后每次都加，如果不加，每次都不要加，避免后续经常产生合并冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add --prefix 子工程名称 master --squash</span><br><span class="line">git subtree pull -P 子工程名称 subProjRep master --squash</span><br></pre></td></tr></table></figure><p><strong>如何将父工程中子工程的修改推送到真实的子工程仓库上？</strong></p><ul><li>父工程下修改子工程内容</li><li>推送到父工程以及真实的子工程：<ul><li>推送到父工程的仓库：<code>git push</code></li><li>推送到子工程的仓库：<code>git subtree push -P subProj subProj-origin master</code></li></ul></li></ul><h1 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h1><p>git chery-pick命令用来将某个分支一些提交作为一个新的提交引入到你当前分支上，一个分支上的一些提交可以理解为补丁。<br>如果在某个分支做了一些提交，发现分支选错了，需要将提交复制到正确的分支上，可以使用cherry-pick。</p><p>每次只能复制一个commit，sha1值会改变，可用git log查看。不能跨节点，因为不同祖先会导致冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dev分支进行了错误的提交，需要删除掉，删除思路：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.cherry-pick复制到应该编写的分支；2.把写错分支删除（checkout到分支节点，删除分支）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.假如已经在dev中产生了两次提交，commitid分为af2b2c, 14ed1b1c，需要将这2次提交复制到master分支上</span></span><br><span class="line">git cherry-pick af2b2c</span><br><span class="line">git cherry-pick 14ed1b1c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.原来dev的分支节点为1fab3c，写错分支删除，重新创建dev分支</span></span><br><span class="line">git checkout 1fab3c</span><br><span class="line">git branch -D dev</span><br><span class="line">git checkout -b dev </span><br></pre></td></tr></table></figure><h1 id="变基-git-rebase"><a href="#变基-git-rebase" class="headerlink" title="变基 git rebase"></a>变基 git rebase</h1><p>git rebase和git merge都可以用来整合不同分支的修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     dev</span><br><span class="line">      ⬇</span><br><span class="line">C1-C2-C4</span><br><span class="line">|</span><br><span class="line">C3-&gt;C5</span><br><span class="line">    ⬆</span><br><span class="line">   master</span><br></pre></td></tr></table></figure><p>如果想要整合dev分支修改到master，使用merge是先切换到master分支，然后进行git merge。<br>如果用rebase，则是先切换到dev分支，执行<code>git rebase master</code>进行变基，最终会将dev的分叉合入master分支尾部，然后dev指向最新commit节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未在master分支执行git merge的状态</span></span><br><span class="line"></span><br><span class="line">C1-C2-C4      dev</span><br><span class="line">|             ⬇</span><br><span class="line"><span class="meta prompt_">C3-&gt;</span><span class="language-bash">C5-&gt;C34<span class="string">&#x27;-&gt;C6</span></span></span><br><span class="line">    ⬆</span><br><span class="line">   master</span><br></pre></td></tr></table></figure><p>注意：git rebase只在本机操作，不要推送到远程仓库，即不要在主分支master上进行git rebase</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到要进行变基的分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变基</span></span><br><span class="line">git rebase master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果提示有冲突类似下面</span></span><br><span class="line">Tsukasa@DESKTOP-O5RIC6N MINGW64 /d/Server/Test/git_rebase (dev)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase master</span></span><br><span class="line"></span><br><span class="line">Auto-merging a.txt</span><br><span class="line">CONFLICT (content): Merge conflict in a.txt</span><br><span class="line">error: could not apply b822ef0... dev修改</span><br><span class="line">hint: Resolve all conflicts manually, mark them as resolved with</span><br><span class="line">hint: &quot;git add/rm &lt;conflicted_files&gt;&quot;, then run &quot;git rebase --continue&quot;.</span><br><span class="line">hint: You can instead skip this commit: run &quot;git rebase --skip&quot;.</span><br><span class="line">hint: To abort and get back to the state before &quot;git rebase&quot;, run &quot;git rebase --abort&quot;.</span><br><span class="line">Could not apply b822ef0... dev修改</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据上述描述，通常由三种策略</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.解决冲突后，git add和git commit到对象区后，继续执行git rebase --<span class="built_in">continue</span>，直到所有冲突被解决，rebase结束</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.dev分支的提交冲突是一个commit一个commit进行处理的，某个commit的更新需要忽略，可以执行git rebase --abort</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.如果不想执行git rebase了，可以随时执行git rebase --abort回到执行git rebase之前的状态</span></span><br><span class="line">git rebase --continue</span><br><span class="line">git rebase --skip</span><br><span class="line">git rebase --abort</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git rebase完成后，master指向的节点可能会落后于dev，这时在master分支上执行git merge操作让master分支指向HEAD节点</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h1 id="生产项目分支分配"><a href="#生产项目分支分配" class="headerlink" title="生产项目分支分配"></a>生产项目分支分配</h1><p>dev：开发分支<br>test：开发完毕后，交给测试的分支<br>master：生产阶段<br>bugfix：临时修复bug的分支。</p><p>dev -&gt; test(merge dev) -&gt; master(merge test) -&gt; …</p><p>记录下之前工作时的git协作工作流：</p><ul><li>项目远程主仓库，以及每个人在gitlab上克隆主仓库的项目</li><li>每个人拉取自己私人远程仓库的代码下来</li><li>每个人建立个人远程仓库主分支的跟踪分支，每个开发都在自己的主分支上进行开发</li><li>完成个人开发后往私人远程仓库中推送代码，然后在gitlab上发起merge request请求，code review通过后项目leader合入。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://www.progit.cn/">Pro Git</a></p></li><li><p><a href="https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed">Pushing to Git returning Error Code 403 fatal: HTTP request failed</a></p></li></ul><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 版本管理 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Windows远程桌面躺在床上玩Galgame</title>
      <link href="/2021/04/28/Windows-using-remote-destop-to-play-galgame/"/>
      <url>/2021/04/28/Windows-using-remote-destop-to-play-galgame/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>躺在床上玩Galgame是一件很惬意的事情，因为这样可以很方便的<del>（涩涩）</del>欣赏剧情。</p><p>原理是通过RDP协议实现，设置Windows允许其他设备远程连接后，客户端通过RDP协议与Windows建立TCP连接进行通信，默认远程桌面协议的端口号为3389。</p><h1 id="Windows配置"><a href="#Windows配置" class="headerlink" title="Windows配置"></a>Windows配置</h1><h2 id="允许Windows远程桌面连接"><a href="#允许Windows远程桌面连接" class="headerlink" title="允许Windows远程桌面连接"></a>允许Windows远程桌面连接</h2><p>两种方式，一种是在Windows 10设置的显示-远程桌面中启动远程桌面：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251814664.png" alt=""></p><p>另一种是系统属性-远程中设置允许远程连接到此计算机：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251816049.png" alt=""></p><h2 id="配置允许远程桌面访问Windows的用户"><a href="#配置允许远程桌面访问Windows的用户" class="headerlink" title="配置允许远程桌面访问Windows的用户"></a>配置允许远程桌面访问Windows的用户</h2><p>通常地，当前用户（Tsukasa）就具有远程桌面访问权限，当然如果是多用户系统，也可以手动添加，后面RDP客户端用到的远程登陆帐号就是在这里配置。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251858827.png" alt=""></p><p>设置完上面步骤后，可以在Android中安装微软远程桌面app或者其他RDP客户端了。</p><h2 id="注册表配置通信端口"><a href="#注册表配置通信端口" class="headerlink" title="注册表配置通信端口"></a>注册表配置通信端口</h2><p>通常来说，这个步骤不需要配置，除非想要修改Windows的RDP监听和通信端口。</p><p>监听端口：用于服务器的传入连接<br><code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp</code></p><p>会话端口：用于客户端与服务器的通信<br><code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</code></p><p>进入注册表编辑器regedit，找到控制Windows远程桌面服务配置，可以设置TCP连接的一些参数：</p><ul><li>监听端口PortNumber：RDP的TCP监听端口，默认是3389，可以根据需要进行修改。</li><li>会话端口PortNumber：RDP的TCP会话端口，默认是3389，可以根据需要进行修改。</li><li>KeepAliveInterval：没有活动的情况下发送的TCP keep-alive探测之间的时间间隔，以确保连接保持活动状态，单位是毫秒，非必选参数，可以不用配置。</li></ul><p>监听端口配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251502501.png" alt=""></p><p>会话端口配置</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111609593.png" alt=""></p><h2 id="防火墙设置入站规则"><a href="#防火墙设置入站规则" class="headerlink" title="防火墙设置入站规则"></a>防火墙设置入站规则</h2><p>通常来说不需要配置，打开Windows远程桌面连接后一般会允许通过防火墙。需要自定义远程桌面通信端口时才需要进行下面配置。</p><p>打开Windows Defender防火墙，检查远程服务端口是否已添加入站规则。</p><p>按照下面的步骤，新增入站规则，注意端口号需要修改为上面配置的会话端口号。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111613594.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111629735.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111630159.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111630095.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111630732.jpg" alt=""></p><h1 id="Android上RDP-app配置"><a href="#Android上RDP-app配置" class="headerlink" title="Android上RDP app配置"></a>Android上RDP app配置</h1><p>RDP客户端有很多，这里选择下载并安装好微软远程桌面app。</p><h2 id="添加远程桌面连接"><a href="#添加远程桌面连接" class="headerlink" title="添加远程桌面连接"></a>添加远程桌面连接</h2><p>如果手机与电脑处于同一个局域网下，点击右上角的<code>+</code>号添加远程桌面，默认会自动检测出同一个局域网开启了远程桌面的PC，直接点击就可以快速设置了。</p><p>第三张图是添加一个远程登陆帐号和密码，前面已完成配置，这里是当前用户（Tsukasa），密码自然是这个用户<code>Win+L</code>锁定后登陆到电脑的密码（非PIN码）。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251850175.png" alt=""></p><p>当然假如局域网下无法检测出你的PC，也可以通过点击第一张图中的<code>ADD MANUALLY</code>手动添加，输入本机路由器分配的IP（执行<code>ipconfig</code>查看），选择用户即可。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202310111751184.png" alt=""></p><h2 id="躺在床上愉快的玩耍吧"><a href="#躺在床上愉快的玩耍吧" class="headerlink" title="躺在床上愉快的玩耍吧"></a>躺在床上愉快的玩耍吧</h2><p>在手机添加完成后，点击添加好的远程桌面连接即可连接上Windows桌面，此时再去打开Galgame可以避免一些屏幕适配的问题。</p><p>接下来，你就可以躺在床上和二次元老婆谈情说爱啦~~</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202309251844787.jpg" alt=""></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ギャルゲーム </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Galgame </tag>
            
            <tag> 游戏 </tag>
            
            <tag> RDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础知识总结</title>
      <link href="/2021/04/18/MySQL-basics-knowledge-summary/"/>
      <url>/2021/04/18/MySQL-basics-knowledge-summary/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章的内容很基础，主要是MySQL基础、常用命令的收录，算是《MySQL必知必会》的读书笔记，方便自己查阅。</p><h1 id="基础SQL"><a href="#基础SQL" class="headerlink" title="基础SQL"></a>基础SQL</h1><p>三部分：权限管理、库操作、表结构操作、数据操作。</p><p>登录数据库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root -p;</span><br></pre></td></tr></table></figure></p><p>用户权限：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show grants;</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">| Grants for root@localhost                                           |</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">| GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION |</span><br><span class="line">| GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION        |</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>1.库操作：</p><p>查看建库语句：<br>show database dbName;</p><p>建库：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database orders_db01 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">create database if not exists orders_db02 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">create database orders_db03;</span><br></pre></td></tr></table></figure></p><p>查库：<br>show databases;<br>use orders_db01;</p><p>删库：<br>drop database dbName;</p><p>备份：<br>mysqldump命令</p><p>恢复：</p><p>source /xxx/dbName_bak_20210418.sql;</p><p>表中删除大量数据可以用optimize table来优化空间。</p><ol><li>表结构操作</li></ol><p>查看有哪些表：<br>show tables;</p><p>查看建表语句：<br>show create tableName;</p><p>查看表列定义：<br>desc tableName;<br>show columns from orders;</p><p>查看数据库服务器状态信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status;</span><br><span class="line">+-----------------------------------------------+--------------------------------------------------+</span><br><span class="line">| Variable_name                                 | Value                                            |</span><br><span class="line">+-----------------------------------------------+--------------------------------------------------+</span><br><span class="line">| Aborted_clients                               | 0                                                |</span><br><span class="line">| Aborted_connects                              | 0                                                |</span><br><span class="line">| Binlog_cache_disk_use                         | 0                                                |</span><br><span class="line">| Binlog_cache_use                              | 0                                                |</span><br><span class="line">| Binlog_stmt_cache_disk_use                    | 0                                                |</span><br><span class="line">| Binlog_stmt_cache_use                         | 0                                                |</span><br><span class="line">| Bytes_received                                | 1469                                             |</span><br><span class="line">| Bytes_sent                                    | 18536                                            |</span><br><span class="line">| Com_admin_commands                            | 0                                                |</span><br><span class="line">| Com_assign_to_keycache                        | 0                                                |</span><br><span class="line">| Com_alter_db                                  | 0                                                |</span><br><span class="line">| Com_alter_db_upgrade                          | 0                                                |</span><br><span class="line">| Com_alter_event                               | 0                                                |</span><br><span class="line">| Com_alter_function                            | 0                                                |</span><br><span class="line">| Com_alter_instance                            | 0                                                |</span><br><span class="line">| Com_alter_procedure                           | 0                                                |</span><br><span class="line">| Com_alter_server                              | 0                                                |</span><br><span class="line">| Com_alter_table                               | 0                                                |</span><br><span class="line">| Com_alter_tablespace                          | 0                                                |</span><br><span class="line">| Com_alter_user                                | 0                                                |</span><br><span class="line">| Com_analyze                                   | 0                                                |</span><br><span class="line">| Com_begin                                     | 0                                                |</span><br><span class="line">| Com_binlog                                    | 0                                                |</span><br><span class="line">| Com_call_procedure                            | 0                                                |</span><br><span class="line">| Com_change_db                                 | 2                                                |</span><br><span class="line">| Com_change_master                             | 0                                                |</span><br><span class="line">| Com_change_repl_filter                        | 0                                                |</span><br><span class="line">| Com_check                                     | 0                                                |</span><br><span class="line">| Com_checksum                                  | 0                                                |</span><br><span class="line">| Com_commit                                    | 0                                                |</span><br><span class="line">| Com_create_db                                 | 2                                                |</span><br><span class="line">| Com_create_event                              | 0                                                |</span><br><span class="line">| Com_create_function                           | 0                                                |</span><br><span class="line">| Com_create_index                              | 0                                                |</span><br><span class="line">| Com_create_procedure                          | 0                                                |</span><br><span class="line">| Com_create_server                             | 0                                                |</span><br><span class="line">| Com_create_table                              | 1                                                |</span><br><span class="line">| Com_create_trigger                            | 0                                                |</span><br><span class="line">| Com_create_udf                                | 0                                                |</span><br><span class="line">| Com_create_user                               | 0                                                |</span><br><span class="line">| Com_create_view                               | 0                                                |</span><br><span class="line">| Com_dealloc_sql                               | 0                                                |</span><br><span class="line">| Com_delete                                    | 0                                                |</span><br><span class="line">| Com_delete_multi                              | 0                                                |</span><br><span class="line">| Com_do                                        | 0                                                |</span><br><span class="line">| Com_drop_db                                   | 1                                                |</span><br><span class="line">| Com_drop_event                                | 0                                                |</span><br><span class="line">| Com_drop_function                             | 0                                                |</span><br><span class="line">| Com_drop_index                                | 0                                                |</span><br><span class="line">| Com_drop_procedure                            | 0                                                |</span><br><span class="line">| Com_drop_server                               | 0                                                |</span><br><span class="line">| Com_drop_table                                | 1                                                |</span><br><span class="line">| Com_drop_trigger                              | 0                                                |</span><br><span class="line">| Com_drop_user                                 | 0                                                |</span><br><span class="line">| Com_drop_view                                 | 0                                                |</span><br><span class="line">| Com_empty_query                               | 0                                                |</span><br><span class="line">| Com_execute_sql                               | 0                                                |</span><br><span class="line">| Com_explain_other                             | 0                                                |</span><br><span class="line">| Com_flush                                     | 0                                                |</span><br><span class="line">| Com_get_diagnostics                           | 0                                                |</span><br><span class="line">| Com_grant                                     | 0                                                |</span><br><span class="line">| Com_ha_close                                  | 0                                                |</span><br><span class="line">| Com_ha_open                                   | 0                                                |</span><br><span class="line">| Com_ha_read                                   | 0                                                |</span><br><span class="line">| Com_help                                      | 0                                                |</span><br><span class="line">| Com_insert                                    | 0                                                |</span><br><span class="line">| Com_insert_select                             | 0                                                |</span><br><span class="line">| Com_install_plugin                            | 0                                                |</span><br><span class="line">| Com_kill                                      | 0                                                |</span><br><span class="line">| Com_load                                      | 0                                                |</span><br><span class="line">| Com_lock_tables                               | 0                                                |</span><br><span class="line">| Com_optimize                                  | 0                                                |</span><br><span class="line">| Com_preload_keys                              | 0                                                |</span><br><span class="line">| Com_prepare_sql                               | 0                                                |</span><br><span class="line">| Com_purge                                     | 0                                                |</span><br><span class="line">| Com_purge_before_date                         | 0                                                |</span><br><span class="line">| Com_release_savepoint                         | 0                                                |</span><br><span class="line">| Com_rename_table                              | 0                                                |</span><br><span class="line">| Com_rename_user                               | 0                                                |</span><br><span class="line">| Com_repair                                    | 0                                                |</span><br><span class="line">| Com_replace                                   | 0                                                |</span><br><span class="line">| Com_replace_select                            | 0                                                |</span><br><span class="line">| Com_reset                                     | 0                                                |</span><br><span class="line">| Com_resignal                                  | 0                                                |</span><br><span class="line">| Com_revoke                                    | 0                                                |</span><br><span class="line">| Com_revoke_all                                | 0                                                |</span><br><span class="line">| Com_rollback                                  | 0                                                |</span><br><span class="line">| Com_rollback_to_savepoint                     | 0                                                |</span><br><span class="line">| Com_savepoint                                 | 0                                                |</span><br><span class="line">| Com_select                                    | 4                                                |</span><br><span class="line">| Com_set_option                                | 0                                                |</span><br><span class="line">| Com_signal                                    | 0                                                |</span><br><span class="line">| Com_show_binlog_events                        | 0                                                |</span><br><span class="line">| Com_show_binlogs                              | 0                                                |</span><br><span class="line">| Com_show_charsets                             | 0                                                |</span><br><span class="line">| Com_show_collations                           | 0                                                |</span><br><span class="line">| Com_show_create_db                            | 0                                                |</span><br><span class="line">| Com_show_create_event                         | 0                                                |</span><br><span class="line">| Com_show_create_func                          | 0                                                |</span><br><span class="line">| Com_show_create_proc                          | 0                                                |</span><br><span class="line">| Com_show_create_table                         | 2                                                |</span><br><span class="line">| Com_show_create_trigger                       | 0                                                |</span><br><span class="line">| Com_show_databases                            | 4                                                |</span><br><span class="line">| Com_show_engine_logs                          | 0                                                |</span><br><span class="line">| Com_show_engine_mutex                         | 0                                                |</span><br><span class="line">| Com_show_engine_status                        | 0                                                |</span><br><span class="line">| Com_show_events                               | 0                                                |</span><br><span class="line">| Com_show_errors                               | 0                                                |</span><br><span class="line">| Com_show_fields                               | 5                                                |</span><br><span class="line">| Com_show_function_code                        | 0                                                |</span><br><span class="line">| Com_show_function_status                      | 0                                                |</span><br><span class="line">| Com_show_grants                               | 0                                                |</span><br><span class="line">| Com_show_keys                                 | 0                                                |</span><br><span class="line">| Com_show_master_status                        | 0                                                |</span><br><span class="line">| Com_show_open_tables                          | 0                                                |</span><br><span class="line">| Com_show_plugins                              | 0                                                |</span><br><span class="line">| Com_show_privileges                           | 0                                                |</span><br><span class="line">| Com_show_procedure_code                       | 0                                                |</span><br><span class="line">| Com_show_procedure_status                     | 0                                                |</span><br><span class="line">| Com_show_processlist                          | 0                                                |</span><br><span class="line">| Com_show_profile                              | 0                                                |</span><br><span class="line">| Com_show_profiles                             | 0                                                |</span><br><span class="line">| Com_show_relaylog_events                      | 0                                                |</span><br><span class="line">| Com_show_slave_hosts                          | 0                                                |</span><br><span class="line">| Com_show_slave_status                         | 0                                                |</span><br><span class="line">| Com_show_status                               | 2                                                |</span><br><span class="line">| Com_show_storage_engines                      | 0                                                |</span><br><span class="line">| Com_show_table_status                         | 0                                                |</span><br><span class="line">| Com_show_tables                               | 3                                                |</span><br><span class="line">| Com_show_triggers                             | 0                                                |</span><br><span class="line">| Com_show_variables                            | 0                                                |</span><br><span class="line">| Com_show_warnings                             | 0                                                |</span><br><span class="line">| Com_show_create_user                          | 0                                                |</span><br><span class="line">| Com_shutdown                                  | 0                                                |</span><br><span class="line">| Com_slave_start                               | 0                                                |</span><br><span class="line">| Com_slave_stop                                | 0                                                |</span><br><span class="line">| Com_group_replication_start                   | 0                                                |</span><br><span class="line">| Com_group_replication_stop                    | 0                                                |</span><br><span class="line">| Com_stmt_execute                              | 0                                                |</span><br><span class="line">| Com_stmt_close                                | 0                                                |</span><br><span class="line">| Com_stmt_fetch                                | 0                                                |</span><br><span class="line">| Com_stmt_prepare                              | 0                                                |</span><br><span class="line">| Com_stmt_reset                                | 0                                                |</span><br><span class="line">| Com_stmt_send_long_data                       | 0                                                |</span><br><span class="line">| Com_truncate                                  | 0                                                |</span><br><span class="line">| Com_uninstall_plugin                          | 0                                                |</span><br><span class="line">| Com_unlock_tables                             | 0                                                |</span><br><span class="line">| Com_update                                    | 0                                                |</span><br><span class="line">| Com_update_multi                              | 0                                                |</span><br><span class="line">| Com_xa_commit                                 | 0                                                |</span><br><span class="line">| Com_xa_end                                    | 0                                                |</span><br><span class="line">| Com_xa_prepare                                | 0                                                |</span><br><span class="line">| Com_xa_recover                                | 0                                                |</span><br><span class="line">| Com_xa_rollback                               | 0                                                |</span><br><span class="line">| Com_xa_start                                  | 0                                                |</span><br><span class="line">| Com_stmt_reprepare                            | 0                                                |</span><br><span class="line">| Compression                                   | OFF                                              |</span><br><span class="line">| Connection_errors_accept                      | 0                                                |</span><br><span class="line">| Connection_errors_internal                    | 0                                                |</span><br><span class="line">| Connection_errors_max_connections             | 0                                                |</span><br><span class="line">| Connection_errors_peer_address                | 0                                                |</span><br><span class="line">| Connection_errors_select                      | 0                                                |</span><br><span class="line">| Connection_errors_tcpwrap                     | 0                                                |</span><br><span class="line">| Connections                                   | 9                                                |</span><br><span class="line">| Created_tmp_disk_tables                       | 5                                                |</span><br><span class="line">| Created_tmp_files                             | 5                                                |</span><br><span class="line">| Created_tmp_tables                            | 12                                               |</span><br><span class="line">| Delayed_errors                                | 0                                                |</span><br><span class="line">| Delayed_insert_threads                        | 0                                                |</span><br><span class="line">| Delayed_writes                                | 0                                                |</span><br><span class="line">| Flush_commands                                | 1                                                |</span><br><span class="line">| Handler_commit                                | 0                                                |</span><br><span class="line">| Handler_delete                                | 0                                                |</span><br><span class="line">| Handler_discover                              | 0                                                |</span><br><span class="line">| Handler_external_lock                         | 6                                                |</span><br><span class="line">| Handler_mrr_init                              | 0                                                |</span><br><span class="line">| Handler_prepare                               | 0                                                |</span><br><span class="line">| Handler_read_first                            | 5                                                |</span><br><span class="line">| Handler_read_key                              | 7                                                |</span><br><span class="line">| Handler_read_last                             | 0                                                |</span><br><span class="line">| Handler_read_next                             | 0                                                |</span><br><span class="line">| Handler_read_prev                             | 0                                                |</span><br><span class="line">| Handler_read_rnd                              | 0                                                |</span><br><span class="line">| Handler_read_rnd_next                         | 145                                              |</span><br><span class="line">| Handler_rollback                              | 0                                                |</span><br><span class="line">| Handler_savepoint                             | 0                                                |</span><br><span class="line">| Handler_savepoint_rollback                    | 0                                                |</span><br><span class="line">| Handler_update                                | 0                                                |</span><br><span class="line">| Handler_write                                 | 117                                              |</span><br><span class="line">| Innodb_buffer_pool_dump_status                | Dumping of buffer pool not started               |</span><br><span class="line">| Innodb_buffer_pool_load_status                | Buffer pool(s) load completed at 210407  0:31:28 |</span><br><span class="line">| Innodb_buffer_pool_resize_status              |                                                  |</span><br><span class="line">| Innodb_buffer_pool_pages_data                 | 256                                              |</span><br><span class="line">| Innodb_buffer_pool_bytes_data                 | 4194304                                          |</span><br><span class="line">| Innodb_buffer_pool_pages_dirty                | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_bytes_dirty                | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_pages_flushed              | 113                                              |</span><br><span class="line">| Innodb_buffer_pool_pages_free                 | 256                                              |</span><br><span class="line">| Innodb_buffer_pool_pages_misc                 | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_pages_total                | 512                                              |</span><br><span class="line">| Innodb_buffer_pool_read_ahead_rnd             | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_read_ahead                 | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_read_ahead_evicted         | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_read_requests              | 3243                                             |</span><br><span class="line">| Innodb_buffer_pool_reads                      | 400                                              |</span><br><span class="line">| Innodb_buffer_pool_wait_free                  | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_write_requests             | 1081                                             |</span><br><span class="line">| Innodb_data_fsyncs                            | 36                                               |</span><br><span class="line">| Innodb_data_pending_fsyncs                    | 0                                                |</span><br><span class="line">| Innodb_data_pending_reads                     | 0                                                |</span><br><span class="line">| Innodb_data_pending_writes                    | 0                                                |</span><br><span class="line">| Innodb_data_read                              | 6623744                                          |</span><br><span class="line">| Innodb_data_reads                             | 438                                              |</span><br><span class="line">| Innodb_data_writes                            | 152                                              |</span><br><span class="line">| Innodb_data_written                           | 2433024                                          |</span><br><span class="line">| Innodb_dblwr_pages_written                    | 34                                               |</span><br><span class="line">| Innodb_dblwr_writes                           | 3                                                |</span><br><span class="line">| Innodb_log_waits                              | 0                                                |</span><br><span class="line">| Innodb_log_write_requests                     | 12                                               |</span><br><span class="line">| Innodb_log_writes                             | 15                                               |</span><br><span class="line">| Innodb_os_log_fsyncs                          | 21                                               |</span><br><span class="line">| Innodb_os_log_pending_fsyncs                  | 0                                                |</span><br><span class="line">| Innodb_os_log_pending_writes                  | 0                                                |</span><br><span class="line">| Innodb_os_log_written                         | 21504                                            |</span><br><span class="line">| Innodb_page_size                              | 16384                                            |</span><br><span class="line">| Innodb_pages_created                          | 53                                               |</span><br><span class="line">| Innodb_pages_read                             | 399                                              |</span><br><span class="line">| Innodb_pages_written                          | 113                                              |</span><br><span class="line">| Innodb_row_lock_current_waits                 | 0                                                |</span><br><span class="line">| Innodb_row_lock_time                          | 0                                                |</span><br><span class="line">| Innodb_row_lock_time_avg                      | 0                                                |</span><br><span class="line">| Innodb_row_lock_time_max                      | 0                                                |</span><br><span class="line">| Innodb_row_lock_waits                         | 0                                                |</span><br><span class="line">| Innodb_rows_deleted                           | 0                                                |</span><br><span class="line">| Innodb_rows_inserted                          | 81                                               |</span><br><span class="line">| Innodb_rows_read                              | 100                                              |</span><br><span class="line">| Innodb_rows_updated                           | 0                                                |</span><br><span class="line">| Innodb_num_open_files                         | 30                                               |</span><br><span class="line">| Innodb_truncated_status_writes                | 0                                                |</span><br><span class="line">| Innodb_available_undo_logs                    | 128                                              |</span><br><span class="line">| Key_blocks_not_flushed                        | 0                                                |</span><br><span class="line">| Key_blocks_unused                             | 6693                                             |</span><br><span class="line">| Key_blocks_used                               | 5                                                |</span><br><span class="line">| Key_read_requests                             | 18                                               |</span><br><span class="line">| Key_reads                                     | 5                                                |</span><br><span class="line">| Key_write_requests                            | 0                                                |</span><br><span class="line">| Key_writes                                    | 0                                                |</span><br><span class="line">| Last_query_cost                               | 1.399000                                         |</span><br><span class="line">| Last_query_partial_plans                      | 1                                                |</span><br><span class="line">| Locked_connects                               | 0                                                |</span><br><span class="line">| Max_execution_time_exceeded                   | 0                                                |</span><br><span class="line">| Max_execution_time_set                        | 0                                                |</span><br><span class="line">| Max_execution_time_set_failed                 | 0                                                |</span><br><span class="line">| Max_used_connections                          | 6                                                |</span><br><span class="line">| Max_used_connections_time                     | 2021-04-07 00:54:31                              |</span><br><span class="line">| Not_flushed_delayed_rows                      | 0                                                |</span><br><span class="line">| Ongoing_anonymous_transaction_count           | 0                                                |</span><br><span class="line">| Open_files                                    | 19                                               |</span><br><span class="line">| Open_streams                                  | 0                                                |</span><br><span class="line">| Open_table_definitions                        | 319                                              |</span><br><span class="line">| Open_tables                                   | 111                                              |</span><br><span class="line">| Opened_files                                  | 536                                              |</span><br><span class="line">| Opened_table_definitions                      | 1                                                |</span><br><span class="line">| Opened_tables                                 | 3                                                |</span><br><span class="line">| Performance_schema_accounts_lost              | 0                                                |</span><br><span class="line">| Performance_schema_cond_classes_lost          | 0                                                |</span><br><span class="line">| Performance_schema_cond_instances_lost        | 0                                                |</span><br><span class="line">| Performance_schema_digest_lost                | 0                                                |</span><br><span class="line">| Performance_schema_file_classes_lost          | 0                                                |</span><br><span class="line">| Performance_schema_file_handles_lost          | 0                                                |</span><br><span class="line">| Performance_schema_file_instances_lost        | 0                                                |</span><br><span class="line">| Performance_schema_hosts_lost                 | 0                                                |</span><br><span class="line">| Performance_schema_index_stat_lost            | 0                                                |</span><br><span class="line">| Performance_schema_locker_lost                | 0                                                |</span><br><span class="line">| Performance_schema_memory_classes_lost        | 0                                                |</span><br><span class="line">| Performance_schema_metadata_lock_lost         | 0                                                |</span><br><span class="line">| Performance_schema_mutex_classes_lost         | 0                                                |</span><br><span class="line">| Performance_schema_mutex_instances_lost       | 0                                                |</span><br><span class="line">| Performance_schema_nested_statement_lost      | 0                                                |</span><br><span class="line">| Performance_schema_prepared_statements_lost   | 0                                                |</span><br><span class="line">| Performance_schema_program_lost               | 0                                                |</span><br><span class="line">| Performance_schema_rwlock_classes_lost        | 0                                                |</span><br><span class="line">| Performance_schema_rwlock_instances_lost      | 0                                                |</span><br><span class="line">| Performance_schema_session_connect_attrs_lost | 0                                                |</span><br><span class="line">| Performance_schema_socket_classes_lost        | 0                                                |</span><br><span class="line">| Performance_schema_socket_instances_lost      | 0                                                |</span><br><span class="line">| Performance_schema_stage_classes_lost         | 0                                                |</span><br><span class="line">| Performance_schema_statement_classes_lost     | 0                                                |</span><br><span class="line">| Performance_schema_table_handles_lost         | 0                                                |</span><br><span class="line">| Performance_schema_table_instances_lost       | 0                                                |</span><br><span class="line">| Performance_schema_table_lock_stat_lost       | 0                                                |</span><br><span class="line">| Performance_schema_thread_classes_lost        | 0                                                |</span><br><span class="line">| Performance_schema_thread_instances_lost      | 0                                                |</span><br><span class="line">| Performance_schema_users_lost                 | 0                                                |</span><br><span class="line">| Prepared_stmt_count                           | 0                                                |</span><br><span class="line">| Qcache_free_blocks                            | 0                                                |</span><br><span class="line">| Qcache_free_memory                            | 0                                                |</span><br><span class="line">| Qcache_hits                                   | 0                                                |</span><br><span class="line">| Qcache_inserts                                | 0                                                |</span><br><span class="line">| Qcache_lowmem_prunes                          | 0                                                |</span><br><span class="line">| Qcache_not_cached                             | 0                                                |</span><br><span class="line">| Qcache_queries_in_cache                       | 0                                                |</span><br><span class="line">| Qcache_total_blocks                           | 0                                                |</span><br><span class="line">| Queries                                       | 94                                               |</span><br><span class="line">| Questions                                     | 36                                               |</span><br><span class="line">| Select_full_join                              | 0                                                |</span><br><span class="line">| Select_full_range_join                        | 0                                                |</span><br><span class="line">| Select_range                                  | 0                                                |</span><br><span class="line">| Select_range_check                            | 0                                                |</span><br><span class="line">| Select_scan                                   | 12                                               |</span><br><span class="line">| Slave_open_temp_tables                        | 0                                                |</span><br><span class="line">| Slow_launch_threads                           | 0                                                |</span><br><span class="line">| Slow_queries                                  | 0                                                |</span><br><span class="line">| Sort_merge_passes                             | 0                                                |</span><br><span class="line">| Sort_range                                    | 0                                                |</span><br><span class="line">| Sort_rows                                     | 0                                                |</span><br><span class="line">| Sort_scan                                     | 0                                                |</span><br><span class="line">| Ssl_accept_renegotiates                       | 0                                                |</span><br><span class="line">| Ssl_accepts                                   | 0                                                |</span><br><span class="line">| Ssl_callback_cache_hits                       | 0                                                |</span><br><span class="line">| Ssl_cipher                                    |                                                  |</span><br><span class="line">| Ssl_cipher_list                               |                                                  |</span><br><span class="line">| Ssl_client_connects                           | 0                                                |</span><br><span class="line">| Ssl_connect_renegotiates                      | 0                                                |</span><br><span class="line">| Ssl_ctx_verify_depth                          | 0                                                |</span><br><span class="line">| Ssl_ctx_verify_mode                           | 0                                                |</span><br><span class="line">| Ssl_default_timeout                           | 0                                                |</span><br><span class="line">| Ssl_finished_accepts                          | 0                                                |</span><br><span class="line">| Ssl_finished_connects                         | 0                                                |</span><br><span class="line">| Ssl_server_not_after                          |                                                  |</span><br><span class="line">| Ssl_server_not_before                         |                                                  |</span><br><span class="line">| Ssl_session_cache_hits                        | 0                                                |</span><br><span class="line">| Ssl_session_cache_misses                      | 0                                                |</span><br><span class="line">| Ssl_session_cache_mode                        | NONE                                             |</span><br><span class="line">| Ssl_session_cache_overflows                   | 0                                                |</span><br><span class="line">| Ssl_session_cache_size                        | 0                                                |</span><br><span class="line">| Ssl_session_cache_timeouts                    | 0                                                |</span><br><span class="line">| Ssl_sessions_reused                           | 0                                                |</span><br><span class="line">| Ssl_used_session_cache_entries                | 0                                                |</span><br><span class="line">| Ssl_verify_depth                              | 0                                                |</span><br><span class="line">| Ssl_verify_mode                               | 0                                                |</span><br><span class="line">| Ssl_version                                   |                                                  |</span><br><span class="line">| Table_locks_immediate                         | 120                                              |</span><br><span class="line">| Table_locks_waited                            | 0                                                |</span><br><span class="line">| Table_open_cache_hits                         | 7                                                |</span><br><span class="line">| Table_open_cache_misses                       | 3                                                |</span><br><span class="line">| Table_open_cache_overflows                    | 0                                                |</span><br><span class="line">| Tc_log_max_pages_used                         | 0                                                |</span><br><span class="line">| Tc_log_page_size                              | 0                                                |</span><br><span class="line">| Tc_log_page_waits                             | 0                                                |</span><br><span class="line">| Threads_cached                                | 0                                                |</span><br><span class="line">| Threads_connected                             | 6                                                |</span><br><span class="line">| Threads_created                               | 6                                                |</span><br><span class="line">| Threads_running                               | 1                                                |</span><br><span class="line">| Uptime                                        | 3030                                             |</span><br><span class="line">| Uptime_since_flush_status                     | 3030                                             |</span><br><span class="line">+-----------------------------------------------+--------------------------------------------------+</span><br><span class="line">356 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>查看完整列定义<br>mysql&gt; show full columns from orders;<br>+————+———-+———–+——+—–+———+—————-+———————————+———+<br>| Field      | Type     | Collation | Null | Key | Default | Extra          | Privileges                      | Comment |<br>+————+———-+———–+——+—–+———+—————-+———————————+———+<br>| order_num  | int(11)  | NULL      | NO   | PRI | NULL    | auto_increment | select,insert,update,references |         |<br>| order_date | datetime | NULL      | NO   |     | NULL    |                | select,insert,update,references |         |<br>| cust_id    | int(11)  | NULL      | NO   | MUL | NULL    |                | select,insert,update,references |         |<br>+————+———-+———–+——+—–+———+—————-+———————————+———+<br>3 rows in set (0.00 sec)</p><p>建表：<br>CREATE TABLE <code>orders2</code> (<br>  <code>order_num</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>order_date</code> datetime NOT NULL,<br>  <code>cust_id</code> int(11) NOT NULL,<br>  PRIMARY KEY (<code>order_num</code>),<br>  KEY <code>fk_orders_customers2</code> (<code>cust_id</code>),<br>  CONSTRAINT <code>fk_orders_customers2</code> FOREIGN KEY (<code>cust_id</code>) REFERENCES <code>customers</code> (<code>cust_id</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=20010 DEFAULT CHARSET=utf8;</p><p>CREATE TABLE <code>orderitems3</code> (<br>  <code>order_num</code> int(11) NOT NULL comment ‘订单号’,<br>  <code>order_item</code> int(11) NOT NULL comment ‘订单项’,<br>  <code>prod_id</code> char(10) NOT NULL,<br>  <code>quantity</code> int(11) NOT NULL default 1,<br>  <code>item_price</code> decimal(8,2) NOT NULL,<br>  PRIMARY KEY (<code>order_num</code>,<code>order_item</code>),<br>  index idx_prod_id(<code>prod_id</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p><p>create table orders_new like order;</p><p>引擎类型：InnoDB vs MyISAM</p><ul><li>InnoDB：支持事务；不支持全文本搜索；存储在磁盘。</li><li>MyISAM：不支持事务；支持全文本搜索；存储在内存，性能高。<br>同一个数据库可以混用引擎类型。</li></ul><p>修改表结构：</p><p>增、删、改列：<br>alter table vendors add column vend_phone varchar(16) null after vend_address;<br>alter table vendors modify column vend_phone varchar(32) comment ‘租户手机号码’;<br>alter table vendors change column vend_phone vend_phone varchar(32) comment ‘租户手机号码’;<br>alter table vendors drop column vend_phone;</p><p>增删改其他类型（主键、外键、索引）：<br>alter table orderitems2 drop primary key;<br>alter table orderitems2 add primary key (<code>order_num</code>,<code>order_item</code>);<br>alter table orderitems2 drop primary key, add column <code>id</code> int(11) NOT NULL AUTO_INCREMENT FIRST, add primary key(<code>id</code>);</p><p>alter table orderitems2<br>  add constraint fk_orderitems_orders2 foreign key (order_num) references orders(order_num),<br>  add constraint fk_orderitems_products2 foreign key (prod_id) references products(prod_id);<br>alter table orderitems2 drop foreign key fk_orderitems_orders2;</p><p>普通索引：索引列值可不唯一。<br>CREATE INDEX indexName ON table_name (column_name);<br>ALTER table tableName ADD INDEX indexName(columnName);<br>DROP INDEX [indexName] ON mytable;<br>唯一索引：索引列值必须唯一，允许有空值。<br>CREATE UNIQUE INDEX indexName ON mytable(username(length));<br>ALTER table mytable ADD UNIQUE [indexName] (username(length));<br>两者均可以指定列索引长度：</p><p>修改字段默认值：直接修改表文件，速度很快。<br>alter table orderitems alter quantity set default 1;<br>alter table orderitems alter quantity drop default;</p><p>删表<br>drop table if exists orderitems2;</p><p>重命名表<br>rename table orders to orders_old, orders_new to orders;<br>ALTER TABLE orders_old RENAME TO orders;</p><p>视图：</p><ul><li>特点：重用SQL，虚拟的表，本身不包含数据，保护数据，注意性能问题。</li><li>规则：表中的order by会覆盖视图中的；不能索引、关联触发器或默认值；可以与表一起连用。</li></ul><p>create view productcustomers as<br>  (<br>    select cust_name, cust_contact, prod_id from customers c, orders o, orderitems oi<br>    where c.cust_id = o.cust_id and oi.order_num = o.order_num<br>  );<br>show create view productcustomers;<br>drop view productcustomers;<br>create or replace view productcustomers as<br>  (<br>    select cust_name, cust_contact, prod_id from customers c, orders o, orderitems oi<br>    where c.cust_id = o.cust_id and oi.order_num = o.order_num<br>  );<br>使用视图<br>select cust_name, cust_contact from productcustomers where prod_id = ‘TNT2’;</p><p>存储过程：<br>delimiter //<br>告诉命令行使用程序使用//作为新的语句结束分隔符。</p><p>示例：<br>delimiter //</p><p>create procedure proc_ordertotal(<br>  in onumber int,<br>  in taxable boolean,<br>  out ototal decimal(8,2)<br>) comment ‘Obtain order total, optionally adding tax’<br>begin<br>  declare total decimal(8,2);<br>  declare taxrate int default 6;</p><p>  select sum(item_price*quantity) from orderitems where order_num = onumber into total;</p><p>  – if need to add tax<br>  if taxable then<br>    select total+(total/100*taxrate) into total;<br>  end if;</p><p>  select total into ototal;</p><p>end //</p><p>delimiter ;</p><p>call proc_ordertotal(20005, 0, @total);<br>select @total;</p><p>drop procedure proc_ordertotal;</p><p>show procedure status;<br>show create procedure proc_ordertotal;</p><p>游标：存储游标后，可以根据需要滚动或浏览其中的数据。只能用于存储过程。游标使用结束时必须关闭。<br>示例：</p><p>delimiter //<br>create procedure proc_processorders()<br>begin</p><p>  declare isDone boolean default 0;<br>  declare oNumber int;<br>  declare outTotal decimal(8,2);</p><p>  declare ordernumbers cursor for (select order_num from orders);</p><p>  declare continue handler for sqlstate ‘02000’ set isDone = 1;</p><p>  create table if not exists ordertotals(<br>    order_num int, total decimal(8,2)<br>  );</p><p>  open ordernumbers;</p><p>  repeat<br>    fetch ordernumbers into oNumber;<br>    call proc_ordertotal(oNumber, 1, outTotal);</p><pre><code>insert into ordertotals(order_num, total) values(oNumber, outTotal);</code></pre><p>  until isDone end repeat;</p><p>  close ordernumbers;</p><p>end //<br>delimiter ;</p><p>call proc_processorders();<br>select *from ordertotals;</p><p>触发器：</p><ul><li>四要素：唯一触发器名；关联的表；应该响应的活动（delete, insert, update）；何时执行（before, after）</li><li>规则：仅支持表；每个表最多支持6个。insert有new虚拟表（值可被更新）；delete有old表，值不可被更新，为只读；update有new和old表，new表的值可被更新，old的为只读。</li></ul><p>delimiter //<br>create trigger tg_neworder after insert on orders for each row<br>begin<br>  select new.order_num into @tt;<br>end //<br>delimiter ;</p><p>insert into orders(order_date,cust_id) values(now(), 10001);<br>select @tt;<br>drop trigger tg_neworder;</p><p>delimiter //<br>create trigger tg_deleteorder before delete on orders for each row<br>begin<br>  insert into archive_orders(order_num, order_date, cust_id) values(old.order_num, old.order_date, old.cust_id);<br>end //<br>delimiter ;</p><p>create trigger tg_updatevendor before update on vendors for each row set new.vend_state = Upper(new.vend_state);<br>drop trigger tg_updatevendor;</p><p>事务<br>要么全部执行失败，要么全部执行成功，对于中途发生错误的事务回滚。<br>只能回退insert, update, delete语句。</p><p>start transaction;<br>xxx操作<br>rollback;</p><p>start transaction;<br>xxx操作<br>commit;</p><p>保留点<br>savepoint deletePoint;<br>xxx操作<br>rollback to deletePoint;<br>执行rollback或commit后事务结束，保留点释放，或使用release savepoint deletePoint释放</p><p>取消MySQL自动提交：<br>set autocommit = 0;</p><p>全球化和本地化<br>查看字符集：<br>show character set;<br>查看校对：<br>show collation;</p><p>可以在安装时定义一个默认字符集和校对，也可以在创建数据库时创建，还可以对表、表字段创建。<br>show variables like ‘character%’;<br>show variables like ‘collation%’;</p><p>create table mytable(<br>  column1 int,<br>  column2 varchar(32)<br>) default character set hebrew<br>  collate hebrew_general_ci;</p><p>安全管理<br>use mysql;<br>select * from user;</p><p>创建用户<br>create user tsukasa identified by ‘p12345’;<br>设置访问权限<br>三要素：</p><ul><li>要授予的权限</li><li>被授予访问权限的数据库或表</li><li>用户名<br>show grants for tsukasa;<br>grant select, insert, update, delete on test.<em> to tsukasa;<br>grant all on test.</em> to tsukasa;</li></ul><p>回收权限<br>revoke select on test.* from tsukasa;</p><p>更改口令<br>set password for tsukasa = Password(‘p54321’);</p><p>重命名用户<br>rename user tsukasa to tsukasa2;<br>删除用户<br>drop user tsukasa2;</p><h2 id="表结构处理"><a href="#表结构处理" class="headerlink" title="表结构处理"></a>表结构处理</h2><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>增<br>单行<br>INSERT INTO <code>products</code> (<code>prod_id</code>, <code>vend_id</code>, <code>prod_name</code>, <code>prod_price</code>, <code>prod_desc</code>) VALUES (‘FU12’, ‘1002’, ‘Apple’, ‘4.00’, ‘sweet’);<br>批量（提高性能）<br>INSERT INTO <code>products</code> (<code>prod_id</code>, <code>vend_id</code>, <code>prod_name</code>, <code>prod_price</code>, <code>prod_desc</code>)<br>  VALUES (‘FU12’, ‘1002’, ‘Apple’, ‘4.00’, ‘sweet’),<br>  (‘FU13’, ‘1003’, ‘Banana’, ‘4.00’, ‘sweet’);</p><p>INSERT INTO products_new (<code>prod_id</code>, <code>vend_id</code>, <code>prod_name</code>, <code>prod_price</code>, <code>prod_desc</code>)<br>  select (<code>prod_id</code>, <code>vend_id</code>, <code>prod_name</code>, <code>prod_price</code>, <code>prod_desc</code>) from products where vend_id = 1002;</p><p>删<br>delete from products where prod_id = ‘FU12’;<br>truncate tableName;</p><p>改<br>update customers set cust_name = ‘The Fudds’, cust_email = ‘elmer@fudd.com’<br>  where cust_id = 10005;</p><p>查<br>select子句顺序：select&gt;from&gt;where&gt;group by&gt;having&gt;order by&gt;limit<br>select <em> from 表名 where … having … group by … order by… limit …<br>selct </em> from 表名1 inner/left/right join 表名2 on 条件 group by…</p><p>限制行数（limit）<br>select <em> from products limit 5;<br>select </em> from products limit 3,2;</p><p>按字典排序（order by）<br>select prod_id as ‘产品ID’, prod_name as ‘产品名称’ from products order by prod_id desc, vend_id asc;</p><ul><li>典型场景：找出最昂贵的物品<br>select prod_id, prod_price from products order by prod_price desc limit 1;</li></ul><p>条件查询（where）<br>select * from products where prod_name = ‘Oil can’ and prod_price &lt; 10;<br>select prod_name, prod_price from products where vend_id = 1002 or vend_id = 1003;</p><p>IN与NOT、BETWEEN<br>select prod_id ‘产品ID’ from products where vend_id in (‘1001’, ‘1002’, ‘1003’);<br>select prod_id ‘产品ID’ from products where vend_id not in (‘1001’, ‘1002’, ‘1003’);</p><p>select prod_name, prod_price from products where prod_price between 5 and 10;</p><p>select distinct vend_id from products;</p><p>通配符（多字符）：<br>select t1.prod_id, t1.prod_name from products t1 where t1.prod_id like ‘ANV%’;<br>select t1.prod_id, t1.prod_name from products t1 where t1.prod_id like ‘ANV%’;</p><p>单字符：<br>select prod_id, prod_name from products where prod<em>name like ‘</em> ton%’;</p><p>正则表达式：<br>select prod_id, prod_name from products where prod_name regexp ‘.000’;</p><p>常见函数：<br>官方文档链接：<a href="https://dev.mysql.com/doc/refman/5.6/en/functions.html">https://dev.mysql.com/doc/refman/5.6/en/functions.html</a></p><ul><li>数学函数：ABS(x), SQRT(x), MOD(x,y), CEIL(x), COS(x), LOG10(x), DEGREES(x)弧度换角度, ROUND(x, D), sign(x)正负零判断, SUM(x), AVG(x), MAX(x), MIN(x), COUNT(x)</li><li>字符串函数：CONCAT(str1, str2, …, strn), RTRIM(str), TRIM(str), UPPER(str), LENGTH(str), CHAR_LENGTH(str), LPAD(s1, len, s2)用s2在s1左边填充，直到整个字符串为len, SUBSTRING(str,pos), SUBSTRING(str,pos,len), STRCMP(s1, s2)字符串是否相等, REVERSE(str), LEFT(s,n), REPEAT(s,n), REPLACE(s,s1,s2)</li><li>日期和时间函数：CURDATE(), NOW(), UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date), DAYOFYEAR(d)、DAYOFMONTH(d), WEEKOFYEAD(d), QUARTER(date), HOUR(), ADDTIME(date,expr), SUBTIME(date,expr), datediff(d1,d2), date_add(time, intervalTime), date_format(time, format)</li><li>条件判断函数：IF(expr,v1,v2), IFNULL(v1,v2), case expr when v1 then r1 [when v2 then r2][else r3] end类似case函数</li><li>系统信息函数：CONNECTION_ID(), USER()</li><li>加密函数：MD5(str), PASSWORD(str)单项加密</li><li>格式化函数：CONV(N,from_base,to_base)进制转换，FORMAT(x,n)将数字x格式化并以四十五入方式保留小数点后n位，以字符串形式返回。</li></ul><p>示例：<br>SELECT MOD(29,9);</p><p>select concat(vend_name, ‘(‘, vend_country, ‘)’) as ‘vendInfo’ from vendors order by vend_name;<br>select prod_id, quantity, item_price, quantity*item_price as expanded_price from orderitems where order_num = 20005;<br>select degrees(pi());<br>select substring(“abcdefg”, 1, 3);</p><p>select MONTH(now());<br>select datediff(now(), ‘2021-04-06’);<br>SELECT DATE_ADD(‘2018-05-01’,INTERVAL 1 DAY);<br>SELECT DATE_FORMAT(curtime(), ‘%W %M %Y’);<br>select DAYOFWEEK(“2021-04-08”);<br>select cust_id, order_num from orders where date(order_date) between ‘2005-09-01’ and ‘2005-09-30’;</p><p>select (case ‘b’<br>  when ‘a’ then ‘1’<br>  when ‘b’ then ‘2’<br>  else ‘3’<br>end) as ‘value’;</p><p>select CONNECTION_ID(), USER();<br>select conv(3,10,2);</p><p>分组数据(group by)：可以包含任意数目的列，一般使用group by子句时要用order by保证数据顺序<br>select vend_id, count(*) as num_prods from products group by vend_id;<br>过滤分组(having)：支持所有where操作符，having关键字需要出现在group后面，order by放在having后面。</p><p>select cust_id, count(<em>) as orders_num from orders group by cust_id having count(</em>) &gt;= 2;<br>select order_num, sum(quantity<em>item_price) ordertotal from orderitems<br>  group by order_num<br>  having sum(quantity</em>item_price) &gt;= 50<br>  order by ordertotal;</p><p>子查询：<br>select cust_name, cust_contact from customers<br>where cust_id in (<br>    select cust_id from orders<br>    where order_num in (select order_num from orderitems<br>        where prod_id = ‘TNT2’));</p><p>select t0.cust_name, t0.cust_state,<br>  (select count(*) from orders t1<br>    where t1.cust_id = t0.cust_id) as order_numbers<br>from customers t0<br>order by t0.cust_name;</p><p>联结表：实际上是第一个表的第一行与第二个表符合条件的每一行配对，即笛卡尔积(m*n)，联结表越多性能下降越厉害，有时候处理联结比子查询要快。<br>分为内联（inner join, 表相同，不会出现没有关联的行）、外联(left join, right join, 包含了没有关联的行)</p><p>select vend_name, prod_name, prod_price<br>from vendors v1 inner join products p1<br>on v1.vend_id = p1.vend_id<br>order by vend_name, prod_name;</p><p>select p1.prod_id, p1.prod_name from products p1, products p2<br>where p1.vend_id = p2.vend_id and p2.prod_id = ‘DTNTR’;</p><p>select c.cust_id, o.order_num<br>from customers c left join orders o<br>on c.cust_id = o.cust_id;<br>+———+———–+<br>| cust_id | order_num |<br>+———+———–+<br>|   10001 |     20005 |<br>|   10001 |     20009 |<br>|   10002 |      NULL |<br>|   10003 |     20006 |<br>|   10004 |     20007 |<br>|   10005 |     20008 |<br>+———+———–+<br>6 rows in set (0.00 sec)</p><p>select c.cust_id, o.order_num<br>from customers c right join orders o<br>on c.cust_id = o.cust_id;<br>+———+———–+<br>| cust_id | order_num |<br>+———+———–+<br>|   10001 |     20005 |<br>|   10001 |     20009 |<br>|   10003 |     20006 |<br>|   10004 |     20007 |<br>|   10005 |     20008 |<br>+———+———–+<br>5 rows in set (0.00 sec)</p><p>select c.cust_name, c.cust_id, count(o.order_num) as num_ord<br>from customers c left join orders o<br>on c.cust_id = o.cust_id<br>group by c.cust_id;</p><p>组合查询：也叫符合查询，多条select语句组成<br>union：求并集。<br>union all：包含重复的行</p><p>(<br>  select vend_id, prod_id, prod_price from products<br>  where prod_price &lt; 5<br>)<br>union<br>(<br>  select vend_id, prod_id, prod_price from products<br>  where vend_id in (1001, 1002)<br>)<br>order by vend_id, prod_price;</p><p>====其他知识</p><p>show variables like ‘slow_query_log’;    ##查询并设置慢SQL日志开关<br>set global slow_query_log=’ON’;</p><p>show variables like ‘long_query_time’;    ##查询并设置慢sql时间标准<br>set global long_query_time=0.3;</p><p>了解show命令<br>help show;<br>help create table;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; help show;</span><br><span class="line">Name: &#x27;SHOW&#x27;</span><br><span class="line">Description:</span><br><span class="line">SHOW has many forms that provide information about databases, tables,</span><br><span class="line">columns, or status information about the server. This section describes</span><br><span class="line">those following:</span><br><span class="line"></span><br><span class="line">SHOW &#123;BINARY | MASTER&#125; LOGS</span><br><span class="line">SHOW BINLOG EVENTS [IN &#x27;log_name&#x27;] [FROM pos] [LIMIT [offset,] row_count]</span><br><span class="line">SHOW CHARACTER SET [like_or_where]</span><br><span class="line">SHOW COLLATION [like_or_where]</span><br><span class="line">SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [like_or_where]</span><br><span class="line">SHOW CREATE DATABASE db_name</span><br><span class="line">SHOW CREATE EVENT event_name</span><br><span class="line">SHOW CREATE FUNCTION func_name</span><br><span class="line">SHOW CREATE PROCEDURE proc_name</span><br><span class="line">SHOW CREATE TABLE tbl_name</span><br><span class="line">SHOW CREATE TRIGGER trigger_name</span><br><span class="line">SHOW CREATE VIEW view_name</span><br><span class="line">SHOW DATABASES [like_or_where]</span><br><span class="line">SHOW ENGINE engine_name &#123;STATUS | MUTEX&#125;</span><br><span class="line">SHOW [STORAGE] ENGINES</span><br><span class="line">SHOW ERRORS [LIMIT [offset,] row_count]</span><br><span class="line">SHOW EVENTS</span><br><span class="line">SHOW FUNCTION CODE func_name</span><br><span class="line">SHOW FUNCTION STATUS [like_or_where]</span><br><span class="line">SHOW GRANTS FOR user</span><br><span class="line">SHOW INDEX FROM tbl_name [FROM db_name]</span><br><span class="line">SHOW MASTER STATUS</span><br><span class="line">SHOW OPEN TABLES [FROM db_name] [like_or_where]</span><br><span class="line">SHOW PLUGINS</span><br><span class="line">SHOW PROCEDURE CODE proc_name</span><br><span class="line">SHOW PROCEDURE STATUS [like_or_where]</span><br><span class="line">SHOW PRIVILEGES</span><br><span class="line">SHOW [FULL] PROCESSLIST</span><br><span class="line">SHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]</span><br><span class="line">SHOW PROFILES</span><br><span class="line">SHOW RELAYLOG EVENTS [IN &#x27;log_name&#x27;] [FROM pos] [LIMIT [offset,] row_count]</span><br><span class="line">SHOW SLAVE HOSTS</span><br><span class="line">SHOW SLAVE STATUS [FOR CHANNEL channel]</span><br><span class="line">SHOW [GLOBAL | SESSION] STATUS [like_or_where]</span><br><span class="line">SHOW TABLE STATUS [FROM db_name] [like_or_where]</span><br><span class="line">SHOW [FULL] TABLES [FROM db_name] [like_or_where]</span><br><span class="line">SHOW TRIGGERS [FROM db_name] [like_or_where]</span><br><span class="line">SHOW [GLOBAL | SESSION] VARIABLES [like_or_where]</span><br><span class="line">SHOW WARNINGS [LIMIT [offset,] row_count]</span><br><span class="line"></span><br><span class="line">like_or_where:</span><br><span class="line">    LIKE &#x27;pattern&#x27;</span><br><span class="line">  | WHERE expr</span><br><span class="line"></span><br><span class="line">If the syntax for a given SHOW statement includes a LIKE &#x27;pattern&#x27;</span><br><span class="line">part, &#x27;pattern&#x27; is a string that can contain the SQL % and _ wildcard</span><br><span class="line">characters. The pattern is useful for restricting statement output to</span><br><span class="line">matching values.</span><br><span class="line"></span><br><span class="line">Several SHOW statements also accept a WHERE clause that provides more</span><br><span class="line">flexibility in specifying which rows to display. See</span><br><span class="line">http://dev.mysql.com/doc/refman/5.7/en/extended-show.html.</span><br><span class="line"></span><br><span class="line">URL: http://dev.mysql.com/doc/refman/5.7/en/show.html</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统常用开发工具包整理</title>
      <link href="/2020/11/28/Linux-softwares-and-tools-in-common-use-for-developer/"/>
      <url>/2020/11/28/Linux-softwares-and-tools-in-common-use-for-developer/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>Linux系统常用开发工具包整理。</p><h1 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.9.27-1.el7.ans.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装docker失败</span></span><br><span class="line">yum update</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/yum.repos.d位置记载了软件的源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决问题后继续安装</span></span><br><span class="line">yum -y install docker-ce-20.10.17</span><br></pre></td></tr></table></figure><h1 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h1><h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录Windows一些好用的快捷操作</title>
      <link href="/2019/02/02/Record-some-useful-operation-in-Windows-system/"/>
      <url>/2019/02/02/Record-some-useful-operation-in-Windows-system/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>这篇文章记录的是Windows 10操作系统的使用的经验心得。</p><h1 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h1><h2 id="Win-R直接运行打开一些设置的快捷方式"><a href="#Win-R直接运行打开一些设置的快捷方式" class="headerlink" title="Win+R直接运行打开一些设置的快捷方式"></a>Win+R直接运行打开一些设置的快捷方式</h2><p>Win+R直接运行下列命令</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">mspaint</td><td style="text-align:left">开画图</td></tr><tr><td style="text-align:left">notepad</td><td style="text-align:left">记事本</td></tr><tr><td style="text-align:left">taskmgr</td><td style="text-align:left">任务管理器</td></tr><tr><td style="text-align:left">explorer</td><td style="text-align:left">文件浏览器</td></tr><tr><td style="text-align:left">regedit</td><td style="text-align:left">注册表编辑器</td></tr><tr><td style="text-align:left">cmd</td><td style="text-align:left">命令行</td></tr><tr><td style="text-align:left">mstsc</td><td style="text-align:left">远程桌面连接</td></tr><tr><td style="text-align:left">calc</td><td style="text-align:left">计算器</td></tr><tr><td style="text-align:left">services.msc</td><td style="text-align:left">服务</td></tr><tr><td style="text-align:left">control</td><td style="text-align:left">控制面板</td></tr><tr><td style="text-align:left">ncpa.cpl</td><td style="text-align:left">网络连接</td></tr><tr><td style="text-align:left">gpedit.msc</td><td style="text-align:left">组策略</td></tr><tr><td style="text-align:left">wf.msc</td><td style="text-align:left">高级安全 Windows Defender防火墙</td></tr><tr><td style="text-align:left">firewall.cpl</td><td style="text-align:left">Windows Defender 防火墙</td></tr><tr><td style="text-align:left">msconfig</td><td style="text-align:left">系统配置</td></tr><tr><td style="text-align:left">secpol.msc</td><td style="text-align:left">本地安全策略</td></tr><tr><td style="text-align:left">write</td><td style="text-align:left">写字板</td></tr><tr><td style="text-align:left">certmgr.msc</td><td style="text-align:left">证书管理实用程序</td></tr><tr><td style="text-align:left">compmgmt.msc</td><td style="text-align:left">计算机管理</td></tr><tr><td style="text-align:left">dcomcnfg</td><td style="text-align:left">系统组件服务</td></tr><tr><td style="text-align:left">cleanmgr</td><td style="text-align:left">垃圾整理</td></tr><tr><td style="text-align:left">devmgmt.msc</td><td style="text-align:left">设备管理器</td></tr><tr><td style="text-align:left">eventvwr</td><td style="text-align:left">事件查看器</td></tr><tr><td style="text-align:left">inetcpl.cpl</td><td style="text-align:left">Internet选项</td></tr><tr><td style="text-align:left">joy.cpl</td><td style="text-align:left">游戏控制器</td></tr><tr><td style="text-align:left">lusrmgr.msc</td><td style="text-align:left">本地用户和组</td></tr><tr><td style="text-align:left">main.cpl</td><td style="text-align:left">鼠标属性</td></tr><tr><td style="text-align:left">winver</td><td style="text-align:left">显示Windows版本信息</td></tr><tr><td style="text-align:left">msinfo32</td><td style="text-align:left">系统信息，查看有关硬件和软件设置高级信息</td></tr><tr><td style="text-align:left">appwiz.cpl</td><td style="text-align:left">控制面板中的程序</td></tr><tr><td style="text-align:left">perfmon</td><td style="text-align:left">性能监视器</td></tr><tr><td style="text-align:left">resmon</td><td style="text-align:left">资源监视器</td></tr><tr><td style="text-align:left">nslookup</td><td style="text-align:left">IP地址侦测器</td></tr><tr><td style="text-align:left">msra</td><td style="text-align:left">远程协助</td></tr><tr><td style="text-align:left">rstrui</td><td style="text-align:left">系统还原</td></tr><tr><td style="text-align:left">osk</td><td style="text-align:left">打开屏幕键盘</td></tr><tr><td style="text-align:left">opowercfg.cpl</td><td style="text-align:left">电源选项</td></tr><tr><td style="text-align:left">shrpubw</td><td style="text-align:left">共享文件夹设置工具</td></tr></tbody></table><h2 id="常见系统变量"><a href="#常见系统变量" class="headerlink" title="常见系统变量"></a>常见系统变量</h2><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">%SystemRoot%</td><td style="text-align:left">Windows系统文件夹的路径，通常是C:\Windows</td></tr><tr><td style="text-align:left">%windir%</td><td style="text-align:left">Windows安装目录的路径</td></tr><tr><td style="text-align:left">%SystemDrive%</td><td style="text-align:left">Windows安装所在的驱动器，通常是C:</td></tr><tr><td style="text-align:left">%TEMP% 或者 %TMP%</td><td style="text-align:left">用于临时文件的文件夹路径，C:\Users{用户名}\AppData\Local\Temp</td></tr><tr><td style="text-align:left">%USERPROFILE%</td><td style="text-align:left">C:\Users{用户名}</td></tr><tr><td style="text-align:left">%ProgramFiles%</td><td style="text-align:left">默认程序文件夹的路径，通常是 C:\Program Files</td></tr><tr><td style="text-align:left">%ProgramFiles(x86)%</td><td style="text-align:left">64位 Windows 中 32位程序文件夹的路径，通常是 C:\Program Files (x86)</td></tr><tr><td style="text-align:left">%APPDATA%</td><td style="text-align:left">C:\Users{用户名}\AppData\Roaming</td></tr><tr><td style="text-align:left">%Public%</td><td style="text-align:left">公共文件夹的路径，通常是 C:\Users\Public</td></tr><tr><td style="text-align:left">%USERNAME%</td><td style="text-align:left">当前登录的用户名，如Tsukasa</td></tr><tr><td style="text-align:left">%USERDOMAIN%</td><td style="text-align:left">当前用户所在的域的名称，如DESKTOP-02LVONB</td></tr><tr><td style="text-align:left">%COMPUTERNAME%</td><td style="text-align:left">计算机的名称，如DESKTOP-02LVONB</td></tr><tr><td style="text-align:left">%HOMEDRIVE%和%HOMEPATH%</td><td style="text-align:left">当前用户的主目录的驱动器和路径</td></tr><tr><td style="text-align:left">%PATH%</td><td style="text-align:left">环境变量路径，用于查找可执行文件的路径列表</td></tr></tbody></table><p>可以执行<code>echo 环境变量名</code>输出查看环境变量的值</p><h2 id="系统快捷键"><a href="#系统快捷键" class="headerlink" title="系统快捷键"></a>系统快捷键</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl+Shift+Enter</td><td style="text-align:left">以管理员身份打开</td></tr><tr><td style="text-align:left">Win+E</td><td style="text-align:left">打开文件浏览器explorer</td></tr><tr><td style="text-align:left">Win+I</td><td style="text-align:left">打开Windows设置（Win 10设置面板）</td></tr></tbody></table><h1 id="常见的问题处理"><a href="#常见的问题处理" class="headerlink" title="常见的问题处理"></a>常见的问题处理</h1><h2 id="关闭被占用的文件夹-端口占用问题"><a href="#关闭被占用的文件夹-端口占用问题" class="headerlink" title="关闭被占用的文件夹/端口占用问题"></a>关闭被占用的文件夹/端口占用问题</h2><ul><li>通过netstat命令找到占用端口的PID：<code>netstat -nao|findstr &quot;3306&quot;</code></li><li>杀掉进程：有2种方式，一种是<code>任务管理器</code>按PID排序查找，第二种是通过taskkill命令：<code>taskkill /pid 7023</code></li><li>如果要查找该PID的程序路径，可以通过tasklist或者wmic命令查找<br><code>wmic process get name,executablepath,processid|findstr [$pid]</code><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404191705298.jpg" alt=""><br>或者<code>tasklist |findstr &quot;5988&quot;</code><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202404191709495.jpg" alt=""></li></ul><h2 id="清除系统DNS缓存"><a href="#清除系统DNS缓存" class="headerlink" title="清除系统DNS缓存"></a>清除系统DNS缓存</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查看当前计算机网络信息 --&gt;</span><br><span class="line"><span class="built_in">ipconfig</span> </span><br><span class="line">&lt;!-- 查看更详细的网络信息 --&gt;</span><br><span class="line"><span class="built_in">ipconfig</span> /all</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看DNS缓存信息 --&gt;</span><br><span class="line"><span class="built_in">ipconfig</span> /displaydns</span><br></pre></td></tr></table></figure><h2 id="查询并设置TCP动态端口范围"><a href="#查询并设置TCP动态端口范围" class="headerlink" title="查询并设置TCP动态端口范围"></a>查询并设置TCP动态端口范围</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 show dynamicport tcp</span><br><span class="line">&lt;!-- 下面设置完成后要重启电脑 --&gt;</span><br><span class="line">netsh int ipv4 <span class="built_in">set</span> dynamicport tcp <span class="built_in">start</span>=<span class="number">9000</span> num=<span class="number">10000</span></span><br></pre></td></tr></table></figure><h2 id="端口转发-NAT-规则设置"><a href="#端口转发-NAT-规则设置" class="headerlink" title="端口转发(NAT)规则设置"></a>端口转发(NAT)规则设置</h2><p>将访问本机 5344 端口的流量转发到 10.8.1.2 的 5344 端口。您可以使用 netsh 命令来实现这个目标。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">5344</span> listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> connectport=<span class="number">5344</span> connectaddress=<span class="number">10</span>.<span class="number">8</span>.<span class="number">1</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 查看端口转发规则列表 --&gt;</span><br><span class="line">netsh interface portproxy show v4tov4</span><br></pre></td></tr></table></figure></p><h2 id="查看和设置tcp-ipv4动态端口范围"><a href="#查看和设置tcp-ipv4动态端口范围" class="headerlink" title="查看和设置tcp ipv4动态端口范围"></a>查看和设置tcp ipv4动态端口范围</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看tcp ipv4动态端口范围</span><br><span class="line">netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line"># 保留 <span class="number">6942</span>~<span class="number">6951</span> 这<span class="number">10</span>个端口给应用程序使用</span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=<span class="number">6942</span> numberofports=<span class="number">10</span></span><br><span class="line"># 保留 <span class="number">9090</span> 端口给应用程序使用</span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=<span class="number">9090</span> numberofports=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 取消保留端口</span><br><span class="line">netsh int ipv4 delete excludedportrange protocol=tcp startport=<span class="number">9090</span> numberofports=<span class="number">1</span></span><br><span class="line"># 重置所有端口转发规则</span><br><span class="line">netsh interface portproxy reset</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分析Java Web技术内幕读书笔记</title>
      <link href="/2019/01/23/Notes-for-In-depth-analysis-of-Java-Web-technology-insider/"/>
      <url>/2019/01/23/Notes-for-In-depth-analysis-of-Java-Web-technology-insider/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="深入Web请求过程"><a href="#深入Web请求过程" class="headerlink" title="深入Web请求过程"></a>深入Web请求过程</h1><p>Web请求过程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">                                http        +----------+                                                                                                     </span><br><span class="line">                        +---------------------&gt;   DNS    |                                                                                                     </span><br><span class="line">                        |                     +----------+                                                                                                     </span><br><span class="line">                        |                                                                                                                                      </span><br><span class="line">                        |                            http             +----------------------+                                                                 </span><br><span class="line">                        |    +----------------------------------------&gt;        CDN           |         http反向代理                                                </span><br><span class="line">                        |    |                                        |css/js/img等静态资源   |&lt;-----------------------+                                        </span><br><span class="line">                        |    |                                        +----------------------+                        |                                        </span><br><span class="line">                        |    |                                            +-------------------------------------------v---------+                              </span><br><span class="line">              +---------|----|----+        +--------------------+         | +------------+      +----------------------------+  |                              </span><br><span class="line">              |   User Browser    |        |Elastic Load Balance|         | |Load Balance|      |    服务端系统               |  |                              </span><br><span class="line">--------------&gt;  css/html/js/img  |------&gt; |    +---------+     ------------&gt; +---------+|      |                            |  |                              </span><br><span class="line">              |                   |  http  |    |   ELB   |     |  http   | | |   SLB   ||      |  +----------+  +---------+ |  |                              </span><br><span class="line">              +-------------------+        |    +---------+     |         | | +---------+|------&gt;  |          |  |         | |  |                              </span><br><span class="line">                                           |    +---------+     |         | | +---------+|      |  |  AZ 1    |  |   AZ 2  | |  |                              </span><br><span class="line">                                           |    |   ELB   |     |         | | |   SLB   ||      |  +----------+  +---------+ |  |                              </span><br><span class="line">                                           |    +---------+     |         | | +---------+|      +----------------------------+  |                              </span><br><span class="line">                                           +--------------------+         | +------------+       ^         ^               ^    |                              </span><br><span class="line">                                                                          +----------------------|---------|---------------|----+                              </span><br><span class="line">                                                                                                 |         |               v                                   </span><br><span class="line">                                                                                     +-----------v-+   +---v--------+    +--------+                            </span><br><span class="line">                                                                                     |             |   |  文件系统   |    |        |                            </span><br><span class="line">                                                                                     |  分布式缓存  |   +------------+    | 数据库 |                            </span><br><span class="line">                                                                                     |             |                     |        |                            </span><br><span class="line">                                                                                     +-------------+                     +--------+                            </span><br></pre></td></tr></table></figure><h2 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h2><h3 id="资源记录-Resource-Records"><a href="#资源记录-Resource-Records" class="headerlink" title="资源记录(Resource Records)"></a>资源记录(Resource Records)</h3><p>所有RRs的顶层格式都相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">                                1  1  1  1  1  1</span><br><span class="line">  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                                               |</span><br><span class="line">/                                               /</span><br><span class="line">/                      NAME                     /</span><br><span class="line">|                                               |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                      TYPE                     |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                     CLASS                     |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                      TTL                      |</span><br><span class="line">|                                               |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                   RDLENGTH                    |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|</span><br><span class="line">/                     RDATA                     /</span><br><span class="line">/                                               /</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure><p>格式说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NAME            an owner name, i.e., the name of the node to which this</span><br><span class="line">                resource record pertains.</span><br><span class="line"></span><br><span class="line">TYPE            two octets containing one of the RR TYPE codes.</span><br><span class="line"></span><br><span class="line">CLASS           two octets containing one of the RR CLASS codes.</span><br><span class="line"></span><br><span class="line">TTL             a 32 bit signed integer that specifies the time interval</span><br><span class="line">                that the resource record may be cached before the source</span><br><span class="line">                of the information should again be consulted.  Zero</span><br><span class="line">                values are interpreted to mean that the RR can only be</span><br><span class="line">                used for the transaction in progress, and should not be</span><br><span class="line">                cached.  For example, SOA records are always distributed</span><br><span class="line">                with a zero TTL to prohibit caching.  Zero values can</span><br><span class="line">                also be used for extremely volatile data.</span><br><span class="line"></span><br><span class="line">RDLENGTH        an unsigned 16 bit integer that specifies the length in</span><br><span class="line">                octets of the RDATA field.</span><br></pre></td></tr></table></figure><p>一级域名：主机名+域名后缀。例如：tsukasa.moe<br>二级域名：一级域名下面的主机名。例如：www.tsukasa.moe</p><p>浏览器缓存-&gt;操作系统缓存(host)-&gt;本地域名服务器(LDNS)-&gt;根域名服务器-&gt;主域名服务器(gTLD Server)-&gt;Name Server</p><h3 id="DNS工具"><a href="#DNS工具" class="headerlink" title="DNS工具"></a>DNS工具</h3><p>host<br>nslookup<br>dig</p><p>这三个工具功能丰富度、复杂度依次递增，其中nslookup在windows中也可以使用。</p><p>dig命令用法：</p><ul><li>dig tsukasa.moe</li><li>dig tsukasa.moe ns</li><li>dig tsukasa.moe mx</li><li>dig tsukasa.moe +trace</li></ul><p>nslookup命令用法：可以使用交互或非交互模式进行查询。</p><ul><li>直接输入nslookup进入交互式模式，默认连接到默认域名服务器（即/etc/resolv.conf的第一个dns地址），输入域名即可查询。</li><li>交互模式中，使用set type=mx可以修改要查询的记录类型，再输入域名即可返回相应结果</li><li>非交互模式下，nslookup - 127.0.0.1即设置域名服务器ip</li></ul><p>host命令用法：<br>host baidu.com -&gt; 默认输出只有A和MX记录<br>host -a baidu.com -&gt; 输出与dig baidu.com一样的信息<br>host -t ns baidu.com -&gt; -t是指定type，可以用host –help查看<br>host -C  baidu.com -&gt; 查询SOA权威域名服务器</p><h3 id="常见域名解析记录类型"><a href="#常见域名解析记录类型" class="headerlink" title="常见域名解析记录类型"></a>常见域名解析记录类型</h3><p>TTL：缓存失效时间。<br>MX优先级：数值越低，优先级越高</p><table><thead><tr><th>记录类型</th><th>定义</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>A记录</td><td>将域名指向一个ip</td><td>主机记录www，记录值127.0.0.1</td><td>将二级域名www.tsukasa.moe映射到127.0.0.1</td></tr><tr><td>CNAME记录</td><td>将域名指向另一个域名，再由另一个域名提供IP地址</td><td>主机记录@，记录值www</td><td>将</td></tr><tr><td>MX记录</td><td>设置邮箱，让邮箱能够收到邮件</td><td>主机记录@，记录值填域名m.tsukasa.moe或IP地址，MX优先级5</td><td>邮箱地址为xxx@m.tsukasa.moe</td></tr><tr><td>NS记录</td><td>将子域名交给其他DNS服务商解析</td><td>主机记录www，记录值DNS服务器域名f1g1ns1.dnspod.net</td><td>将子域名www.tsukasa.moe授权给DNS服务器解析</td></tr><tr><td>AAAA记录</td><td>将域名指向一个 IPv6 地址</td><td>主机记录www，记录值ipv6地址1030::C9B4:FF12:48AA:1A2B，线路类型为联通</td><td>连通用户单独访问1030::C9B4:FF12:48AA:1A2B</td></tr><tr><td>SRV记录</td><td>标识某台服务器使用了某个服务，常见于微软系统的目录管理</td><td>主机记录_sip._tcp（格式：服务的名字.协议的类型），记录值0 5 5060 sipserver.tsukasa.moe（格式：优先级 权重 端口 目标地址）</td></tr></tbody></table><p>参考</p><p><a href="https://tools.ietf.org/html/rfc1035">https://tools.ietf.org/html/rfc1035</a><br><a href="https://skyao.io/learning-dns/">https://skyao.io/learning-dns/</a><br><a href="http://luodw.cc/2015/12/27/dns03/">http://luodw.cc/2015/12/27/dns03/</a><br><a href="https://blog.csdn.net/a19881029/article/details/19486949">https://blog.csdn.net/a19881029/article/details/19486949</a></p><h2 id="CDN工作机制"><a href="#CDN工作机制" class="headerlink" title="CDN工作机制"></a>CDN工作机制</h2><p>内容分布网络(Centent Delivery Network)：一种先进流量分配网络，用户可以就近边缘节点访问网站发布内容，响应快速。<br>CDN=镜像+缓存+整体负载均衡</p><p>负载均衡通常有3种架构：链路负载均衡、集群负载均衡、操作系统负载均衡</p><ul><li>链路：DNS解析来完成</li><li>集群：分硬件、软件负载均衡两种，硬件负载均衡如F5设备，较为昂贵。</li></ul><h1 id="深入分析Java-I-O的工作机制"><a href="#深入分析Java-I-O的工作机制" class="headerlink" title="深入分析Java I/O的工作机制"></a>深入分析Java I/O的工作机制</h1><p>I/O接口分类</p><ul><li>字节：InputStream和OutputStream</li><li>字符：Reader和Writer</li><li>磁盘：File</li><li>网络：Socket</li></ul><p>前面两组主要是传输数据的数据格式，后两组是传输数据的方式，可以组合使用。<br>文件是操作系统与磁盘交互的最小单元，最小的存储单元是字节，而非字符。</p><p>1.标准访问文件的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">           read()                              write()                   </span><br><span class="line">             ^                                     |                     </span><br><span class="line">             |                                     v                     </span><br><span class="line">     +---------------------------------------------------------+         </span><br><span class="line">     | +-----------------+                +-----------------+  |         </span><br><span class="line">     | |   应用缓存       | 用户地址空间    |    应用缓存     |   |         </span><br><span class="line">     | +-----------------+                +-----------------+  |         </span><br><span class="line">     +---------^-----------------------------------------------+         </span><br><span class="line">               |                                   |                     </span><br><span class="line">---------------|-----------------------------------|---------------------</span><br><span class="line">               |                                   v                     </span><br><span class="line">     +---------------------------------------------------------+         </span><br><span class="line">     | +-----------------+                +-----------------+  |         </span><br><span class="line">     | | 高速页面缓存     | 内核地址空间    |  高速页面缓存    |  |         </span><br><span class="line">     | +-----------------+                +-----------------+  |         </span><br><span class="line">     +---------------------------------------------------------+         </span><br><span class="line">               ^                                   |                     </span><br><span class="line">               |                                   |                     </span><br><span class="line">               |                                   v                     </span><br><span class="line">            +-----------------------------------------+                  </span><br><span class="line">            |            物理磁盘                      |                  </span><br><span class="line">            |                                         |                  </span><br><span class="line">            +-----------------------------------------+                  </span><br></pre></td></tr></table></figure><p>2.直接I/O方式：应用程序直接访问磁盘数据，而不经过操作系统内核缓冲区，加载速度慢。<br>3.同步访问：性能较差。<br>4.异步访问：当请求数据返回后继续处理下面的操作，可以提高应用效率，但不改变访问文件的效率。<br>5.内存映射：将内存中某一块区域与磁盘中的文件关联起来，访问内存中的一段数据时，转为访问文件的某一段数据。</p><p>Java序列化</p><ul><li>将一个对象转化为二进制表示的字节数组，通过保存或者转移这些字节数据可以实现持久化，继承java.io.Serializable接口即可实现序列化。反序列化则是将这个字节数组重新构造成对象。</li><li>序列化的属性是对象，则属性类也需要实现Serializable接口</li></ul><p>网络I/O</p><ul><li>三次握手四次挥手</li><li>TCP拥塞控制</li></ul><p>Java Socket机制</p><ul><li>应用程序间通信，通过Socket建立连接，建立连接则必须由底层TCP/IP建立TCP连接，一台主机上有多个程序，通过TCP或UDP的地址即端口号可以与对应的应用进行通信。</li></ul><h2 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h2><p>BIO(阻塞I/O)：可以采用线程池减少线程创建和回收的成本，提高重用率。<br>NIO：Channel和Selector关键组件。有个比喻很形象，如果把Channel比作汽车或高铁，那么Selector比作车辆运行调度系统，负责监控每辆车的状态，Buffer则是汽车上(Channel)的座位。</p><p>Buffer工作方式：<br>position, capacity, limit, mark</p><table><thead><tr><th></th><th>HeapByteBuffer</th><th>DirectByteBuffer</th></tr></thead><tbody><tr><td>存储位置</td><td>Java Heap中</td><td>Native内存中</td></tr><tr><td>I/O</td><td>需要在用户地址空间与内核地址空间中复制数据</td><td>不需要复制</td></tr><tr><td>内存管理</td><td>Java GC回收，创建和开销少</td><td>System.gc()释放Java对象引用的DirectByteBuffer内存空间，长期持有可能导致Native内存泄漏，创建和回收内存开销大</td></tr><tr><td>适用场景</td><td>并发连接数少于1000，I/O操作较少</td><td>数据量大、生命周期长的情况</td></tr></tbody></table><h1 id="深入理解Java-Web中的编码问题"><a href="#深入理解Java-Web中的编码问题" class="headerlink" title="深入理解Java Web中的编码问题"></a>深入理解Java Web中的编码问题</h1><p>编码：字符编码，字符到字节，转为机器能够理解的语言，计算机只认识0和1。<br>解码：字节流解码，字节到字符，转为人类容易理解的语言。</p><p>无论是存储还是传输，不管是文件还是图片、视频，在计算机存储上一视同仁，全部是0和1的序列，都以字节的形式存在。<br>从方便人们阅读的角度，文件分为文本文件和二进制文件（非文本文件），文本文件的可视形式是文本字符，例如Test.java，存储时以某种编码格式进行编码，显示时以对应编码格式进行解码，方便文本编辑器、查看。<br>不同的编程语言中，提供了专门用于读写文本文件的类。Java中文本文件读写有BufferedReader和BufferedWriter.</p><p>I/O操作中的编码</p><ul><li>写入存储要编码，对磁盘写，网络上写，传输以流的方式进行，如果读取的是字符需要编码为字节，写入的内容需要指定编码Charset</li><li>读取要解码，对磁盘读出来的数据解码，对网络上获取的流解码，读取字节解码为字符，具体解码过程需要用户指定Charset，默认使用本地环境的字符集，中文环境是GBK编码</li><li>用什么编码写入，就用什么编码读出来，参考示例程序。</li></ul><p>内存操作中的编码</p><ul><li>常见的是字符串到字节的数据类型转换，String str = “中文字符串”; str.getBytes(‘UTF-8’); String s = new String(b, “UTF-8”);</li><li>Charset类提供encode, decode方法，分别对应<code>char[]到byte[]</code>和<code>byte[]到char[]</code>，通过forName(String)方法设置字符集<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Charset</span> <span class="variable">charset</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">byteBuf</span> <span class="operator">=</span> charset.encode(str);</span><br><span class="line"><span class="type">CharBuffer</span> <span class="variable">charBuf</span> <span class="operator">=</span> charset.decode(byteBuf);</span><br></pre></td></tr></table></figure></li></ul><p>乱码问题<br>本质是编解码使用了不同的编码格式，乱码的呈现是屏幕，是人的视觉感受。出现在磁盘文件的读写，网络数据传输，数据库存取。</p><p>编码的类型：</p><p>todo…</p><p>参考：<br><a href="https://blog.csdn.net/Alexshi5/article/details/79513018">https://blog.csdn.net/Alexshi5/article/details/79513018</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语身体表现词语大杂烩</title>
      <link href="/2018/03/01/bodily-representaion-japanese-phrase/"/>
      <url>/2018/03/01/bodily-representaion-japanese-phrase/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章就当个小词典吧，称不上总结，只是简单整理《身体表现词典》讲到的一些惯用语。基本上是按照从头到脚的顺序整理的，请大家随意食用：</p><ul><li>头部</li><li>上身</li><li>下身</li><li>其他</li></ul><h1 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h1><h2 id="頭"><a href="#頭" class="headerlink" title="頭"></a>頭</h2><h3 id="頭（あたま）"><a href="#頭（あたま）" class="headerlink" title="頭（あたま）"></a>頭（あたま）</h3><ul><li><strong>頭隠して尻隠さず：</strong>本人はうまく隠した（隠れた）つもりでも、他人の目にはすっかり丸見えであるというような場面で、この表現がよく使われます。<br>顾头不顾尾，也可指小朋友「かくれんぼ」时给人们的蠢萌蠢萌的可爱形象=￣ω￣=。</li><li><strong>頭が上がらない：</strong>引け目を感じて対等な関係に立てない。<br>字面意思是抬不起头来，因为觉得欠对方的，或者受过对方恩惠，又或者曾做过对不起对方的事，因此遇到事情无法对对方强硬起来。</li><li><strong>頭が重い：</strong>二つの意味がある。一つは、身体的に感じる「重さ」、寝不足か、あるいは熱があるか何かで、頭がどんより重く感じられることを表します。もう一つは、悩み事や心配ごとなどがあって、どうも気分がすっきりしない、気分が晴れない、という感じを表します、心理的な「重さ」を表します。<br>身体上的头沉，头晕，另一个意思是有担心的事情，遇到烦恼的事情而心情沉重。</li><li><strong>頭が固い：</strong>人の意見や新しいことをなかなか受け入れようとしない、融通の利かない態度。<br>不听取别人意见，不接受新事物，头脑顽固的人真的是让人讨厌啊。</li><li><strong>頭が切れる：</strong>洞察力のある賢い人を「頭が切れる人」と呼ぶことが多いようです。<br>形容脑子转得快，聪明活跃。</li><li><strong>頭が下がる：</strong>ある事柄や、人の様子を見て、思わず敬服してしまう、感服してしまう気持ち。<br>钦佩，佩服，大佬请喝茶吧。</li><li><strong>頭が低い：</strong>「控え目で、謙虚な態度」を目指す言葉。<br>形容一个人很谦虚。和「腰が低い」意思一样w。</li><li><strong>頭から水を浴びよう：</strong>予期しない出来事に会って、ぞっとする感じ。<br>形容万分吃惊，就像你头上突然被别人浇水一样，心中顿时万只草泥马奔腾忍不住大吼：卧槽是谁干的Pia!(ｏ ‵-′)ノ”(ノ﹏&lt;。)。</li><li><strong>頭から湯気を立てる：</strong>顔を真っ赤にして怒っている様子。<br>头上要冒烟，怒气冲冲。彼女に怒らせるなら，殺されるぞ(ಥ _ ಥ)。</li><li><strong>頭でっかち：</strong>経験の裏打ちもないのに、理屈や知識ばかりを振りかざす態度、あるいはそういう人物を目指す時によく使われます。人に面を向って使う言葉ではありません。<br>除了指人和事物头重脚轻的不平衡感，经常形容光说不练，空谈理论脱离实际的人。</li><li><strong>頭でっかち尻すぼり：</strong>始めは威勢が良かったのに、終わりになると最初の勢いはどこやら、見る影もないほど力がなくなってしまう様子。<br>虎头蛇尾，开头很好，结尾很烂。</li><li><strong>頭に入れる：</strong>しっかり記憶をとどめる、頭に叩き込むと同じ意味です。<br>请把这些知识装入头脑，好好记住哦(づ￣ 3￣)づ。</li><li><strong>頭の上の蝿も追えない：</strong>自分の頭の上にとまっている蝿すら追い払えない、つまり自分のことでも何一つ自分で解決できない不甲斐ない態度を指す言葉です。<br>自顾不暇，连自己头上的苍蝇都赶不走，就连自己的事情都做不好。</li><li><strong>頭の黒い鼠：</strong>鼠は家に住んでいる小泥棒というわけです、そこで鼠のように何か盗んでいく人間を指す。<br>家贼，指身边手脚不干净的人。当然小孩子ケーキをこっそり食べた也可以说是「頭の黒い鼠」(●’◡’●)。</li><li><strong>頭の中が白くなる：</strong>あんまりの出来事にショックを受けて、頭の中の回線がショートでもしてしまったように思考停止状態になる。<br>对突发状况头脑中一片白色，无法思考。</li><li><strong>頭のてっぺんから足の爪先まで：</strong>人の体の，上から下まで残らず。全身。また，全身·全体にわたっているさま。<br>全身上下。</li><li><strong>頭を痛める：</strong>心配事を抱えて悩んだり、苦しんだりしている様子。<br>烦恼，伤脑经哦。</li><li><strong>頭を掻く：</strong>ちょっとした失敗をしたり、照れくさい時、きまりの悪い時に、人は頭を掻いてごまかします。<br>犯了小失误，害羞了想萌混过关w。</li><li><strong>頭を下げる：</strong>お辞儀をする。<br>謝る、謝罪する。<br>敬服する、感服する。<br>本心から謝る気はないが謝罪の態度を示しておいた方が、相手の納得を得られ、事が穏やかに収まる、と判断した場合、不本意ではあっても敢えて「頭を下げる」ことがあります。<br>四个意思：1.鞠躬行礼；2.谢罪，表示歉意；3.钦佩，佩服；4.以大局为重，暂时选择服从。</li><li><strong>頭を絞る：</strong>難問に直面して、おれこれ考えを巡らし解決策を考えること。「知恵を絞る」と同じ意味の言葉です。<br>绞尽脑汁想办法。</li><li><strong>頭を突っ込む：</strong>仕事や仲間やグループなどに加わる。かかわりを持つ。「首を突っ込む」と同じ意味です。<br>介入，插手。</li></ul><h3 id="頭（ず）"><a href="#頭（ず）" class="headerlink" title="頭（ず）"></a>頭（ず）</h3><ul><li><strong>頭を冷やす：</strong>興奮を抑えて気持を落ち着かせること。<br>cool down，兄弟冷静。</li><li><strong>頭をもたげる：</strong>持ち上げる、起こす。<br>产生某种心情；露头角，势力抬头。</li><li><strong>頭が高い：</strong>相手を見下げる態度で、無礼である。横柄である。<br>高傲，妄自尊大，看不起人。</li><li><strong>頭痛の種：</strong>頭痛を引き起こすような原因、つまり心配事、悩み事の原因。<br>烦心事的真正原因。</li><li><strong>頭抜ける：</strong>普通のものと比べて遥かに水準を超えている、並々ではない。<br>超水准发挥，运动比赛时候如果谁都想。</li></ul><h3 id="頭（とう）"><a href="#頭（とう）" class="headerlink" title="頭（とう）"></a>頭（とう）</h3><ul><li><strong>頭角を表す：</strong>才能や業績が他のものより際だって優れている。<br>崭露头角，显示出与众不同的学识与才能，这不是说我吗。</li></ul><h2 id="髪"><a href="#髪" class="headerlink" title="髪"></a>髪</h2><h3 id="髪（かみ）"><a href="#髪（かみ）" class="headerlink" title="髪（かみ）"></a>髪（かみ）</h3><ul><li><strong>髪を逆立てる：</strong>それほど怒りが激しく激高しているということです。<br>气的头发都直立起来了。</li><li><strong>髪を振り乱す：</strong>髪の乱れるも気にかけず、一心不乱に何かに立ち向かっている。</li><li><strong>髪結いの亭主：</strong>妻の働きで養われている夫。<br>说的是靠妻子养活的男人。</li><li><strong>後ろ髪を引かれる：</strong>未練が残って、きっぱりと思い切れないこと。<br>依依不舍，不想离开你。</li><li><strong>女の髪の毛には大象もつながる：</strong>女の色香が男をひきつけ，男を支配する力の強いことのたとえ。<br>女性用自己的美色与魅力吸引男人，让男性深深陷入其中无法自拔。</li><li><strong>苦髪楽爪：</strong>苦労しているときは髪の伸びが早く、楽をしているときは爪の伸びが早いということ。</li><li><strong>とも白髪：</strong>夫婦が一緒に白髪になるまで長生きする。<br>白头偕老，世界上最幸福的事情莫过于此吧(<em> ￣3)(ε￣ </em>)*)</li></ul><h2 id="額（ひたい）"><a href="#額（ひたい）" class="headerlink" title="額（ひたい）"></a>額（ひたい）</h2><ul><li><strong>額を集める：</strong>集まって相談する。<br>召集到一起商议。</li><li><strong>額に汗する：</strong>額に球の汗が流れるほど一所懸命働いている。<br>赞扬一个人很努力工作。</li><li><strong>額の向こう傷：</strong>単に「向こう傷」とだけ言うことの方が多いようです、それは勇気の印、名誉の負傷ということになります。<br>索隆说「背中の傷は剣士の恥だ」，然后让世界第一的剑豪在胸膛留下刀伤，面对如此的强敌，为了守护与朋友的约定，勇敢战斗的索隆虽然输了但真的是太帅了。</li></ul><h2 id="顔（かお）"><a href="#顔（かお）" class="headerlink" title="顔（かお）"></a>顔（かお）</h2><ul><li><strong>顔色をうかがう：</strong>相手の顔色に応じて、こちらの出方を決めるわけです。<br>察言观色。</li><li><strong>顔から火が出る：</strong>恥ずかしさのために赤面する、恥ずかしくて顔が火照る。<br>巧妙的比喻害羞得脸都红了，火辣辣的。</li><li><strong>顔が売れる：</strong>世間に広く知られる。有名になる。<br>形容广为人知，有名望的人与商品。</li><li><strong>顔が利く：</strong>信用や権力があって，相手に便宜をはかってもらうことができる。<br>有面子，有势力，吃得开。</li><li><strong>顔を揃う：</strong>必要な人が全員集まって。<br>把人凑齐。</li><li><strong>顔が立つ：</strong>体面が保たれる。<br>保留颜面，有面子。</li><li><strong>顔を潰れる：</strong><br>丢脸；如果是颜面尽失，脸都丢光了是「顔を丸潰れる」。</li><li><strong>顔に泥を塗る：</strong>人に恥をかかせる、その人の面目を潰すという意味で使われます。<br>给别人脸上抹黑，让他羞愧得无地自容。</li><li><strong>顔向けできない：</strong>「合わせる顔がない」と似た意味です、相手に申し訳ないことをしてしまったり、不義理をしていて相手の顔をまともに見られないことを表す言葉です。<br>觉得有愧对方，没有脸见对方，不敢正视对方的双眼。</li><li><strong>顔を洗って出直す：</strong>今までの至らなかった態度をきちんと改めてから相手に会うという比喩表現として使われます。<br>一改之前的态度重新过来。</li><li><strong>顔を合わせる：</strong>二つの意味があります：<br>会う。<br>（試合などで）対戦する。<br>两个意思：1.见面；2.比赛中交锋。</li><li><strong>顔を貸す：</strong>誰かに何か用があって他の場所に呼び出す時には「ちょっと顔を貸してくれ」というような言い方をします。<br>赏个脸，给个面子吧。</li><li><strong>顔を出す：</strong><br>隠れていたものが現れ出る、お日さまが顔を出す<br>会合などに出席する。<br>人の家を訪ねる。<br>露脸，出面；出席；访问。</li><li><strong>大きな顔をする：</strong>偉そうに振る舞う·威張った顔をする。<br>很了不起的样子，神气十足摆架子。</li><li><strong>親の顔が見たい：</strong>しつけの悪いよその子の言動に，驚きあきれて言う語。<br>看到言行无礼的熊孩子时极其惊讶甚至到了看看他父母是怎么教育他的。</li><li><strong>難しい顔：</strong>（横からちょっと声もかけにくいような）不機嫌そうな·不愉快そうな顔。<br>思考难题时的表情，脸上写满了不开心。</li></ul><h2 id="面（つら）"><a href="#面（つら）" class="headerlink" title="面（つら）"></a>面（つら）</h2><ul><li><strong>面の皮が厚い：</strong>恥知らず厚かましく図々しい人。<br>脸皮厚，我从未见过有如此厚颜无耻之人。</li><li><strong>泣き面に蜂：</strong>泣いている顔をさらに蜂が刺す。不運や不幸が重なることのたとえ。<br>祸不单行。</li><li><strong>吠え面かく：</strong>悔しくて大声を出して泣いている。<br>后悔不已留下了眼泪இ௰இ。</li><li><strong>横っ面を引っ叩く：</strong>パシーンと音がするほど手荒く頬を張り飛ばす。<br>表示我真想一巴掌拍过去。</li></ul><h2 id="眉（まゆ）"><a href="#眉（まゆ）" class="headerlink" title="眉（まゆ）"></a>眉（まゆ）</h2><ul><li><strong>眉一つ動かさない：</strong>「どんなことにも動じない、顔色一つも変えない」態度を形容する言葉です。<br>形容临危不惧，毫不动摇。</li><li><strong>眉に唾を付ける：</strong>人に騙されないように用心してかかる·警戒することを「眉に唾をつける」ということになりました。</li><li><strong>眉に火がつく：</strong>危険がそこまで迫っているという意味を表します。<br>火烧眉毛，情况紧急。</li><li><strong>眉を曇らす：</strong>「（心配事や悩み事のせいで）表情を曇らせ、暗い顔をしている」と言います。<br>面带愁容，布满阴云。</li><li><strong>眉を開く：</strong>（悩みから解放されて）明るい表情を取り戻すこと。<br>舒展愁容，心情放晴，变得积极起来。</li><li><strong>眉を顰める：</strong>（何か不愉快な事を見たり聞いたりして）不快な気分になっている場合に多く使われる言葉です。<br>皱眉，心中不快。</li></ul><h2 id="目（め）"><a href="#目（め）" class="headerlink" title="目（め）"></a>目（め）</h2><ul><li><strong>目から鱗が落ちる：</strong>あることがきっかけとなって，迷いからさめたり，物事の実態がわかるようになる。<br>以某些契机，从迷茫中醒悟过来，茅塞顿开。</li><li><strong>目から鼻へ抜ける：</strong>りこうで機転がきく。また，抜け目がない。<br>君は本当に賢い，这句短语就是聪明，伶俐的意思，啊哈哈哈(￣▽￣)”。</li><li><strong>目が利く：</strong>物の価値を識別する眼力が高い。<br>有眼力，鉴别力强。</li><li><strong>目頭（めがら）が熱くなる：</strong>感動して涙が出そうになる。「熱いものが込み上げる」と同じ意味です。うれしい時の涙、悲しい時の涙は水っぽく、悔し涙や怒りの涙は塩辛く、しょっぱいのだそうです。<br>感动得热泪盈眶，听说心情不同眼泪的味道也不同，以后有机会可以尝尝看இ௰இ。</li><li><strong>目くじらを立てる：</strong>目をつり上げる。ささいなことを取り立ててとがめることにいう。目角を立てる。<br>过分追究，责难。</li><li><strong>目には目を：</strong>「目には目を」の後には「歯には歯を」と続きます。<br>以牙还牙。</li><li><strong>目にもの見せる：</strong>ひどい目にあわせることによって相手に身に見て分からせるという意味で使われます。<br>思い知らせる、适用于对方太嚣张，让其尝尝什么是厉害，教他重新做人。</li><li><strong>目に物言わす：</strong></li><li><strong>目の色を変える：</strong>何かに夢中になったり、怒ったり、興奮して目つきが変わる様子を表します。<br>形容愤怒、惊讶或全神贯注的样子。</li><li><strong>目の中へ入れても痛くない：</strong>祖父母や両親が、小さな子供を可愛がるような気持を表す、本当に可愛くてたまらない気持を俗語では「食べてしまいたい」です。<br>很疼爱小孩子。</li><li><strong>目を細める：</strong>うれしいそうに微笑んでいる様子を言います。<br>眯着眼睛笑，很开森的样子。</li><li><strong>目も当てられない：</strong>（あんまりにひどい状態で）直視できない、目を向けられない。<br>惨不忍睹。</li><li><strong>目を奪われる：</strong>見とれて，他の物が目にはいらない。<br>看得入迷，视线无法从中移开。</li><li><strong>目を覚ます：</strong>三つの意味があります。<ul><li>眠りからさめる。</li><li>迷いや誤りを自覚し，本来あるべき状態になる。</li><li>抑えられていた感情などが，何かをきっかけに動き始める。<br>原意是从睡眠中醒来，引申义有两个：1.觉悟后回到正道；2.被压抑的情感开始苏醒</li></ul></li><li><strong>目を皿にする：</strong>不思議なものを見たり、驚いたり、何かを探している時に、かっと大きく目を見開く様子を描写する言葉です。<br>看到不可思议的事物，眼睛睁的贼大很惊讶。</li><li><strong>目を白黒させる：</strong>せわしなく目玉を動かす。驚くさま。また，物がのどにつかえたりして，苦しむさま。<br>惊恐万分，翻白眼。</li><li><strong>目をつぶる：</strong>三つの意味は：<ul><li>目を閉じる。また，眠る。</li><li>欠点や過失を見ないふりをしてとがめない。知らないことにする。</li><li>死ぬ。<br>三个意思：1.闭上眼睛；睁一只眼闭一只眼，这次就不追究啦；安详的死去。</li></ul></li><li><strong>目を光らす：</strong>厳重に監視する。鋭い目つきで見張る。<br>严密监视，提高警惕。</li><li><strong>夜目遠目笠の内：</strong>女の容貌は，夜見たとき，遠方から見たとき，笠をかぶっているところを見たときに，実際より美しく見えるということ。<br>朦胧的夜景，身披斗笠的古代女性或许让人产生美的错觉吧，是褒是贬有些微妙哦。或许喜欢的人或事，可以继续保持一定距离，尽情欣赏。</li><li><strong>目病み女に風邪引き男：</strong>眼病で目のうるんだ女と，風邪を引いて弱っている男は普段と違う印象が生まれて、それが新しい魅力にもなるのでしょうか。<br>轻轻染上秋季感伤的柔情女性，不经意间展示出与平常时坚强可靠不同的脆弱男子，是否会让异性顿生情愫，感到更有魅力呢。</li><li><strong>女の目には鈴を張れ：</strong>漢語では「明眸皓歯」といいますね、美しく澄んだ瞳、そして歯並びが美しく白い歯ということですから、美人の条件として目の美しさが重視されていたようです<br>。比喻女性水灵的眼睛，美丽可爱。</li></ul><h2 id="鼻（はな）"><a href="#鼻（はな）" class="headerlink" title="鼻（はな）"></a>鼻（はな）</h2><ul><li><strong>鼻息が荒い：</strong>意気込みが激しい。強気で威勢がよい。<br>累得直喘粗气；盛气凌人，气势汹汹。</li><li><strong>鼻が高い：</strong>誇らしい気持ち·得意な気持ちになることです。「天狗になる」はなおさらだ。<br>自豪，骄傲，得意。变成了天狗比喻过度得意变成了傲慢，自负之意。</li><li><strong>鼻が曲がる：</strong>鼻がおかしくなりそうなほどいやなにおいがするさま。<br>恶臭，难以忍受的气味。</li><li><strong>鼻であしらう：</strong>真面目な程度で応対せずに、相手の言葉を軽く聞き流し冷淡な態度を取るという意味です。<br>冷淡对待。</li><li><strong>鼻の下を伸ばす：</strong>好色そうな表情をしたり、美しい女性に甘い態度を見せる。<br>色眯眯的样子，迷恋女色。</li><li><strong>鼻をうごめかす：</strong>得意げな様子をみせるさまをいう。<br>瞧你洋洋得意的样子。</li><li><strong>鼻を鳴らす：</strong>女性が男性に甘えて物をねだる時には意識的に鼻にかかった声を出したりします。ただし女性限定だぞ。</li><li><strong>鼻薬を嗅がせる：</strong>賄賂を使う。「鼻薬」は子供の機嫌を取るために与える菓子。<br>施小恩小惠，给点甜头。</li><li>木て鼻をくくる：相手を冷淡にあしらう·無愛想な態度を見せる。<br>以冷淡的态度对待他人。</li></ul><h2 id="口（くち）"><a href="#口（くち）" class="headerlink" title="口（くち）"></a>口（くち）</h2><ul><li><strong>口が干上がる：</strong>収入の道が断たれ生活が立ち行かなくなる。<br>收入来源断了，吃不上饭。</li><li><strong>口がうまい：</strong>弁舌の立つ人、話し上手な人。<br>嘴真甜，会说话。</li><li><strong>口が軽い：</strong>軽率で、大事な秘密までうっかりしゃべってしまう。<br>大嘴巴。</li><li><strong>口が堅い：</strong>秘密などを軽々しく他へもらさない。<br>守口如瓶。</li><li><strong>口が腐っても：</strong>いつまでも口を噤んで秘密を守る。<br>无论如何也会保守秘密的。</li><li><strong>口が酸っぱくなる：</strong>同じことを何度も繰り返して言うさま。<br>苦口婆心，磨破嘴皮。</li><li><strong>口が禍のもと：</strong>不用意に余計なことを口にするなということです。<br>祸从口出，不要说多余的话。</li><li><strong>言う口の下から：</strong>言ったすぐあとから。多く，非難の気持ちを込めて使われる。<br>刚说完就。。。对着干的节奏啊。</li><li><strong>口車に乗る：</strong>巧みな言葉に引っかかって騙される。「口がうまい」やつに騙されるなよ、お嬢ちゃん。<br>不要被花言巧语骗啦。</li><li><strong>人の口には戸が立てられない：</strong>世間のうわさや評判はどうしても止めることが出来ないという意味です。<br>嘴巴是封不住的，流言蜚语迟早满天飞。</li></ul><h2 id="唇（くちびる）"><a href="#唇（くちびる）" class="headerlink" title="唇（くちびる）"></a>唇（くちびる）</h2><ul><li><strong>唇を噛む：</strong>怒りや悔しさをこらえる様子を表す言葉です。<br>抑制住怒火或悔恨。</li><li><strong>唇をとがらす：</strong>不満を感じている時の表情です。<br>嘟嘴，不满。</li></ul><h2 id="歯（は）"><a href="#歯（は）" class="headerlink" title="歯（は）"></a>歯（は）</h2><ul><li><strong>歯が浮く：</strong>二つの意味があります：<ul><li>不快な音を聞いたり，酸っぱい物を食べたりして，歯の根がゆるんで浮くように感ずる。</li><li>そらぞらしく，きざな言動に対して，気持ち悪く感ずる。<br>生理或心理上的不快感。</li></ul></li><li><strong>歯が立たない：</strong>相手の力が自分よりはるかに勝っていて、到底、敵わないという意味です。<br>难题咬不动，对手实力太强大敌不过。</li><li><strong>歯に衣着せぬ：</strong>自分の思った通りのままにずけずけ言う·思っていること包み隠さぜ率直に言う。<br>说话无顾虑。</li><li><strong>歯の抜けたよう：</strong>もともとあるはずの物がなくなったために寂しい感じがする。<br>残缺不全，本应该拥有却失去而感到的失落。</li><li><strong>歯の根が合わない：</strong>寒さや恐怖のために，ふるえおののくさまにいう。<br>因寒冷或恐惧而打哆嗦。</li><li><strong>ごまめの歯ぎしり：</strong>大して力はないのに（自分の力の程を知らず）興奮していきなり立つは無駄な事だ。<br>凭意气用事也无济于事。</li></ul><h2 id="舌（した）"><a href="#舌（した）" class="headerlink" title="舌（した）"></a>舌（した）</h2><ul><li><strong>舌が回る：</strong>すらすらとよどみなくしゃべる。口が達者である。<br>伶牙俐齿，能说会道，能叽叽喳喳说个不停。</li><li><strong>舌先三寸：</strong>うわべだけのうまい言葉で、心や中身が備わっていないこと。<br>只是表面上话说的很漂亮的人不可信哦。</li><li><strong>舌なめずり：</strong><ul><li>おいしい食物を前にしたり想像したときや食事の前後に，舌で唇をなめること。</li><li>何かしようと獲物を待ち構えているようす。<br>你看起来很好吃，忍不住啦啊啊啊(╹ڡ╹ )。emmmm，就像路飞看到了肉，乔巴遇到了棉花糖，山治遇到了妹子（大雾）(❤ ω ❤)。</li></ul></li><li><strong>舌を出す：</strong><ul><li>陰で人を馬鹿にしたり、心の中で人を嘲笑する。</li><li>自分の失敗に照れたり、ごまかしたりする時のしぐさ。<br>两个意思：1.暗自嘲笑他人；2.像萌混过关。</li></ul></li><li><strong>舌を巻く：</strong>（相手に圧倒されて）非常に驚く。感心する。<br>惊叹不已，在下佩服。</li><li><strong>二枚舌：</strong>食い違ったことを言う·嘘をつくの意味です。<br>撒谎，前后矛盾。</li></ul><h2 id="顎（あご）"><a href="#顎（あご）" class="headerlink" title="顎（あご）"></a>顎（あご）</h2><ul><li><strong>顎が落ちる：</strong>非常に美味しい物を食べた時の感覚。<br>特别好吃。</li><li><strong>顎で使う：</strong>高慢な態度で人を使う。<br>颐指气使，态度傲慢，总以为自己高高在上的样子。</li><li><strong>顎を撫でる：</strong>人が得意な気分に浸っている時は、つい無意識に顎を撫で回したりするものです。<br>心满意足。</li><li><strong>顎足付き：</strong>食事代や交通費が先方持ちであること<br>餐费或交通费用由对方承担。</li></ul><h2 id="頬（ほお）"><a href="#頬（ほお）" class="headerlink" title="頬（ほお）"></a>頬（ほお）</h2><ul><li><strong>頬かぶり：</strong>知って知らぬふりをすること。<br>假装不知道。</li><li><strong>頬がゆるむ：</strong>うれしくて、にこにこと笑顔になることを言います。<br>笑逐颜开，感到快乐与幸福o(<em>￣▽￣</em>)ブ。</li><li><strong>頬を染める：</strong>恥ずかしさのために顔を赤くする。バ、バカ！<br>あ、誰かさんを褒めるときは「バ、バカ！」と言われた、顔赤くなったかな=￣ω￣=。害羞的脸红了。</li><li><strong>頬をふくらます：</strong>不平や不満の気持を示す表情。<br>因生气噘嘴。</li></ul><h2 id="耳（みみ）"><a href="#耳（みみ）" class="headerlink" title="耳（みみ）"></a>耳（みみ）</h2><ul><li><strong>右の耳から左の耳：</strong>人の話を真面目に聞こうとしないで聞き流すこと。<br>左耳进右耳出。</li><li><strong>耳が痛い：</strong>他人の言葉が自分の弱点を適確に突いていて、聞くのが辛い。<br>因被他人说中自己的弱点，听起来很难受。</li><li><strong>耳を傾ける：</strong>熱心に聞く。傾聴する。「耳を澄ます」と同じ意味です。<br>侧耳倾听。</li><li><strong>耳を塞ぐ：</strong>聞かないようにする。<br>闭目塞听。</li><li><strong>耳を疑う：</strong>思いがけない音や発言を聞いて，聞き間違いではないかと驚く。<br>不敢相信自己的耳朵。</li><li><strong>耳を揃える：</strong>金銭などを不足なくとり揃える。<br>凑齐款项。</li></ul><h2 id="首（くび）"><a href="#首（くび）" class="headerlink" title="首（くび）"></a>首（くび）</h2><ul><li><strong>首が危ない：</strong>失職しそうだ·解雇されそうだ。<br>工作要不保啦。</li><li><strong>首が繋がる：</strong>どうにか解雇を免れる。<br>总算保住了工作。</li><li><strong>首が回らない：</strong>借金などで，やりくりがつかない。<br>周转不灵。</li><li><strong>首に縄をつける：</strong>いやがる人を無理に連れて行こうとするたとえ。<br>生拉硬扯，强迫他人。</li><li><strong>首を傾げる：</strong>疑問に思う、納得できない、賛成できないという意味です。<br>有疑问，纳闷，无法赞成。</li><li><strong>首を縦に振る：</strong>同意、賛成、承諾の意思表示の動作です。<br>点头答应。</li><li><strong>首を長くする：</strong>期待しながら今か今かと待ちかねている。<br>翘首盼望。</li></ul><h2 id="喉（のど）"><a href="#喉（のど）" class="headerlink" title="喉（のど）"></a>喉（のど）</h2><ul><li><strong>喉が鳴る：</strong>美味しいそうな物を目の前にして我慢できないほど食べたくなる。<br>看到好吃的饿得慌。</li><li><strong>のど自慢：</strong>美声や歌のうまさを自慢すること、またその人を指す言葉です。<br>炫耀自己的喉咙。</li><li><strong>喉元過ぎれば熱さを忘れる：</strong>苦しい事も過ぎてしまえば忘れてしまうことのたとえ。また、苦しいときに受けた恩も楽になれば忘れてしまうことのたとえ。<br>好了伤疤忘了疼，不吸取教训；事过忘恩。</li></ul><hr><h1 id="上身"><a href="#上身" class="headerlink" title="上身"></a>上身</h1><h2 id="肩（かた）"><a href="#肩（かた）" class="headerlink" title="肩（かた）"></a>肩（かた）</h2><ul><li><strong>肩で息をする：</strong>上下に肩を動かし，荒い息をする。<br>呼吸困难。</li><li><strong>肩にのしかかる：</strong>肩にかかってくる責任が重く、重圧のために押しつぶされそうになるという感じです。<br>身负重任，喘不过气来了。</li><li><strong>肩を怒らせる：</strong>肩を上に持ち上げたり大きく振ったりして威圧的な感じを醸すこと<br>摆架子。</li><li><strong>肩を落とす：</strong>気落ちしてしょんぼりする。落胆する。<br>浑身无力；沮丧。</li><li><strong>肩を持つ：</strong>意見を別れたり、対立関係にある人のどちらか一方を応援する。<br>偏袒某一方。</li><li><strong>肩身が狭い：</strong>世間に対して面目が立たない。<br>感到丢脸啊。</li><li><strong>肩身が広い：</strong>「肩身が狭い」を裏返した表現です。世間に対して誇らしい気分である。<br>感到自豪啊。</li></ul><h2 id="胸（むね）"><a href="#胸（むね）" class="headerlink" title="胸（むね）"></a>胸（むね）</h2><ul><li><strong>胸が躍る：</strong>期待や興奮のためにワクワクする。<br>期待接下来的发展，心情激动。ワクワクするなぁ、次はどんな冒険が待ってんだァ！</li><li><strong>胸が痞える：</strong>激しい感情で胸がふさがったようになる。<br>心情抑郁，难过。</li><li><strong>胸に納める：</strong>聞いたこと、見たことを自分の心の中にしまっておいて決して口に出さない。<br>所见所闻深藏在心里不乱说出去。</li><li><strong>胸を打つ：</strong>ある事柄が人を強く感動させる、心が打つ。<br>很感动，打动心弦(ಥ _ ಥ)。</li></ul><h2 id="心臓（しんぞう）"><a href="#心臓（しんぞう）" class="headerlink" title="心臓（しんぞう）"></a>心臓（しんぞう）</h2><ul><li><strong>心臓が強い：</strong>物怖じしないで、どんな場面でも平気な態度であるは褒め言葉として使われるのに対して厚かましいという否定的な非難のニュアンスを含んでいます。<br>胆子大；脸皮厚。</li><li><strong>心臓に毛が生えている：</strong>非常に厚かましく、恥知らずで図々しい態度。<br>厚颜无耻。</li><li><strong>心臓が早鐘を打つ：</strong>激しい運動をしたり、不安や緊張のために動悸が速くなること。<br>激动得怦怦直跳。</li></ul><h2 id="腹（はら）"><a href="#腹（はら）" class="headerlink" title="腹（はら）"></a>腹（はら）</h2><ul><li><strong>腹の虫が治まらない：</strong>怒りを抑えきれない、癪に触って我慢ならない。<br>控制不住自己的感情，难以压抑住心中的怒火。</li><li><strong>腹も身の内：</strong>腹も体の一部だから大切に扱わなくてはならない、暴飲暴食をすると必ず体を壊してしまう。<br>食不过量，不可暴饮暴食哦。</li><li><strong>腹を括る：</strong>覚悟を決める。<br>做好觉悟了。</li><li><strong>腹を割って話す；</strong>一切、隠し立てしないで本心を話す·包み隠すことなく心の中をすべて見せて話す。<br>相信对方，推心置腹，打开天窗说亮话。</li><li><strong>痛くもない腹を探られる：</strong>別に悪いことしてないのに他人から疑われること、迷惑な気分を巧みに言い表した比喩表現です。<br>无缘无故受到猜疑。</li><li><strong>自腹を切る：</strong>公や会社あるいは共同で出すような金を，あえて自分で負担する。<br>自己掏腰包。</li><li><strong>私腹を肥やす：</strong>（地位や職権を悪用して）自分の利益を追い求める、私財を増やす。<br>谋取私利。</li></ul><h2 id="胴（どう）"><a href="#胴（どう）" class="headerlink" title="胴（どう）"></a>胴（どう）</h2><ul><li><strong>胴上げ：</strong>喜びや祝福を表すために，大勢の人間が祝福される人の体を抱え上げて何度も空中に投げ上げること。<br>为了表示祝贺，众人把祝贺对象抛起来。</li><li><strong>胴震い：</strong>寒さ、恐怖感、興奮のために体がガタガタ震える様子。<br>由于寒冷、恐怖、兴奋等原因而身体颤动。</li><li><strong>胴忘れ：</strong>普段はよく知っている物事や人名、物の名前などを忘れてしまって、なかなか思い出せないこと。<br>话都到喉咙了突然忘记，还真的是常有的事╮(╯▽╰)╭。</li></ul><h2 id="背中（せなか）"><a href="#背中（せなか）" class="headerlink" title="背中（せなか）"></a>背中（せなか）</h2><ul><li><strong>背中合わせ：</strong><ul><li>二人の人が，また物と物とが背と背を合わせて，互いに後ろ向きになっていること。</li><li>背と腹のように互いに裏表の関係にあること。</li><li>仲が悪いこと。<br>三个意思：1.两者中的一者；2.表里联系密切，二者必有一个；3.关系不好。</li></ul></li><li><strong>背中が見える：</strong>もう、今にも手の届く範囲にライバルがいるという意味で使われます。<br>经过努力终于赶上对手了。</li><li><strong>背中に風を受ける：</strong>追い風に乗って物事を順調に捗る。<br>如有神力相助，顺利进展。</li><li><strong>背中を押す：</strong>行動しようかどうか迷ったり躊躇ったりしている人に、最後の一押しをする、決断を促す、などの意味で使われる表現。<br>有时候我们需要别人在自己背后推一把。</li><li><strong>背中を見て育つ：</strong>親が黙って生き方の模範を子供に示すという意味になります。<br>孩子们都是学自己父母的，父母的言行会潜移默化的影响子女。</li><li><strong>背中を向ける：</strong>興味のない様子、無関心な態度。さらに、もう少し強い意味になると「相手に従わらない、拒否の態度を示す」ことも意味します。<br>不加理睬，不关心；不顺从，违背。</li><li><strong>背に腹は変えられない：</strong>より重大な事のためには、他の小さな事は多少は犠牲にしても仕方がない。<br>为了重要的事情，小的牺牲是在所难免的，值得的。</li></ul><h2 id="腰（こし）"><a href="#腰（こし）" class="headerlink" title="腰（こし）"></a>腰（こし）</h2><ul><li><strong>腰を折る：</strong><ul><li>腰をかがめる。体を前に曲げる。</li><li>中途で妨げる。</li><li>頭を下げる。屈服する。<br>三个意思：弯腰；中途妨碍；低头屈服。</li></ul></li><li><strong>腰が重い：</strong>なかなか行動に移そうとしない、いつまでもたっても働こうとしない。<br>懒得动。</li><li><strong>腰を据える：</strong><ul><li>どっかりとすわり込む。すっかり落ち着く。</li><li>一つの事に全力を集中させる。<br>两个意思：1.安下心来；2.专心致志做一件事。</li></ul></li><li><strong>腰を抜かす：</strong><ul><li>腰に力が入らず立てなくなる。</li><li>あまりの驚きに足腰が立たなくなる。<br>两个意思：1.直不起腰；2.惊呆了。</li></ul></li><li><strong>物腰が柔らかい：</strong>「人に対する態度が穏やかな、人に向ける態度や言動ややさしく丁寧な」という意味です。<br>待人接物温和。</li><li><strong>本腰を入れる：</strong>本気で物事に取り込もうとする腰構え。<br>拿起你的干劲来刚Ψ(￣∀￣)Ψ。</li></ul><h2 id="尻（しり）"><a href="#尻（しり）" class="headerlink" title="尻（しり）"></a>尻（しり）</h2><ul><li><strong>尻こそばゆい：</strong><ul><li>くすぐったい。</li><li>ほめられるなどして，照れ臭い。<br>痒；难为情的。</li></ul></li><li><strong>尻が長い：</strong>いつまでも座り込んでいて、なかなか席を立とうとしない長居の客を指す。<br>久坐不走。</li><li><strong>尻に帆を掛ける：</strong>あわてて逃げ出す。<br>仓皇逃跑。</li><li><strong>尻を拭う：</strong>他人の失敗などの後始末をする。<br>替别人善后，处理残局。</li><li><strong>尻を捲る：</strong>威嚇するような態度に出る。<br>态度突变，翻脸。</li><li><strong>尻を持ち込む：</strong>関係者に問題を持ち込み責任を問い、解決を迫る。<br>追究责任。</li><li><strong>尻尾を出す：</strong>隠していた事や、ごまかしていた事がばれてしまう。<br>露出狐狸尾巴。</li><li><strong>尻尾を振る：</strong>こびへつらう。<br>阿谀奉承拍马屁。</li><li><strong>尻尾を巻く：</strong>立ち向かう気持ちをなくす。降参する。<br>夹着尾巴逃走。</li></ul><h2 id="腕（うで）"><a href="#腕（うで）" class="headerlink" title="腕（うで）"></a>腕（うで）</h2><ul><li><strong>腕が立つ：</strong>技量がきわめて優れている。<br>技术高超，厉害啊。</li><li><strong>腕に縒りを掛ける：</strong>自分の能力を最大限に発揮しようとしてはりきる。<br>竭尽全力，本当の力を見せてやろうか(╯‵□′)╯炸弹！•••*～●。</li><li><strong>朝雨は女の腕捲り：</strong>朝雨はすぐにあがるものだから，女の腕まくりと同様，大して気にかけることはない。<br>还成不了气候不值得太在意。不可滥用哦，不然会以为是被鄙视了的人强烈反击。</li></ul><h2 id="肘（ひじ）"><a href="#肘（ひじ）" class="headerlink" title="肘（ひじ）"></a>肘（ひじ）</h2><ul><li><strong>肘鉄砲を食わせる：</strong><ul><li>肘の端で突きのける。</li><li>相手の誘いや要求を強くはねつける。<br>用肘用力顶对方；严厉拒绝。</li></ul></li><li><strong>肘を張る：</strong>肘を突っ張って、いかにも強そうな様子をする。威張る。<br>（双手叉腰）向两方支开胳膊肘，神气十足。</li></ul><h2 id="手（て）"><a href="#手（て）" class="headerlink" title="手（て）"></a>手（て）</h2><ul><li><strong>あの手この手：</strong>一つのことに対して、次々と色々な方法を試してみるという意味です。「手」は「手段」の意味で使われている例です。<br>千方百计。</li><li><strong>手に余る：</strong>ここの「手」は「能力」という意味ですから「物事が自分の処理能力を超えている」ことを言います。<br>解决不了。</li><li><strong>手を切る：</strong>「関係を断ち切る、縁を切る」という意味ですが、特に「悪い関係や男女関係を清算する」という意味で使われます。<br>断绝关系。</li><li><strong>手を組む：</strong>お互いに力を貸し合う。<br>联手。</li><li><strong>手を貸す：</strong>援助する。非常に忙しくて、たとえどんな手助けでも欲しい時は「猫の手も借りたい」と言います。<br>帮忙。</li><li><strong>手を抜く：</strong>ここの「手」は「手間、手数」のことを指しますから「手を抜く」は手数を省く。<br>偷工减料，潦草行事。</li></ul><h2 id="指（ゆび）"><a href="#指（ゆび）" class="headerlink" title="指（ゆび）"></a>指（ゆび）</h2><ul><li><strong>指一本も差させない：</strong>他人の非難・干渉を少しも許さない。<br>不让别人干预。</li><li><strong>指折り数える：</strong>指を一本ずつ折って数えること。<br>屈指计算天数。</li><li><strong>指切り：</strong><ul><li>約束を必ず守るしるしとして，互いの小指を曲げて掛け，「指切りげんまんうそついたら針千本のます」などと唱えあうこと。げんまん。</li><li>主に男女の仲で，愛情や約束の不変を誓って小指の先を切ること。<br>纯真与浪漫的约定方式，拉小指起誓。</li></ul></li><li><strong>指をくわえる：</strong>うらやましく思いながら，何もできずにいる。<br>羡慕哦。</li></ul><h2 id="爪（つめ）"><a href="#爪（つめ）" class="headerlink" title="爪（つめ）"></a>爪（つめ）</h2><ul><li><strong>爪に火を点す：</strong>きわめて倹約した生活をする。貧しく苦しい生活をする。または、非常に吝嗇である。<br>过分节俭。</li><li><strong>爪の垢を煎じて飲む：</strong>立派な人にあやかって、せめて爪の垢程度でもその人に近づくように頑張ってみる。<br>模仿并盼望赶上优秀的人。</li><li><strong>爪を隠す：</strong>才能を表面に出さない。<br>深藏不露。</li><li><strong>爪を研ぐ：</strong>心中に野心を秘めて機会を待ち構えている。<br>跃跃欲试。</li><li><strong>爪弾き：</strong>他人を嫌って排斥すること。仲間はずれにすること。<br>嫌恶，排斥，把某人当外人。</li></ul><h2 id="身（み）"><a href="#身（み）" class="headerlink" title="身（み）"></a>身（み）</h2><ul><li><strong>身を粉にする：</strong>身がすり減って粉になってしまうほど苦労をいとわず一生懸命働くことを言います。<br>粉身碎骨，不辞劳苦，拼命实现有车有房有老婆的梦想（雾）。</li><li><strong>身を引く：</strong>これまでの地位、立場からしりぞく。<br>隐退，退位，辞职。</li><li><strong>身を持ち崩す：</strong>品行が悪く，だらしのない生活をするようになる。<br>邋遢的生活，品行恶劣，身败名裂。</li></ul><h2 id="骨（ほね）"><a href="#骨（ほね）" class="headerlink" title="骨（ほね）"></a>骨（ほね）</h2><ul><li><strong>骨が折れる：</strong>困難である。労力を要する。<br>费力气的。</li><li><strong>骨身を惜しまず：</strong>苦労や面倒をいとわない、たとえ厄介なことでも力を出し惜しみしない。<br>不辞辛苦去做。</li><li><strong>骨身に沁みる：</strong>体の奥まで沁み通るように強く感じられる。<br>刻骨铭心。</li><li><strong>骨までしゃぶる：</strong>とことん人を利用し尽くす、徹底的に人から搾り取る。<br>吸干油水，榨干。（榨汁姬ヽ(*。&gt;Д&lt;)o゜*)）。</li><li><strong>骨抜きにする：</strong><ul><li>計画や案などから肝心の部分を抜き去り，内容のないものにすること。</li><li>気骨や節操などをなくさせること。<br>1.就像抽去核心的东西，内容显得空洞；2.失去原则，迷失。</li></ul></li></ul><h2 id="肝（きも）"><a href="#肝（きも）" class="headerlink" title="肝（きも）"></a>肝（きも）</h2><ul><li><strong>肝が太い：</strong>少々のことでは物事に動じない、大胆不敵の意味です。<br>胆子大。</li><li><strong>肝を潰す：</strong>びっくり仰天する。非常に驚く。<br>吓死了。</li></ul><h2 id="腸（はらわた）"><a href="#腸（はらわた）" class="headerlink" title="腸（はらわた）"></a>腸（はらわた）</h2><ul><li><strong>腸が腐る；</strong>精神が堕落する。根性も気骨もなくなる。<br>灵魂腐朽与堕落了。</li><li><strong>腸がちぎれる：</strong>悲しみや，つらさに耐えきれない。<br>悲痛欲绝，肝肠寸断。</li></ul><hr><h1 id="下身"><a href="#下身" class="headerlink" title="下身"></a>下身</h1><h2 id="膝（ひざ）"><a href="#膝（ひざ）" class="headerlink" title="膝（ひざ）"></a>膝（ひざ）</h2><ul><li><strong>膝を屈する：</strong>屈服する。<br>屈服。</li><li><strong>膝を進める：</strong>体を前に進めて相手に近づく。乗り気になる。<br>感兴趣。</li><li><strong>膝を打つ：</strong>何かを急に思いついたり、ふと良い知恵が浮かんだ時や、感心したときに思わずポンと膝を叩くことです。<br>忽然想起某事或表示钦佩时拍大腿。</li><li><strong>膝が笑う：</strong>「長い急斜面や山道を降り続けると、だんだんひざの関節が疲れてきて、足がガクガクする感覚は「膝が笑う」と形容します。<br>两腿发软。</li></ul><h2 id="脛（すね）"><a href="#脛（すね）" class="headerlink" title="脛（すね）"></a>脛（すね）</h2><ul><li><strong>脛を齧る（かじる）：</strong>一人前の年齢になってからも、まだ経済的に自立できないで親に依存している状態を指します。<br>啃老族的情况。</li><li><strong>脛に疵持つ：</strong>昔の悪事を隠している、やましい隠し事がある。<br>心中有愧，藏有不能为人说的事。</li></ul><h2 id="足（あし）"><a href="#足（あし）" class="headerlink" title="足（あし）"></a>足（あし）</h2><ul><li><strong>足が地に着かない：</strong><ul><li>うれしさに，興奮して落ち着かないさまをいう。</li><li>考えや行動がしっかりしていない。<br>高兴的忘乎所以；想法脱离实际。</li></ul></li><li><strong>足が遠のく：</strong>今までは頻繁に訪ねていたのに、最近はすっかりご無沙汰している。<br>疏远。</li><li><strong>足元にも及ばない：</strong>自分と比較すると相手が立派過ぎて、とてもそばには近づけないという意味です。<br>望尘莫及。</li><li><strong>足元を見る：</strong>相手の弱点を見抜いて自分に有利なように利用する。<br>抓住对手的把柄、弱点。</li></ul><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="涙（なみだ）"><a href="#涙（なみだ）" class="headerlink" title="涙（なみだ）"></a>涙（なみだ）</h2><ul><li><strong>うれし涙：</strong>人間は不思議な存在ですから悲しい時だけではなく、うれしくても涙を流します。嬉しさのあんまり感動して流す涙をうれし涙と言います。<br>感动的泪水/(ㄒoㄒ)/。</li><li><strong>血の涙：</strong>非常につらい時、悲しい時に流す涙。<br>无限悲伤的泪，不要让喜欢你的人与你喜欢的人伤心落泪哦。</li><li><strong>貰い涙：</strong>人は感情の動物ですから、笑いや涙は感染するのです。人が泣いているのを見て悲しさが伝染して自分も一緒になって泣くことを貰い涙と言います。</li><li><strong>涙にくれる：</strong>涙を流しながら暗い気持ちで日を送る。<br>每天以泪洗面。</li><li><strong>涙を呑む：</strong>くやしさ、無念さをじっとこらえる。<br>饮泣，忍住痛苦。</li><li><strong>涙を振るう：</strong>涙が流れるのを振りはらう。個人的な同情や私情を振り捨てる。<br>拭去眼泪，摒弃私情。</li></ul><h2 id="血（ち）"><a href="#血（ち）" class="headerlink" title="血（ち）"></a>血（ち）</h2><ul><li><strong>血が騒ぐ：</strong>興奮して、気持ちが高ぶり、じっとしていられなくなる状態を表します。<br>心情激动。</li><li><strong>血を見る：</strong>争いで血が流れる。争いで死傷者が出る。<br>发生流血事件。</li><li><strong>血も涙もない：</strong>熱い血や涙を持っているとは思えない、冷酷で人情のかけらもない態度を言います。<br>冷酷无情，没有人性。</li><li><strong>血を吐く思い：</strong>非常につらい思い。<br>非常悲痛。</li><li><strong>血と汗の結晶：</strong>大変な苦労を積み重ね、苦労の末にやつとなし遂げた成果。<br>来之不易的辛勤汗水的结晶，需怀敬畏之心。</li></ul><h2 id="息（いき）"><a href="#息（いき）" class="headerlink" title="息（いき）"></a>息（いき）</h2><ul><li><strong>息が切れる：</strong><ul><li>呼吸が激しくなって苦しくなる。あえぐ。 </li><li>物事を長く続けられなくなる。</li><li>呼吸が止まる。息が絶える。死ぬ。<br>气喘吁吁；难以持续下去；气绝，死亡。</li></ul></li><li><strong>息を詰める：</strong>極度に緊張して思わず息を止めてしまう。<br>紧张过头忘记呼吸啦。</li><li><strong>息の根を止める：</strong><ul><li>殺す。</li><li>再起できないほど，相手をとことんまで打ち負かす。<br>杀死；击垮。</li></ul></li><li><strong>息を殺す：</strong>そこにいることを悟られないように気配を消している様子を指します。<br>屏住呼吸。</li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><h3 id="我要累死了"><a href="#我要累死了" class="headerlink" title="我要累死了"></a>我要累死了</h3><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就这么愉快的定了</title>
      <link href="/2018/01/26/how-to-make-a-decision/"/>
      <url>/2018/01/26/how-to-make-a-decision/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是源于在我生活中的一件小事，需要我快速地做出选择。苦于每次浪费许多时间，我希望找到一个合适的方式去思考，而后做出自己不会后悔的决定。文章从以下方面阐述如何断事：</p><ul><li>析本源</li><li>正观念</li><li>巧运用</li></ul><h1 id="析本源"><a href="#析本源" class="headerlink" title="析本源"></a>析本源</h1><p>鱼与熊掌不可兼得，小至日常琐碎，大到人生规划，人有时候不得不做出选择，做出决定。“果断”一词，说来轻松，做到不易。我常为做出决定而进行漫长纠结的思考，痛恨无法这份犹豫不决，我决定要好好改变这个性格缺陷。所谓正本清源，解决问题必先找出问题的根源再加以清理，那么困难选择症的根源是什么呢？通过查阅些许资料以及重新审视毛病的所在，我认为来源于以下原因：</p><h3 id="1-缺乏自信"><a href="#1-缺乏自信" class="headerlink" title="1. 缺乏自信"></a>1. 缺乏自信</h3><p>高尔基说：天才在于自信。私以为自信是最具吸引力的性格之一，那么自信是什么？我的理解是坚信自己一定可以做到的底气。不知各位有看过海贼王吗，路飞每次说出自己的梦想时，人们开始都是报之以不屑一顾甚至嘲笑路飞的痴人说梦，即便如此路飞每次高声诉说梦想时依旧没有一丝犹豫，我也想要成为如此帅气的男人。而缺乏自信常表现为不相信自己的判断，或者没有主见。不自信的原因来方方面面，才华，经济，教育等因素都会影响一个人的自信。如何建立自信呢？且往下看。</p><h3 id="2-知识不足"><a href="#2-知识不足" class="headerlink" title="2. 知识不足"></a>2. 知识不足</h3><p>人对未知的领域通常会感到好奇或者恐惧，因此会变得小心翼翼。知识不足，换句话说即信息量不足，认识不够，对选择内容不了解的情况下，人们需要更多时间去了解然后做决定。</p><h3 id="3-害怕后悔"><a href="#3-害怕后悔" class="headerlink" title="3. 害怕后悔"></a>3. 害怕后悔</h3><p>《怪诞行为学》中说到，人类原始心理机制是“让多个可选择的门始终处于敞开状态”。害怕选择一个，其实是害怕放弃了另一个可能。人具有规避风险的本能，害怕失去的心理导致我们在得失权衡中来回拉扯耗费时间，避免产生“后悔情绪”而迟疑不决。</p><h3 id="4-害怕承担责任"><a href="#4-害怕承担责任" class="headerlink" title="4. 害怕承担责任"></a>4. 害怕承担责任</h3><p>选择需要机会成本，意味着可能要放弃某种获益的可能性。无论做什么决定都存在风险，承担的过程是痛苦的，甚至需要付出代价，害怕承担决策失败后的后果，压力以及责任使得我们做决定的周期变长。</p><h3 id="5-无关因素干扰"><a href="#5-无关因素干扰" class="headerlink" title="5. 无关因素干扰"></a>5. 无关因素干扰</h3><p>一个人做出选择时总是有所依据的，如果这些依据与我们选择或者做决定的目的无关，只会消耗我们的精力，分散注意力，阻碍我们做出正确的决策。</p><h3 id="6-意志力薄弱"><a href="#6-意志力薄弱" class="headerlink" title="6. 意志力薄弱"></a>6. 意志力薄弱</h3><p>意志力薄弱其实是一种畏难心理，本来想选择自己想要的东西，但是要取得这个东西，需要克服一定的困难，怕麻烦没有意志力的人会放弃。</p><h1 id="正观念"><a href="#正观念" class="headerlink" title="正观念"></a>正观念</h1><p>面对各种类型的事情，做决定与选择的依据和标准不一定相同，不过同样的理念，遇到一个新问题没有现成的解决方案时，回到原点去思考往往最有效。为能够快速做出决定，需要树立的观念有：</p><h3 id="1-建立自信"><a href="#1-建立自信" class="headerlink" title="1. 建立自信"></a>1. 建立自信</h3><p>之前看过一个“腹有诗书气自华”的话题，许多人只关注“气自华”的浅薄表象，希望通过背诵记忆名诗词、名文的功利性手段快速装逼，忽视了“腹有诗书”的知识沉淀与文学体会理解，故而只是水过鸭背，又或者是缺少自己感悟的生搬硬套。可见，很多优秀的品质依托的是更加实际的、内在的一些东西。何为自信前面已经解释过了，那么如何建立自信呢？余以为自信是基于实力的，自信本身又是实力的一部分，两者是一种互为正向反馈的关系。坚信自己一定可以做到的底气不是源于海市蜃楼般的凭空暗示，而是来自一砖一瓦堆砌。这里的实力并不是特指某项专业知识、某项能力，它也可能是一件成功的小事的心得，你专注的一个领域的知识，内心明确的目标。人们可以从另一件事的成功中得到鼓舞、自信，而知识经验和自信会促进下一次尝试的成功。</p><p>自信可以从小事之中取得，而自信的根基只需要我们专注于做事本身，不断学习，提升自己即可获得。另外，前面提到做决定时知识不足的情况也会渐渐减少，去努力去变得优秀才是建立自信最实在的方法。</p><h3 id="2-不会死人，有勇气承担任何一个决定带来的后果"><a href="#2-不会死人，有勇气承担任何一个决定带来的后果" class="headerlink" title="2. 不会死人，有勇气承担任何一个决定带来的后果"></a>2. 不会死人，有勇气承担任何一个决定带来的后果</h3><p>不要太在意结果，把心思放在做好过程上。告诉自己不会死人的，有什么好怕的呢？另外，要知道失败常有，天才一样会失败，谁会因为几次失败就放弃人生呢！失败是痛苦的，但痛苦意味着成长。决策伴随风险，我们要有勇气承担任何一个决定带来的后果、责任，这样才是真正的男子汉，不是吗？</p><h3 id="3-没有完美，明确决定的目的"><a href="#3-没有完美，明确决定的目的" class="headerlink" title="3. 没有完美，明确决定的目的"></a>3. 没有完美，明确决定的目的</h3><p>没有完美，如果有一定是以时间为代价的。人生短暂，如果并非要完美不可，留更多时间去做更多的事吧。找出影响做决定的关键因素或者说关注点，根据重要性排序，排除无关紧要的次要因素，只要满足主要目标就好。</p><h3 id="4-做好人生规划"><a href="#4-做好人生规划" class="headerlink" title="4. 做好人生规划"></a>4. 做好人生规划</h3><p>有明确人生目标的人，越是重大的决定越是没有丝毫犹豫，因为他们知道自己想要什么样的人生。</p><h1 id="巧运用"><a href="#巧运用" class="headerlink" title="巧运用"></a>巧运用</h1><p>下面这些是借网友良言总结的，</p><ul><li>寻求“不差的决定”，而不是很棒的决定，把时间花在执行上</li><li>确定哪些选项是最优解，Top N中选择一个</li><li>图表对比不同决定的各项指标</li><li>设定决策deadline</li><li>日常琐碎、小事不求全责备，也不轻易随便</li></ul><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>人生时刻充满选择，你接下来要做什么不就是选择吗？愉快的决定，尽情的拥抱生活吧。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.zhihu.com/question/20639397">怎样克服选择困难症？</a><br><a href="https://www.zhihu.com/question/19556269">“做决定”为何是一件很难的事？</a><br><a href="https://www.zhihu.com/question/19906048">自信来源于什么？</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10常用软件及其配置</title>
      <link href="/2018/01/18/build-high-efficiency-os/"/>
      <url>/2018/01/18/build-high-efficiency-os/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次系统重装后都需要进行各种环境、软件、插件、脚本的安装与配置，建立适合自己工作娱乐的环境，是一件费时费力的事情，相对地带给你的价值是日后的使用中效率提升，这篇文章给出了我的Windows操作环境配置方案，主要包括了以下内容：</p><ul><li>基础系列</li><li>工作系列</li><li>后期系列</li><li>其他系列</li></ul><h1 id="基础系列"><a href="#基础系列" class="headerlink" title="基础系列"></a>基础系列</h1><p>首先，要给计算机配置常用的软件和效率工具，保证系统能够完成基本的功能，比如解压打包，快速下载等。</p><ul><li>Shadowsocks</li><li>WinRAR</li><li>Chrome</li><li>WGestures</li><li>Listary</li><li>CCleaner</li><li>有道翻译</li><li>DirectX</li><li>Bandicam</li><li>Folder Sizes 8</li><li>VMware</li><li>常用软件</li></ul><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><p>科学上网，使用最棒的搜索，畅游墙外的世界。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242323409.png" alt=""><br>配置：</p><ul><li>无需安装，可执行文件放置于工作盘<code>D:\Programfiles\Shadowsocks</code>中，双击运行</li><li>在托盘Shadowsocks图标上右键，根据<code>服务器</code>菜单项选用<code>编辑服务器</code>或者<code>扫描屏幕上的二维码</code>进行信息配置</li></ul><h3 id="WinRAR"><a href="#WinRAR" class="headerlink" title="WinRAR"></a>WinRAR</h3><p>一款解压缩收费软件，可采用破解版。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242324815.png" alt=""><br>安装破解：运行破解版安装文件即可</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>世界上最强大的浏览器，没有之一，强大的扩展能力，无数的插件，配合谷歌账号，轻松实现多端同步，唯一需要动一下手的是我的油桃脚本需要重新安装。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242324177.png" alt=""><br>安装：下载并在线安装<br>配置：</p><ul><li>登陆Google账号，同步书签，插件</li><li>油桃脚本添加各种脚本，油桃脚本列表</li></ul><h3 id="WGestures"><a href="#WGestures" class="headerlink" title="WGestures"></a>WGestures</h3><p>全局鼠标手势，个性化定制手势，支持触发角 &amp; 摩擦边，简单高效。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242325189.png" alt=""><br>安装：下载并安装即可</p><h3 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a>Listary</h3><p>不仅仅是搜索神器。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242325824.png" alt=""><br>安装破解：</p><ul><li>解压得到<code>Listary.Pro.5.00.2410.fix</code>文件夹，双击<code>Listary.exe</code>安装</li><li>安装完毕退出软件，并结束掉进程中的Listary服务</li><li>打开<code>gen.crack</code>文件夹，将其中的<code>MSVCP140.dll</code>替换到软件安装目录</li><li>运行Listary，打开设置界面，选择<code>关于</code> =&gt; <code>升级到Listary Pro</code>出现注册框</li><li>打开<code>key.txt</code>，将注册信息对应填入上面的注册框中完成注册</li><li>愉快的玩耍吧</li></ul><h3 id="CCleaner"><a href="#CCleaner" class="headerlink" title="CCleaner"></a>CCleaner</h3><p>简洁，可以删除流氓软件了。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242325766.png" alt=""><br>安装破解：</p><ul><li>运行安装程序安装</li><li>断开网络，打开CCleaner–选项–关于–升级专业版，</li><li>输入注册名称<code>Registered User</code>和密钥<code>CBB4-FJN4-EPC6-G5P6-QT4C</code></li><li>注册完成</li></ul><h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>翻译必备<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242326016.png" alt=""><br>设置：取消取词，禁止开机启动，检查快捷键冲突，关闭每日推荐</p><h3 id="DirectX"><a href="#DirectX" class="headerlink" title="DirectX"></a>DirectX</h3><p>是一组低级“应用程序编程接口(API)”，可为Windows 程序提供高性能的硬件加速多媒体支持。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242326073.png" alt=""><br>安装：打开压缩包，直接运行安装程序<code>DXSETUP.exe</code>即可</p><h3 id="Bandicam"><a href="#Bandicam" class="headerlink" title="Bandicam"></a>Bandicam</h3><p>一款录屏软件，简明的操作，流畅的录制，超清的画质。</p><h3 id="Folder-Sizes-8"><a href="#Folder-Sizes-8" class="headerlink" title="Folder Sizes 8"></a>Folder Sizes 8</h3><p>直观了解磁盘使用情况<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242326150.png" alt=""><br>安装破解：</p><ul><li>解压后运行<code>fs8-setup.exe</code>安装</li><li>打开软件，点击<code>Enter License code</code>，从<code>Key.txt</code>选择一行许可密钥输入</li><li>Done</li></ul><h3 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h3><p>虚拟机器<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242326254.png" alt=""><br>安装破解：</p><ul><li>安装完成后，断开网络</li><li>输入<code>key.txt</code>的许可密钥</li></ul><h3 id="Microsoft-Office-2016"><a href="#Microsoft-Office-2016" class="headerlink" title="Microsoft Office 2016"></a>Microsoft Office 2016</h3><p>必备办公软件<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242327669.png" alt=""><br>安装破解：安装完成使用KMSpico软件破解即可</p><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p>下面几款几乎是生活中必备的吧，根据需要自行下载安装，不会下载安装的可以洗洗睡了╮(╯▽╰)╭</p><ul><li>Tim：取消声音提醒，消息闪烁，禁止开机启动</li><li>微信：取消声音提醒，消息闪烁，禁止开机启动</li><li>网易云音乐：禁止开机启动</li><li>PotPlayer：单击，双击设置</li><li>Steam：设置下载位置</li></ul><h1 id="工作系列"><a href="#工作系列" class="headerlink" title="工作系列"></a>工作系列</h1><p>作为一个Web后台开发人员，下面的软件基本上是必备的：</p><ul><li>Sublime Text</li><li>Visual Studio Code</li><li>Git</li><li>C-Free</li><li>Xshell</li><li>Xftp</li><li>Mysql</li><li>Navicat</li><li>Beyond Compare</li><li>Intellij IDEA</li><li>PyCharm</li></ul><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>支持扩展的轻量级别文本编辑器，前端神器之一<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242327341.png" alt=""><br>安装破解：</p><ul><li>不破解也可以，只是保存时弹窗有点烦</li></ul><p>配置：</p><ul><li>插件安装可以通过在线安装，离线安装只需将下载好的插件放在<code>C:\Users\LuoWe\AppData\Roaming\Sublime Text 3\Packages</code>中</li><li>重启插件会自动安装好</li></ul><p>本人常用插件列表：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242327125.png" alt=""></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>新一代代码编辑神器<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242328727.png" alt=""><br>安装：下载并安装即可<br>配置：配置插件<br>本人插件列表如下：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242328672.png" alt=""></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>一个分布式版本控制系统。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242329143.png" alt=""><br>安装：<code>https://git-scm.com/</code>上下载安装Git即可使用Git进行版本管理<br>配置：密钥生成与配置</p><h3 id="C-Free"><a href="#C-Free" class="headerlink" title="C-Free"></a>C-Free</h3><p>小型C，C++集成开发环境<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242329761.png" alt=""><br>安装破解：</p><ul><li>安装完成后，打开<code>帮助</code> =&gt; <code>注册</code>窗口</li><li>输入<code>c-free注册.txt</code>中的注册信息</li></ul><h3 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h3><p>Xshell是一款强大，著名的终端模拟软件，被广泛的用于服务器运维和管理,Xshell支持SSH，SFTP，TELNET，RLOGIN和SERIAL功能。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242329960.png" alt=""><br>安装：官网下载安装即可</p><h3 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h3><p>是一个基于 MS windows 平台的功能强大的SFTP、FTP 文件传输软件。使用了 Xftp 以后，MS windows 用户能安全地在 UNIX/Linux 和 Windows PC 之间传输文件。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242329672.png" alt=""><br>安装：官网下载安装即可</p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>Mysql是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242330598.png" alt=""><br>安装：官网下载安装</p><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>Navicat是一套快速、可靠并价格相当便宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242330538.png" alt=""><br>安装破解：</p><ul><li>运行对应位数的安装程序进行安装</li><li>运行<code>PatchNavicat.exe</code>，选中安装目录下的navicat启动文件，确定</li><li>弹出“Patch Success!”则破解成功</li></ul><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p>一款文件比对工具，可结合Git使用。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242330971.png" alt=""><br>安装破解：安装完成后，输入提供序列号</p><h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><p>推荐使用的Java开发人员主要的集成开发环境之一。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242331128.png" alt=""><br>安装破解：</p><ul><li>需要JDK环境，官网下载安装，学生认证期间免费使用</li><li>购买或者可选用<code>http://idea.lanyus.com/</code>提供的注册码破解</li></ul><p>配置：Tomcat，Maven，插件。</p><h3 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h3><p>一款Python集成开发环境。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242331918.png" alt=""><br>安装：需要Python环境，官网下载安装<br>配置：interpreter配置</p><h1 id="后期系列"><a href="#后期系列" class="headerlink" title="后期系列"></a>后期系列</h1><h3 id="Adobe系列"><a href="#Adobe系列" class="headerlink" title="Adobe系列"></a>Adobe系列</h3><p>安装到电脑中占点内存吧，后期技术的一点点执念Ψ(￣∀￣)Ψ</p><ul><li>Adobe Photoshop CC</li><li>Adobe After Effect CC</li><li>Adobe Premiere CC</li><li>Adobe Illustrator CC</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242331535.png" alt=""><br>安装破解：</p><ul><li>下载Adobe Creative Cloud并安装，在应用上登陆账号，安装需要的Adobe系列软件</li><li>断开网络，以试用模式安装 Adobe 各类软件程序</li><li>运行 AMT Emulator，选择对应的软件版本</li><li>点击Install替换各个软件安装目录下的amtlib.dll，并生成painter.ini配置文件</li><li>Done</li></ul><h1 id="其他系列"><a href="#其他系列" class="headerlink" title="其他系列"></a>其他系列</h1><h3 id="Locale-Emulator"><a href="#Locale-Emulator" class="headerlink" title="Locale Emulator"></a>Locale Emulator</h3><p>galgame必备，转区工具<br>安装：运行<code>LEInstall.exe</code>进行安装</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为软件训练营（Java语言）学习笔记</title>
      <link href="/2017/12/06/huawei-software-camp-java/"/>
      <url>/2017/12/06/huawei-software-camp-java/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>这篇文章是针对华为的软件训练营（Java语言）的网上学习总结，主要有以下内容：</p><ul><li>职业发展规划</li><li>Java编程规范</li><li>敏捷开发之道</li><li>软件测试基础</li></ul><h1 id="职业发展规划"><a href="#职业发展规划" class="headerlink" title="职业发展规划"></a>职业发展规划</h1><p>首先，公司给出软件开发需要的各项软件能力具体要求，主要有软件需求、架构、设计、实现、验证、维护六个方面的能力，并且给出了任职级别的八个等级：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242311995.png" alt=""></p><h4 id="如何学习编程"><a href="#如何学习编程" class="headerlink" title="如何学习编程"></a>如何学习编程</h4><ul><li>从脚本语言开始：建议Python（JS，Ruby等）</li><li>精通一门面向对象语言：建议Java/C#</li><li>精通一门底层编码语言：建议C（汇编等）</li><li>最好是把五种语言都学会了：Python，Java，C/C++，Perl和LISP</li></ul><h4 id="不断的循环渐进"><a href="#不断的循环渐进" class="headerlink" title="不断的循环渐进"></a>不断的循环渐进</h4><ul><li>多学习：计算机基础，比如数据结构与算法</li><li>多练习：OJ，竞赛，小游戏</li><li>多思考：没有最好，只有更好</li><li>多总结：知识的一次升华，输出文档</li><li>多交流：学习别人更好的经验</li></ul><h1 id="Java编程规范"><a href="#Java编程规范" class="headerlink" title="Java编程规范"></a>Java编程规范</h1><h4 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h4><p>规则</p><ul><li>在不同概念之间，增加空行</li><li>将逻辑紧密相关的代码放在一起</li><li>控制一行的宽度，不要超过120个字符</li><li>控制一行的宽度，不同概念之间增加空格（关键字、变量、操作符等），以区分概念</li><li>控制采用缩进来区分不同层次的概念，对齐时只使用空格键，不适用TAB键<br>建议：</li><li>将局部变量的作用域最小化</li><li><code>if，for，do，while，case，switch，default</code>等语句独占一行，且<code>if，for，do，while</code>等语句的执行语句无论多少行都要加括号{}</li><li>控制文件的长度，最好不要超过500行</li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>原则：尽量用代码来解释自己<br>规则：</p><ul><li>注释应解释代码的意图，而不是描述代码应该怎么做</li><li>保证注释与代码一致，避免误导</li><li>注释应与其描述代码位置相邻，放在所注释代码上方，并与代码采用同样缩进<br>建议：</li><li>不要用注释保留废弃代码</li><li>不要用注释记录修改日志</li></ul><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>原则：团队为包、类、方法、变量取一个好名字，使代码易于理解</p><ul><li>能清晰表达意图：使用完整的描述性单词</li><li>避免造成误导：如<code>String accountList</code>不是一个List类型</li><li>避免不必要的编解码</li><li>能区分出意思：不要在变量/类名后加data、info、object等一般意义的词语</li><li>不用或少用缩写：小于15个字母的一般不用缩写<br>规则：</li><li>禁止使用魔鬼数字，采用静态变量或枚举来代替</li><li>常量命名，由全大写单词组成，单词间用下划线分隔，且使用<code>static final</code>修饰</li><li>变量、属性命名，使用名词，并采用首字母小写的驼峰命名法</li><li>方法的命名，使用动词和动宾结构，采用首字母小写的驼峰命名法</li><li>类和接口的命名，使用名词，并采用首字母大写的驼峰命名法</li><li>包的命名，有一个或若干个单词组成，所有的字母均为小写<br>建议：</li><li>数组声明时使用<code>int[] index</code>而非<code>int index[]</code></li></ul><h4 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h4><p>原则：谨慎使用静态成员变量<br>规则：</p><ul><li>避免随意进行强制类型转换，最好改善设计，否则需在转换前用<code>instanceof</code>进行判断</li><li>需要精确计算时不要使用float和double</li><li>不能用浮点数做循环变量</li><li>浮点型数据判断相等不能直接使用<code>==</code>，转化为<code>Math.abs(a - b) &lt; 1E-6f</code></li><li>避免同一个局部变量在前后表达不同的含义</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>原则：</p><ul><li>方法设计的第一原则是要短小，建议不超过50行</li><li>方法设计应遵循单一职责原则（SRP），一个方法仅完成一个功能</li><li>方法设计应遵循单一抽象层次原则（SLAP）</li><li>方法设计应遵循命令与查询职责分离原则（CQRS）</li><li>不要把方法的入参当作工作变量/临时变量，传引用类型建议在参数前加final关键字</li><li>静态方法应使用类名来调用<br>建议：</li><li>应明确规定对接口方法参数的合法性检查由调用者负责还是由接口方法本身负责</li><li>对接方法的参数不宜过多</li><li>谨慎使用可变数量参数的方法</li></ul><h4 id="包、类和接口"><a href="#包、类和接口" class="headerlink" title="包、类和接口"></a>包、类和接口</h4><p>原则：</p><ul><li>类和接口的设计应遵循面向对象SOLID设计原则<ul><li>单一职责原则（Single Responsibility Principle）</li><li>开放封闭原则（Open CLosed Principle）</li><li>里氏替换原则（Liskov Substitution Principle）</li><li>接口分离原则（Interface Segregation Principle）</li><li>依赖倒置原则（Dependency Inversion Principle）</li></ul></li><li>类的设计应遵循迪米特法则</li><li>类的设计应遵循“Tell, Don’t ask”原则：告诉对象你希望它们去做的事情，而不要询问它们的状态之后做出决定<br>规则：</li><li>除提供给外部使用的全局变量外，应尽量避免类成员变量被外部直接访问</li><li>避免在无关的变量或无关的概念之间重用名字，避免隐藏（hide）、遮蔽（shadow）和遮掩（obscure）</li><li>不要再父类的构造方法中调用可能被子类覆写的方法</li><li>覆写equals方法时，应同时覆写hashCode方法</li><li>子类覆写父类方法时应加上@Override注解</li></ul><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>规则：</p><ul><li>只针对真正异常的情况才使用exception机制</li><li>在抛出异常的细节信息中，应包含能捕获失败的信息</li><li>对可恢复情况使用受检异常（checked exception），对编程错误使用运行时异常（runtime exception）</li><li>不要忽略异常</li><li>方法注释和文档中要包含所抛异常的说明，内容包括什么场景会抛出该异常，该如何处理它</li><li>方法抛出的异常，应该与本身的抽象层次相对应</li><li>在finally块中不要使用return、break或continue使finally块非正常结束，导致异常无法抛出</li><li>不要直接捕获受检异常的基类Exception<br>建议：</li><li>对第三方API抛出大量各类异常进行封装</li><li>一个方法不应抛出太多类型的异常</li></ul><h4 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h4><p>运算和表达式<br>规则：</p><ul><li>不要编写复杂的表达式</li><li>运算时应避免产生溢出<br>建议：</li><li>运算采用括号明确运算优先级</li></ul><p>控制语句规则：</p><ul><li>在switch语句的每一个case、default中都放置一条break语句</li><li>采用for-each代替传统for循环</li></ul><p>泛型规则；在集合中使用泛型（v1.5+）<br>其他规则：新代码不要使用已标注为@Deprecated的方法</p><h1 id="敏捷开发之道"><a href="#敏捷开发之道" class="headerlink" title="敏捷开发之道"></a>敏捷开发之道</h1><p>IPD：Integrated Product Development，软件工程中集成产品开发流程，包括四个DCP决策评审点，七个TR技术评审点，一个LAUNCH点，一个GA点。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242312178.png" alt=""></p><p>敏捷宣言：</p><ul><li>个体和交互胜过过程和工具</li><li>可以工作的软件胜过面面俱到的文档</li><li>客户合作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul><p>敏捷开发遵循软件的客观规律，不断的进行迭代增量开发，最终交付符合客户价值的产品<br>统一认识：敏捷 = 理念 + 优秀实践 + 具体应用</p><ul><li>理念：VTA原则，VALUE，TEAM，ADAPTING</li><li>优秀实践：敏捷的经验总结，比如站立会议与结对编程，持续集成与测试驱动开发，重构与迭代</li><li>具体应用：结合自身灵活运用才是真正的敏捷</li></ul><h1 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h1><p>测试定义：测试是一个包含计划、准备和测量活动的过程。其目的是确认被测系统的特性，并指出需求和实现之间的差异。不同类型的测试在软件生命周期的位置：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242312900.png" alt=""></p><p>下图是按照目标/特性，测试阶段或层次，方法的测试分类，作为开发人员需要掌握单元测试，了解其他阶段的测试：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242312979.png" alt=""></p><h4 id="一些测试方式"><a href="#一些测试方式" class="headerlink" title="一些测试方式"></a>一些测试方式</h4><p>静态测试：静态测试技术通过手工检查（评审）或自动化分析（静态分析工具）的方式对代码或其他项目文档进行检查。</p><ul><li>代码检查工具检查（pclint，圈复杂度检查）</li><li>走读（walk through）</li><li>检视（inspection）</li></ul><p>动态测试：通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率和健壮性等性能，这种方法有三部分组成：构造测试实例、执行程序、分析程序的输出结果。</p><ul><li>等价类划分</li><li>边界值分析</li><li>决策表分析</li><li>判断条件覆盖</li><li>条件组合覆盖</li></ul><p>黑盒测试：把被测对象看作一个黑盒，测试软件产品的功能，而不需关注软件产品的内部构造和处理过程。</p><ul><li>等价类划分</li><li>边界值分析</li><li>决策表分析</li><li>状态转换测试</li></ul><p>白盒测试：根据被测程序的内部设计测试用例的一种测试方法。</p><ul><li>语句覆盖</li><li>判定覆盖</li><li>条件覆盖</li><li>判定条件覆盖</li><li>条件组合覆盖</li><li>路径覆盖</li></ul><h4 id="测试基本原则"><a href="#测试基本原则" class="headerlink" title="测试基本原则"></a>测试基本原则</h4><ul><li>测试显示缺陷的存在</li><li>穷尽测试是不可能的</li><li>测试尽早介入</li><li>缺陷集群性，二八法则</li><li>杀虫剂悖论</li><li>测试活动依赖于测试Context</li><li>“Absence-of-error”谬论</li></ul><h4 id="测试常用术语"><a href="#测试常用术语" class="headerlink" title="测试常用术语"></a>测试常用术语</h4><ul><li>Test basis（测试依据）：能从中判断出组件/系统需求的所有文档。测试用例是基于这些文档的。只能通过正式的修正过程来修正的文档称为固定测试依据</li><li>test condition（测试条件）：组件/系统中能被一个或多个测试用例验证的条目或事件。例如，功能、事务、特性、质量属性或结构化元素</li><li>test coverage（测试覆盖）：用于确定执行测试套件所能覆盖项目的程度，通常用百分比来表示。</li><li>exit criteria（出口准则）：和利益相关者达成一致的系列通用和专门的条件，来正式的定义一个过程的结束点。出口准则的目的可以防止将没有完成的任务错误地看成任务已经完成。测试中使用的出口准则可以来报告和计划什么时候可以停止测试</li><li>confirmation testing（确认测试）：重新执行上次失败的测试用例，以验证纠错的正确性</li><li>regression testing（回归测试）：测试先前测试过并修改过的程序，确保更改没有跟给软件其他未改变的部分带来新的缺陷（defect）。软件修改后或者使用环境变更后要执行回归测试</li><li>test strategy（测试策略）：一个高级文档，该文档定义了需要对程序（一个或多个项目）执行的测试级别和需要进行的测试</li><li>test level（测试层级）：共同进行组织和管理的一组测试活动。可以分为底层测试嗯哼高层测试</li><li>test specificatiion technique（测试规格技术）：一种结构化的方法，用于测试依据（例如，需求、功能或技术规格）中得到测试用例。可以分为白盒测试和黑盒测试技术</li><li>Low-level test（底层测试）：底层测试包括分别或组合地测试系统的个别组件。通常由开发人员执行。分为单元测试和集成测试，主要使用白盒测试技术</li><li>High-level test（高层测试）：高层测试指测试完整的产品。分为系统测试和验收测试，主要使用黑盒测试技术</li><li>Unit test（单元测试）：单元测试是有开发人员在实验室环境中执行的测试，应当验证代码是否满足设计规格中的需求</li><li>Integration test（集成测试）：集成测试是由开发人员在实验室环境中执行的测试，应当论证代码的逻辑组合是否满足设计规格中的要求</li><li>System test（系统测试）：系统测试是由开发人员或独立测试团队在（完全可控的）实验室环境中执行的测试，应当论证所开发的系统或子系统是否满足功能或质量规格中的需求</li><li>Acceptance test（验收测试）：验收测试是由用户和系统管理员哎最大可能模拟实际运行环境的环境中执行的测试，应当论证所开发的系统是否满足功能和质量需求</li></ul><h4 id="测试技术"><a href="#测试技术" class="headerlink" title="测试技术"></a>测试技术</h4><p>测试用例：可以独立进行测试执行的最小单元，包括必不可少的几个要素：</p><ul><li>测试用例设计的目的</li><li>测试操作步骤及其每个步骤所需要的输入数据</li><li>需要从被测系统收集的输出数据</li><li>测试要通过的标准</li></ul><h4 id="Junit-4测试框架"><a href="#Junit-4测试框架" class="headerlink" title="Junit 4测试框架"></a>Junit 4测试框架</h4><ul><li><code>junit.framework.Test</code>：测试接口</li><li><code>junit.framework.TestCase</code>：测试用例类，根据情况编写若干个<code>public void testXxx()</code>方法，在方法中通过<code>assertYyy()</code>定制若干个测试规则</li><li><code>junit.framework.TestSuite</code>：测试套件类，它可以将多个测试用例类捆绑在一起运行，也可以捆绑另一个测试套件</li></ul><p>测试固件：</p><ul><li>一个测试用例可以包含若干个<code>testXxx()</code>方法，测试用例测试一个或多个类API接口的正确性</li><li>在调用类API时，需要事先创建这个类的对象及一些关联的对象，这组对象就称为测试固件（Fixture），相当于测试用例的“工作对象”</li></ul><p>测试集TestSuite创建方式有两种：</p><p>写函数语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTestSuite</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">suite</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">TestSuite</span> <span class="variable">suite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSuite</span>();</span><br><span class="line">suite.addTest(<span class="keyword">new</span> <span class="title class_">JUnit4TestAdapter</span>(CalculatorTest.class));</span><br><span class="line">suite.addTest(<span class="keyword">new</span> <span class="title class_">JUnit4TestAdapter</span>(CalculatorTest2.class));</span><br><span class="line"><span class="keyword">return</span> suite;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;CalculatorTest.class, CalculatorTest2.class, CalculatorTestSuite.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTestSuite2</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Junit 4.x的测试过程：</p><ul><li><code>@Before</code>注解：用于测试方法执行之前构建需要执行的环境，可以有多个<code>@Before</code>方法，Junit 4.0前的版本必须通过自定义方法为setUp方法告知框架该方法是初始化代码</li><li><code>@After</code>注解：在测试方法执行完成后进行清除，Junit 4.0前的版本必须通过自定义方法为tearDown方法告知框架该方法是清理代码</li><li><code>@Test</code>：测试方法</li></ul><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gaglame游玩感想 - 新・他の男の精液で孕んでもいいですか…？2 全身汗だく浮気セックスで妊娠したウェディングプランナーの婚約者</title>
      <link href="/2017/11/29/Galgame-clear-feeling-xin-ta-yun-2/"/>
      <url>/2017/11/29/Galgame-clear-feeling-xin-ta-yun-2/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><p>抛开游戏的不合理性设定，这游戏前面我玩得心情有些压抑，对美佳大概是哀其不幸怒其不争吧，像男主这样的男人却没有好好珍惜，要知道守护幸福是需要一些强硬的态度和智商的。不过我挺佩服那份诚实的，也不是真的沉溺于快感，实在是令我生气但又恨不起来。或许在接受了威胁那一刻与男主就已经在不同的道路上渐行渐远了。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/others/202307250203410.jpg" alt=""></p><p>还好最后面被葵治愈了，喜欢男主却不会为因个人的私情去破坏男主的幸福，反而作为挚友帮助男主，作为女性去安慰男主，H是因为和喜欢的人所以很幸福。男主的人生正如剧本所说的是有多么残酷啊，最后葵替男主打的两巴掌，不得不说大快人心，把男主长久以来的委屈与愤怒发泄出来了。虽然我觉得是远远不够的，不过言行之间又正好衬托出葵的感性与理性，最后面听到葵的告白还能说什么呢，真爱！</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/others/202307250202024.jpg" alt=""></p><p>NTR作品玩得不多，虽然大多套路相似，但这部作品却像该社的remember、elf的民工女友、媚肉之香由纪篇一样写出与众不同的内容，把NTR与纯爱糅合在一起探讨爱。本作的BGM不错，不同H场景的BGM不同但挺应景的（关注点有点怪w），故事拉下帷幕时的BGM、美佳的来信怎么让人感觉有点悲伤呢？本来要迈向幸福婚姻的两人最终分道扬镳，尽管留下无尽的惆怅与无奈，可是和葵的明天还得继续，随着尘封记忆的信渐渐化作灰烬，今后要为了葵好好努力一起变得幸福。</p><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div><script>var ap = new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: false,showlrc: 0,music: {title: "BGM012",author: "アトリエさくら",url: "http://static.tsukasa.moe/music/新・他孕２_BGM012.ogg",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ギャルゲーム </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Galgame </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「深入理解Java虚拟机」读书笔记</title>
      <link href="/2017/10/09/jvm-readingnotes/"/>
      <url>/2017/10/09/jvm-readingnotes/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是我读《深入理解Java虚拟机》后的笔记总结，对每一个Java开发者来说这是一本值得多看几遍的好书，文章主要内容包括：</p><ul><li>自动内存管理</li><li>类加载与执行引擎</li><li>程序编译与代码优化</li><li>并发与线程安全</li></ul><h1 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h1><h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>Java虚拟机运行时数据区域：</p><ul><li>线程共享的数据区域，随虚拟机启动而存在，GC工作区域<ul><li>方法区：存储已被虚拟机加载的类信息、常量、静态变量、JIT后的代码等数据，通常称为“永久代（Permanent Generation）”。GC回收的目标主要是针对常量池的回收和对类型的卸载<ul><li>运行时常量池：方法区的一部分，存放编译期生成的字面量和符号引用，在运行期也可以将新的常量放入池中（比如String类的intern()方法）</li><li>直接内存：不是虚拟机运行时数据区的一部分。JDK1.4中引入的NIO类，引入基于通道（Chanel）和缓冲区（Buffer）的I/O方式，可以使用Native函数直接分配堆外内存，通过Java堆的DirectByteBuffer对象引用，避免Java堆与Native堆数据复制带来的性能消耗</li></ul></li><li>Java堆：内存中最大的一块区域，专门用于存放对象实例（包括数组）和成员变量（包括基本类型），GC主要工作区域。根据GC特性分为老年代和新生代，其中新生代又可以细分为Eden空间、From Survivor空间、To Survivor空间</li></ul></li><li>线程隔离的数据区，随线程启动而创建，随线程结束而销毁<ul><li>程序计数器：当前线程执行代码的行号指示器，唯一没有规定OutOfMemoryError的区域。执行Java代码时，记录正在执行字节码指令的地址；执行Native方法时，计数器值为空。</li><li>虚拟机栈：描述Java方法执行的内存模型，每个方法从调用到执行完成对应一个栈帧从虚拟机栈入栈到出栈<ul><li>栈帧：存储局部变量、操作数栈、动态链接、方法出口等信息</li><li>局部变量表：存放编译器可知的各种基本数据类型数据、对象引用reference（对象实例本身还是存放到堆）、returnAddress类型（字节码指令地址），以局部变量空间Slot为基本分配单位，所需内存空间在编译期间完成分配</li></ul></li><li>本地方法栈：与虚拟机栈负责执行Java方法类似，本地方法栈负责执行Native方法，具体虚拟机可以自由实现它</li></ul></li><li>小结 Java的内存模型除了程序计数器区域没有定义<code>OutOfMemoryError</code>异常，其他区域都存在<code>OutOfMemoryError</code>异常，虚拟机栈与本地方法栈中存在<code>StackOverFlowError</code>异常</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242152841.png" alt=""></p><p>对象在内存中存储的布局可以分为三块区域：</p><ul><li>Header（对象头）：存储对象自身运行时数据，比如HashCode、GC分代年龄等信息，类型指针</li><li>Instance Data（实例数据）：对象真正存储的有效信息</li><li>Padding（对齐填充）：对象大小必须是8字节的整数倍，当大小不符合时需要通过对齐填充补全</li></ul><p>对象访问定位的两种方式：</p><ul><li>句柄访问：保证reference存放的是稳定的句柄地址，访问对象时从句柄池中取句柄，读取句柄中对象实例数据（存放在堆区）和类型数据（存放在方法区）地址信息</li><li>直接指针访问：节省了到对象实例数据指针定位开销，速度快，HotSpot目前使用的方式</li></ul><h2 id="Garage-Collection"><a href="#Garage-Collection" class="headerlink" title="Garage Collection"></a>Garage Collection</h2><p>内存资源并非取之不尽用之不竭的，对于无用对象我们需要回收其所占用的内存。首先我们来思考三个问题：如何判断对象可被回收，何时执行回收，如何执行回收？现在我带领大家来揭开垃圾收集技术的神秘面纱。</p><p>判断对象可被回收的方法：</p><ul><li>引用计数法：给对象添加一个引用计数器，对象被引用时计数器值加一，引用失效时计数器值减一，值为0时表示对象不再使用可被回收。由于引用计数法无法解决循环引用的问题，因此虚拟机没有采用这种方案</li><li>可达性分析法：主流商用虚拟机采用的方案，以一系列作为<code>GC Root</code>对象作为起点，以引用作边，进行图的遍历，走过的路径称为引用链，未被遍历的对象为不可用对象需要进行回收。Java中可作为<code>GC Roots</code>的对象：<ul><li>虚拟机栈区的栈帧中的本地变量表引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈区Native方法引用的对象</li></ul></li></ul><p>四种引用类型：</p><ul><li>强引用：new创建的对象产生的引用，只要强引用存在，即使OOM也不能被回收</li><li>软引用：OOM前会回收该引用指向的对象，JDK1.2之后提供SoftReference类实现软引用</li><li>弱引用：下一次GC时会回收该引用指向的对象，JDK1.2之后提供WeakReference类实现弱引用</li><li>虚引用：无法通过虚引用来获得对象实例，关联的对象仅在被回收时收到一个系统通知。可以用于监视缓存，对象回收后释放资源的工作。JDK1.2之后提供PhantomReference类实现虚引用</li></ul><p>垃圾回收算法：</p><ul><li>标记-清除算法：最基础的回收算法，通过可达性分析遍历后标记出所有可回收的对象，然后回收所有被标记过的对象。效率不高，容易产生内存碎片</li><li>复制算法：将可用内存划分为大小相等的两块，每次使用其中一块，当空间占满后将所有存活对象复制到另一块并清理当前这一块的空间。这样提高了效率，解决了内存碎片的问题，代价是每次只能使用一半的内存空间。这种方案适合对象存活率低的场景，可以减少复制对象带来的开销。根据新生代对象“朝生夕死”的特点，用于回收新生代对象。</li><li>标记-整理算法：标记过程类似标记-清除算法，但是之后不是直接回收，而是将所有存活对象移至一端，然后清除端边界外的内存。这种方法解决了内存碎片化问题，也提高了内存空间利用率，适合对象存活率高的场景，每次只需要标记少量对象，适合老年代。</li><li>分代收集算法：根据对象存活周期的不同将内存划分为新生代和老年代，根据各自特点采用合适的回收算法。</li></ul><p>GC类型：</p><ul><li>Minor GC：Eden区内存不足以分配给对象时触发的新生代GC，频率高</li><li>Major GC：通常等价于Full GC，会<code>Stop-The-World</code>。老年代/永久代的GC，频率低速度慢，伴随至少一次的Minor GC</li></ul><p>了解以上内容后，最后完整梳理一下分代收集算法具体过程以及采用的GC策略：</p><ul><li>在新生代区域根据<code>SurvivorRatio</code>参数划分Eden，Survivor A，Survivor B三块区域比例</li><li>每次创建实例时会优先在Eden分配内存，Eden空间不足时执行Minor GC，采用复制算法将所有存活对象复制到Survivor B中，然后将Eden清空后继续向外提供内存空间，Eden空间再次不足时将Eden和Survivor A中存活的对象复制到Survivor B中，同时清空Eden和Survivor A，每次Eden对象复制时使用一块Survivor，如此反复。</li><li>虚拟机给每个对象都分配了一个年龄计数器，对象在Survivor区中每“熬过”一次Minor GC后年龄加一，超过MaxTenuringThreshold参数值时会晋升到老年代</li><li>当老年代空间不足或永久代空间不足时会执行Major GC，采用的GC算法是标记-整理算法</li></ul><p>以上是分代收集算法的完整过程，除了上面描述的常规过程以外，实际过程中还存在一些额外策略：</p><ul><li>大对象直接进入老年代：大量连续内存的Java对象，比如很长的字符串以及数组</li><li>动态对象年龄判定：如果在Survivor空间中所有年龄相同的对象大小总和大于Survivor空间的一半，则年龄大于或等于该年龄的对象就可以忽略MaxTenuringThreshold参数值直接进入老年代。</li><li>空间分配担保：在Minor GC发生之前会先检查老年代最大连续空间是否大于新生代所有对象总空间，这是为防止内存回收后新生代对象全部存活状态，导致老年代无法提供足够空间，导致Minor GC后紧接着又执行Full GC的情况。而虚拟机在完成内存回收前并不知道会存在新生代全部是存活状态这种极端情况，因此虚拟机会查看HandlePromotionFailure值是否允许担保失败。如果不允许担保失败（HandlePromotionFailure == false）则直接进行Full GC；如果允许担保失败（HandlePromotionFailure == true）则虚拟机会将老年代最大连续可用空间与之前每一次回收晋升到老年代对象容量的平均值作比较，大于则相当于担保成功尝试Minor GC，小于则相当于担保失败直接执行Full GC。</li></ul><p>虚拟机支持参数配置，我们可以根据应用场景设置相应参数达到性能优化的效果：</p><p>示例：-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</p><table><thead><tr><th style="text-align:center">Params</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Xms</td><td style="text-align:center">最小堆容量</td></tr><tr><td style="text-align:center">Xmx</td><td style="text-align:center">最大堆容量</td></tr><tr><td style="text-align:center">Xmn</td><td style="text-align:center">新生代容量 &lt;==&gt; Eden + Survivor A + Survivor B</td></tr><tr><td style="text-align:center">PrintGCDetail</td><td style="text-align:center">记录GC日志</td></tr><tr><td style="text-align:center">SurvivorRatio</td><td style="text-align:center">新生代中Eden与Survivor区域的比值，默认值为8</td></tr><tr><td style="text-align:center">PretenureSizeThreshold</td><td style="text-align:center">对象大小大于该值，直接分配至老年代</td></tr><tr><td style="text-align:center">MaxTenuringThreshold</td><td style="text-align:center">大于该阈值时晋升至老年代，默认值为15</td></tr><tr><td style="text-align:center">HandlePromotionFailure</td><td style="text-align:center">是否允许担保失败</td></tr><tr><td style="text-align:center">ParalleGCThreads</td><td style="text-align:center">设置并行GC时进行内存回收的线程数</td></tr></tbody></table><h1 id="类加载与执行引擎"><a href="#类加载与执行引擎" class="headerlink" title="类加载与执行引擎"></a>类加载与执行引擎</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。</p><p>Class文件：一串二进制字节流，无论以何种形式存在。</p><p>类加载生命周期：</p><ul><li>Loading（加载）：通过一个类的全限定名获取类的二进制字节流，将字节流所代表的静态存储结构转化为方法区运行时数据结构，最后在内存中生成一个代表该类的java.lang.Class对象作为访问类数据信息的方法区入口。</li><li>Verification（验证）：保证Class文件字节流合法性，防止恶意代码危害虚拟机安全，验证动作包括文件格式验证、元数据验证、字节码验证、符号引用验证。</li><li>Preparation（准备）：正式在方法区为类变量分配内存并设置类变量初始值，除ConstantValue属性外通常为零值。</li><li>Resolution（解析）：将常量池中的符号引用转换为直接引用，JVM根据16个字节码指令判断是在类加载时就对常量池进行符号引用解析，还是等到使用时进行解析。<ul><li>符号引用：以一组符号描述所引用的目标，符号可以是任意形式的字面量。</li><li>直接引用：可以是直接指向目标的指针、相对偏移量或间接定位到目标的句柄。</li><li>运行时绑定使得程序实际执行到invokedynamic指令时才进行解析。</li></ul></li><li>Initialization（初始化）：真正执行Java代码，父类<code>&lt;clinit&gt;()</code>方法优先执行，<ul><li><code>&lt;clinit&gt;()</code>方法由类变量赋值动作和静态语句块组成，编译器收集的顺序由语句在源文件中出现的顺序决定。</li><li>父类<code>&lt;clinit&gt;()</code>方法优于子类<code>&lt;linit&gt;()</code>方法先执行。</li><li><code>&lt;clinit&gt;()</code>方法对于class或interface非必需。</li><li>VM保证一个类的<code>&lt;linit&gt;()</code>方法在多线程中能被正确加锁、同步，只会有一个线程去执行<code>&lt;linit&gt;f()</code>方法。</li></ul></li><li>Using（使用）</li><li>Unloading（卸载）</li></ul><p>类加载场景：</p><ul><li>遇到new，getstatic，putstatic，invokestatic 4条指令时</li><li>使用<code>java.lang.reflect</code>包方法对类进行反射调用时</li><li>子类初始化时首先初始化其父类</li><li>虚拟机启动时，首先初始化包含main方法的主类</li><li><code>JDK1.7 java.lang.invoke.MethodHandle</code>解析出REF_getStatic，REF_putStatic，REF_invokeStatic的方法句柄时，初始化句柄类</li></ul><p>四种类型的加载器：</p><ul><li>BootstrapClassLoader：由JVM内部实现，负责加载<code>$JAVA_HOME/lib</code>或<code>-Xbootclasspath</code>并且是虚拟机识别的核心类库至内存。 </li><li>ExtClassLoader：继承java.lang.ClassLoader，负责加载<code>$JAVA_HOME/lib/ext</code>或<code>java.ext.dirs</code>指定的类库。</li><li>AppClassLoader：继承java.lang.ClassLoader，负责加载<code>classpath</code>路径的类库，默认类加载器。</li><li>CustomClassLoader：如果我们想动态加载class文件（本地文件/网络下载），需要自定义类加载器，继承java.lang.ClassLoader，并重写findClass方法。</li></ul><p>对于任何一个类，由加载它的类加载器和这个类一同确立其在JVM中的唯一性，每个加载器类都有一个独立的类名称空间。同一个Class文件，被同一个虚拟机加载，但是使用不同的类加载器时，会得到不同的两个类，而影响equal，isAssignableFrom，isInstance方法的返回结果和instanceof的判定。那么全限定类名一致的情况下如何保证唯一确定一个类呢？双亲委派模型类加载机制可以解决这个问题。</p><p>双亲委派模型：类加载器收到类加载请求时，优先将请求交给parent加载器加载，无法完成时才自己加载，类似与责任链设计模式。加载器之间使用组合Composition关系复用parent加载器的代码，加载请求的传递路径为：<code>CustomClassLoader -&gt; AppClassLoader -&gt; ExtClassLoader -&gt; BootstrapClassLoader</code>。下面是ClassLoader的loadClass方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 首先检查请求的类是否已经被加载过了</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// 父类无法完成加载</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        resolveClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载流程梳理：</p><ul><li>首先检查类是否被加载过，如果已加载直接返回加载过的Class对象</li><li>没有加载过，递归父类加载器的loadClass方法处理加载请求</li><li>parent加载器加载成功，则直接返回</li><li>parent加载器加载失败，调用本身的findClass方法加载类</li></ul><p>以类java.lang.Object为例，无论是哪一个类加载器要加载该类，双亲委派模型可以实现最终交给模型最顶端的BootstrapClassLoader加载，保证Object类在程序运行中的唯一性。现在我们来分析另一种场景，如果用户在项目中编写了java.lang.Object类，双亲委派机制使得<code>AppClassLoader</code>最终会委托<code>BootstrapLoader</code>调用loadClass方法加载，而java.lang.Object已加载过<code>$JAVA_HOME/lib</code>中的java.lang.Object类了，会通过<code>BootstrapClassLoader</code>的findLoadedClass方法直接返回该类，解决了加载多个java.lang.Object的问题，保证了类的唯一性。</p><p>根据上面的源码，我们得到自定义ClassLoader的规则，继承ClassLoader类，重写findClass方法而无需重写loadClass方法，确保双亲委派机制的逻辑正确执行。</p><h2 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h2><p>运行时栈帧（Stack Frame）：栈帧是用于虚拟机进行方法调用和方法执行的数据结构，包括局部变量表、操作栈、动态链接、返回地址和附加信息。每一个方法从调用开始到执行完成的过程，对应一个栈帧虚拟机栈中从入栈到出栈的过程。下面我们通过分析栈帧结构了解字节码是如何被执行的。</p><ul><li>局部变量表：一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。除了上面内存模型中对局部变量表的介绍，虚拟机是如何描述Java方法执行时是参数值到参数列表的传递过程呢？首先，如果是调用实例方法则Slot 0存放调用该方法的对象的引用，因此可以使用this访问到该对象；如果调用的是类方法则Slot 0存放0。接下来的Slot按照方法参数列表 ==&gt; 局部变量列表的顺序存放变量。需要注意的是局部变量中的Slot可重用，当方法体内定义的变量超出其作用域时，会被后面的变量重用前面变量的Slot</li></ul><p>我们观察下面简短的代码对GC的影响可以说明局部变量表Slot复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">byte</span>[] placeholder = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 代码A</span></span><br><span class="line">    System.gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）直接执行程序，placeholder内存会被回收。<br>（2）将代码A注释掉，执行程序后内存并没有被回收。</p><p>自然地我们需要知道placeholder能否被回收的根本原因：局部变量表中的Slot是否存在有关于placeholder数组对象的引用。情形（1）虽然代码已经离开了placeholder作用域，后面没有任何对局部变量表的读写操作，placeholder原本占用的Slot仍旧保持着对placeholder的引用，所以GC roots仍会保持着对placeholder的关联导致placeholder不能被回收。情形（2）利用了Slot可重用性，<code>int a = 0</code>中的变量a会重用placeholder占用的Slot，导致placeholder解引用可以被GC回收。</p><ul><li>操作数栈：具有存放执行运算的参数、栈帧数据共享的功能，Java虚拟机的解释执行引擎称为“基于栈的执行引擎”中的“栈”就是操作数栈</li><li>动态连接：字节码中的方法调用指令以常量池中指向方法的符号引用做参数。符号引用在类加载阶段或第一次使用时转为直接引用称为静态解析，每次在运行期转化为直接引用称为动态连接</li><li>方法返回地址：方法遇return指令正常退出时会将调用者的PC计数器值作为返回地址，异常退出时通过异常处理表确定返回地址</li></ul><p>下面是一段Java程序的执行过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (a + b) * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242153374.gif" alt=""></p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法调用阶段的唯一任务是确定被调用方法的版本，不涉及方法内部的具体执行过程，通常会经过解析和分派的过程：</p><ul><li>解析：运行前可唯一确定一个可调用版本，并且该方法调用版本在运行期不可变的方法，能被invokestatic和invokespecial指令调用的方法例如静态方法、私有方法、实例构造器、父类方法以及使用invokevirtual调用的final方法，类加载解析阶段会将该方法的符号引用解析为直接引用，即编译期确定<ul><li>invokestatic：调用静态方法</li><li>invokespecial：调用实例构造器<code>&lt;init&gt;</code>方法、private方法和父类方法</li><li>invokevirtual：调用所有虚方法</li><li>invokeinterface：调用接口方法</li><li>invokedynamic：先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法</li></ul></li><li>分派<ul><li>静态分派：根据静态类型来定位方法执行版本的分派，编译器完成，经典应用是函数的重载</li><li>动态分派：依赖实际类型来定位方法执行版本的分派，运行期完成，经典应用是函数的重写</li></ul></li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Human</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br></pre></td></tr></table></figure><p>在这个例子里，man这个实例的静态类型是<code>Human</code>，实际类型是<code>Man</code></p><p>未完待续</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《深入理解Java虚拟机》<br><a href="https://blog.codeest.moe/2017/06/05/android-jvm-note/"></a><br><a href="http://blog.csdn.net/isunn/article/details/50487329"></a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式篇之除了你之外我都不要</title>
      <link href="/2017/09/24/desgin-pattern-singleton/"/>
      <url>/2017/09/24/desgin-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：lazy，非线程安全，简单</p><h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：not lazy，线程安全，简单高效，但类加载时就初始化，即使暂不需要，浪费内存</p><h1 id="双重校验锁-Double-checked-locking"><a href="#双重校验锁-Double-checked-locking" class="headerlink" title="双重校验锁(Double-checked locking)"></a>双重校验锁(Double-checked locking)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 代码1</span></span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 代码2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：Lazy，线程安全，多线程下能保持高性能</p><h4 id="为什么需要volatile？"><a href="#为什么需要volatile？" class="headerlink" title="为什么需要volatile？"></a>为什么需要volatile？</h4><p>加volatile关键字生成的汇编指令会多一个lock前缀指令，相当于一个内存屏障。</p><ul><li>禁止进行指令重排序。</li><li>保证了不同线程对该变量操作的可见性。具体来说是强制将对缓存的修改立即写入主存，<br>如果是写操作，它会导致其他CPU中对应的缓存行无效。</li></ul><h4 id="为什么需要双重if校验？"><a href="#为什么需要双重if校验？" class="headerlink" title="为什么需要双重if校验？"></a>为什么需要双重if校验？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 代码2</span></span><br></pre></td></tr></table></figure><p>上面这行可以分解为三个操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> memory = allocate(); <span class="comment">// 分配内存</span></span><br><span class="line"><span class="number">2.</span> ctorInstance(memory); <span class="comment">// 初始化对象</span></span><br><span class="line"><span class="number">3.</span> instance = memory; <span class="comment">// 设置instance指向刚分配的地址</span></span><br></pre></td></tr></table></figure><p>如果没有加入volatile关键字，可能会出现指令重排序<code>1-2-3</code>或<code>1-3-2</code>两种情况<br>对于第2种情况，线程A，B都进入getInstance方法后，线程A获得锁，执行了1，3，此时B判断instance不为null，直接返回未初始完成的对象，就会出现问题。因此需要用volatile保证指令重排序。</p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    SINGLETON;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：not Lazy，线程安全，实现简单，不存在反射和反序列化漏洞</p><h1 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类(static nested class)"></a>静态内部类(static nested class)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：Lazy，线程安全，实现相比双重校验锁简单<br>引申：静态内部类与内部类区别，内存泄漏<br>静态内部类等同于外部类的静态方法，只能访问外部类的静态变量和静态方法。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树必知必会</title>
      <link href="/2017/09/14/data-structure-bintree/"/>
      <url>/2017/09/14/data-structure-bintree/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章总结了二叉树常见的操作集合，大体从递归非递归给出代码实现，包括以下各个操作：</p><ul><li>遍历二叉树</li><li>建立二叉树</li><li>插入节点</li><li>查找节点</li><li>删除节点</li><li>求树的高度</li></ul><h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><h4 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rPreOrderTraversal</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.print(root.getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        rPreOrderTraversal(root.getLeft());</span><br><span class="line">        rPreOrderTraversal(root.getRight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rInOrderTraversal</span><span class="params">(Node&lt;T&gt; tree)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        rPreOrderTraversal(root.getLeft());</span><br><span class="line">        System.out.print(root.getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        rPreOrderTraversal(root.getRight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rPostOrderTraversal</span><span class="params">(Node&lt;T&gt; tree)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        rPreOrderTraversal(root.getLeft());</span><br><span class="line">        rPreOrderTraversal(root.getRight());</span><br><span class="line">        System.out.print(root.getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h4><p>非递归遍历借助堆栈实现<br>前序与中序：</p><ol><li>遇到一个节点，压栈，并遍历其左子树</li><li>左子树遍历结束后，栈顶弹出节点</li><li>对弹出节点的右子树进行先（中）序遍历</li></ol><p>区别 =&gt; 访问时刻：入栈时访问节点是先序，出栈时访问节点为后续</p><p>后序：<br>采用两个栈，栈1保存遍历顺序，栈2保存访问的倒序。<br>下图是前序、中序、后序的访问顺序：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242304183.png" alt=""></p><p>注：电灯泡符号、三角形、星号分别表示前序、中序、后序访问各节点的时刻</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    Stack&lt;Node&lt;T&gt;&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&lt;T&gt;&gt;();</span><br><span class="line">    Node&lt;T&gt; tree = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tree != <span class="literal">null</span> || !stack.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tree != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(tree.getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            stack.push(tree);</span><br><span class="line">            tree = tree.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">            tree = stack.pop();</span><br><span class="line">            tree = tree.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    Stack&lt;Node&lt;T&gt;&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&lt;T&gt;&gt;();</span><br><span class="line">    Node&lt;T&gt; tree = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tree != <span class="literal">null</span> || !stack.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tree != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(tree);</span><br><span class="line">            tree = tree.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">            tree = stack.pop();</span><br><span class="line">            System.out.print(tree.getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            tree = tree.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    Stack&lt;Node&lt;T&gt;&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&lt;T&gt;&gt;();</span><br><span class="line">    Stack&lt;Node&lt;T&gt;&gt; s2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&lt;T&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 先将根节点入栈</span></span><br><span class="line">        s1.push(root);</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; tempNode;</span><br><span class="line">    <span class="keyword">while</span> (!s1.empty()) &#123;</span><br><span class="line">        tempNode = s1.pop(); <span class="comment">// 弹出当前根节点</span></span><br><span class="line">        s2.push(tempNode); <span class="comment">// 当前根节点入栈</span></span><br><span class="line">        <span class="comment">// 根节点的左右子节点入栈</span></span><br><span class="line">        <span class="keyword">if</span> (tempNode.getLeft() != <span class="literal">null</span>) &#123; </span><br><span class="line">            s1.push(tempNode.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tempNode.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">            s1.push(tempNode.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s2.empty()) &#123;</span><br><span class="line">        System.out.print(s2.pop().getData()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><p>借助队列先进先出性质实现层序遍历</p><ol><li>将根节点入队</li><li>执行循环：节点出队，访问该节点，左右儿子入队</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&lt;T&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node&lt;T&gt; temp = queue.poll();</span><br><span class="line">        System.out.print(temp.getData() +<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(temp.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(temp.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Node&lt;Integer&gt; tree = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;BinTree.txt&quot;</span>)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.setIn(is);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    tree = buildTree(tree, sc);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">buildTree</span><span class="params">(Node&lt;Integer&gt; root, Scanner sc)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sc.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">data</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span> (data == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        root.setLeft(buildTree(root.getLeft(), sc));</span><br><span class="line">        root.setRight(buildTree(root.getRight(), sc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">insert</span><span class="params">(Integer t, Node&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(t);</span><br><span class="line">        root.setLeft(<span class="literal">null</span>);</span><br><span class="line">        root.setRight(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; root.getData()) &#123;</span><br><span class="line">            root.setLeft(insert(t, root.getLeft()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; root.getData()) &#123;</span><br><span class="line">            root.setRight(insert(t, root.getRight()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">find</span><span class="params">(Integer t, Node&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; root.getData()) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(t, root.getRight());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; root.getData()) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(t, root.getLeft());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">iterFind</span><span class="params">(Integer t, Node&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; root.getData()) &#123;</span><br><span class="line">            root = root.getRight();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; root.getData()) &#123;</span><br><span class="line">            root = root.getLeft();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">findMax</span><span class="params">(Node&lt;T&gt; tree)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tree.getRight()!= <span class="literal">null</span>) &#123;</span><br><span class="line">            tree = tree.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">findMin</span><span class="params">(Node&lt;Integer&gt; tree)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tree.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            tree = tree.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h1><p>按值删除一个节点，用二分查找递归到需要删除的节点，根据删除节点是否有左右子树分三种情况：</p><ol><li>无左右子树，直接将父节点对其引用置为null。</li><li>只有左子树或者右子树，将父节点对其引用置为其左子树或右子树。</li><li>存在左子树和右子树，在右子树中找最小节点代替被删节点，接着对其右子树的替身节点即最小节点进行删除。<br>其中1，2可以合并为一种情况，</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;Integer&gt; <span class="title function_">delete</span><span class="params">(Integer t, Node&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    Node&lt;Integer&gt; temp;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;未找出要删除节点&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; root.getData()) &#123;</span><br><span class="line">        root.setLeft(delete(t, root.getLeft()));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; root.getData()) &#123;</span><br><span class="line">        root.setRight(delete(t, root.getRight()));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (root.getLeft()!= <span class="literal">null</span> &amp;&amp; root.getRight() != <span class="literal">null</span>) &#123; <span class="comment">// 存在左右子树，找右子树最小节点替换被删节点，对右子树的替身节点删除</span></span><br><span class="line">            temp = findMin(root.getRight());</span><br><span class="line">            root.setData(temp.getData());</span><br><span class="line">            root.setRight(delete(temp.getData(), root.getRight()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.getLeft() == <span class="literal">null</span>) &#123; <span class="comment">// 左子树为空，用右子节点替换本身</span></span><br><span class="line">                root = root.getRight();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.getRight() == <span class="literal">null</span>) &#123; <span class="comment">// 右子树为空，用左子节点替换本身</span></span><br><span class="line">                root = root.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="求树高"><a href="#求树高" class="headerlink" title="求树高"></a>求树高</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6.tree height</span></span><br><span class="line"><span class="comment">// height = max&#123;lh, rh&#125; + 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">postOrderGetHeight</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> heightLeft, heightRight, maxHeight;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        heightLeft = postOrderGetHeight(root.getLeft());</span><br><span class="line">        heightRight = postOrderGetHeight(root.getRight());</span><br><span class="line">        maxHeight = heightLeft &gt; heightRight ? heightLeft : heightRight;</span><br><span class="line">        <span class="keyword">return</span> maxHeight+<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 空树高度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/solano-yume/Algorithm/tree/master/Tree/BinTree">Github代码仓库</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA的Swing程序打包为exe可执行文件</title>
      <link href="/2017/08/16/pack-java-program-to-exe-file/"/>
      <url>/2017/08/16/pack-java-program-to-exe-file/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人要将基于Spring Boot + JPA/Hibernate框架写的Swing程序打包为exe可执行文件发布，踩了各种坑，虽然结果不尽人意，但不做点记录感觉对不起自己浪费的时间。</p><h1 id="了解jar与exe"><a href="#了解jar与exe" class="headerlink" title="了解jar与exe"></a>了解jar与exe</h1><p>Java程序创建出可执行jar包需要满足的是：首先要确定Main Class，即是应用程序的入口，其次是需要Java运行环境。而运行环境本身包括了你在项目的依赖，以及运行java程序所需的环境即JVM。</p><p>生成jar包在不同平台有不同方法，这里只给出Intellij IDEA平台的解决方案。</p><p>exe4j不支持将jre打包进入exe的，要让你的java变身成为的exe变得可执行，意味着什么呢？你需要告诉最终的exe文件去哪里找jre，exe4j打包是提供了查找jre几个方式：注册表，环境变量，或者某个路径。</p><p>当然我打包出来的目的肯定是要拿到没有jre环境的pc下使用，解决方案有两种：</p><ol><li>给电脑jre环境，装jdk（或者说至少要装个jre吧），还要看环境变量，麻烦；</li><li>指定jre相对路径，一起放到一个目录下，虽然不能融为一体，但是可以朝夕相伴嘛，当然你要将她保护起来也行。</li></ol><h1 id="创建可执行jar包"><a href="#创建可执行jar包" class="headerlink" title="创建可执行jar包"></a>创建可执行jar包</h1><p>打开<code>Project Structure（ctrl+shift+alt+s）</code>——&gt; <code>Artifacts</code> ——&gt; 点加号添加jar ——&gt; <code>From modules with dependecies...</code>,选择程序入口主类，Apply配置完成，生成<code>META-INF/MANIFEST.MF</code>文件，格式是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: cn.tsukasalwq.productmanager.ProductmanagerApplication</span><br></pre></td></tr></table></figure><p>Main-Class就是我们上面说到的主类，程序入口没错，不过请注意后面使用exe4j转为exe可执行文件时有变动。</p><p>因为用的是Maven做项目管理依赖，使用Maven进行jar打包。底部Terminal窗口，目录为当前工作根目录（和<code>pom.xml</code>同级）,命令如下，参数<code>-Dmaven.test.skip=true</code>表示排除测试代码后打包，不然有可能失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>不加参数在测试类没问题时候则一切正常，是直接在打开右边的Maven project面板，Lifecycle的双击package相当于执行<code>mvn package</code>命令生成jar包。</p><p>等在target文件中生成jar包后，用命令行，或双击执行它，前者可以看到控制台打印的信息。如果没什么差错，创建可执行jar包成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar  target/spring-boot-scheduler-<span class="number">1.0</span><span class="number">.0</span>.jar</span><br></pre></td></tr></table></figure><h1 id="jar转换为exe文件"><a href="#jar转换为exe文件" class="headerlink" title="jar转换为exe文件"></a>jar转换为exe文件</h1><p>前置工作：新建一个目录App,目录下放从jdk下拷贝出来的jre文件夹和之前创建的可执行jar包，相互厮守，记得不要忽略。</p><p>打开破解版的exe4j，设置各种参数：如exe名称，输出目录；Executable info下的程序是32位还是64位；Java invocation下添加需要打包的jar包并选择主类，重点了，要选择主类是<code>org.springframework.boot.loader.JarLauncher</code>，而不是我们写的，不过不用担心，这点等我弄清楚原因在更新。设置JRE下的最小jre版本，并将Search sequence下三种jre查找方式删除，添加刚才新建文件夹App下的jre目录，如果与jar包同级，添加完成后显示有<code>.\jre</code>。</p><p>打包完成后将jre文件夹和exe文件放在同级目录运行即可成功运行。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse如何构建一个SSM项目</title>
      <link href="/2017/07/30/eclipse-create-ssm-project/"/>
      <url>/2017/07/30/eclipse-create-ssm-project/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇针对新手使用Eclipse如何搭建SSM项目的教程，大佬可以右上叉了，文章主要内容包括：</p><ul><li>SSM框架原理备忘图示</li><li>Eclipse集成Maven工具</li><li>进行框架文件配置</li></ul><p>项目配置完成后的图片：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242248713.png" alt=""></p><h1 id="SSM框架工作原理"><a href="#SSM框架工作原理" class="headerlink" title="SSM框架工作原理"></a>SSM框架工作原理</h1><p>首先确保阅读过SSM各部分是如何工作的，又有那些配置文件，这里直接祭出一张Spring+SpringMVC+Mybatis框架工作原理：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242249878.png" alt=""></p><h1 id="Maven项目管理工具"><a href="#Maven项目管理工具" class="headerlink" title="Maven项目管理工具"></a>Maven项目管理工具</h1><p>Maven一个项目构建，依赖管理，项目信息管理工具，类似的还有Gradle，Ant。Maven主要有以下三个作用：</p><ul><li>下载jar包</li><li>寻找依赖，下载依赖</li><li>热部署，热编译</li></ul><p>那么你可能会问Maven是如何工作的呢？项目中所用到jar包，在没有用管理工具之前，我们先从网上下载回来存放到项目的lib目录中，然后添加相应的依赖，项目才能够使用其中的API完成我们的编码。而Maven则是一个只需要你在pom.xml配置文件中添加相应配置，就会帮你完成上述工作的工具。Maven又是去哪里获取依赖的呢？请看下图：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242249306.png" alt=""></p><p>首先Maven会从本地仓库寻找项目用到的jar包，假设我们配置私服，则先是到私服上面找，如果私服上也没有我们想要的jar包，最后才去中央仓库下载我们的依赖，如果中央服务器还是没有呢，好吧，大概是未发布上去的依赖jar包，这时你才需要使用原始的方法导入。</p><p>下载并安装Maven：<a href="http://maven.apache.org/download.cgi">下载Maven</a>并解压，配置环境变量<code>MAVEN_HOME</code>为<code>D:\Framework\Maven\apache-maven-3.5.0</code>,并添加到<code>PATH</code>中<code>%MAVEN_HOME%;</code><br>测试配置是否成功：打开cmd，运行输入<code>mvn -v</code>查看版本<br>本地仓库配置：新建<code>D:\Workplace\Maven\maven-repository</code>文件夹做本地仓库，用于存放下载的jar包。打开目录解压目录如<code>D:\Framework\Maven\apache-maven-3.5.0\conf</code>下的<code>settings.xml</code>编辑，setting标签内添加下面代码，然后复制<code>settings.xml</code>到仓库文件夹中，Eclipse会通过指定的settings.xml找到我们的本地仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Workplace\Maven\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>settings.xml</code>的mirrors配置了私服：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在profiles标签下配置jdk版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Eclipse进行关联：</p><ul><li><code>Windows =&gt; Preferences =&gt; Maven =&gt; Installations</code>中添加Maven安装目录并打勾</li><li><code>Maven =&gt; User Settings</code>下通过<code>Global Settings</code>或者<code>User Settings</code>设置本地仓库Local Repository，至此Maven配置结束</li></ul><p>下面讲解如何使用Maven呢？<br>首先在<a href="http://search.maven.org/"></a>中搜索你需要的jar包名称，添加需要jar包的<code>groupId</code>，<code>artifactId</code>，<code>version</code>三个属性，保存pom.xml文件后Maven就会自动下载并配置好，我们就可以愉快的使用API了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  项目名</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  项目模块  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  项目版本</span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Eclipse新建一个SSM项目"><a href="#Eclipse新建一个SSM项目" class="headerlink" title="Eclipse新建一个SSM项目"></a>Eclipse新建一个SSM项目</h1><ul><li><p>打开Eclipse，新建maven project，勾选<code>Create a simple project(skip archetype selection)</code>，web项目设置Packaging为war包，Maven项目创建成功</p></li><li><p>在新建项目右键，<code>Properties =&gt; Project Facets</code>中设置Dynamic Web Module版本为3.0和Java版本并勾选，点击新出现的<code>Further configuration available</code>填写<code>Content directory</code>为<code>src/main/webapp</code>,并勾选<code>Generate web.xml deployment descriptor</code>,Apply,Maven项目创建成功。</p></li><li>添加SSM框架用到的依赖配置，如下所示：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.tsukasalwq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssmproj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssmproj Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis/spring整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入java ee jar 包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;javax&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;8.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet-api相关 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- servlet-api相关 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JSTL标签类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 日志文件管理包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 格式化对象，方便输出日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 映入JSON --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上传组件包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- pagehelper分页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 反向工程创建依赖的jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- c3p0数据库连接池、驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssmproj<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>最后创建package：<br><code>cn.tsukasalwq.entity</code>：实体类，表结构的映射<br><code>cn.tsukasalwq.dao</code>：数据持久层，管理数据库<br><code>cn.tsukasalwq.service</code>：业务模块的逻辑应用设计<br><code>cn.tsukasalwq.controller</code>：业务模块流程的控制<br><code>cn.tsukasalwq.utils</code>：工具类集合</li></ul><p><strong>一个表 ==&gt; 实体类Entity ==&gt; 数据操作接口 ==&gt; xml ==&gt; 业务接口 ==&gt; 业务实现类</strong></p><h1 id="配置Mybatis"><a href="#配置Mybatis" class="headerlink" title="配置Mybatis"></a>配置Mybatis</h1><p>配置dtd<br>解压mybatis的jar包,把<code>org/apache/ibatis/builder/xml</code>的dtd文件复制到Tools文件夹，<code>Windows--&gt;Preferences--&gt;XML--&gt;XML Catalog配置</code><br><code>mybatis-3-config.dtd</code>对应key：<code>-//mybatis.org//DTD Config 3.0//EN</code><br><code>mybatis-3-mapper.dtd</code>对应key：<code>-//mybatis.org//DTD Mapper 3.0//EN</code></p><p><code>mybatis-config.xml</code>是mybatis的全局配置文件，用于配置数据源，事务。<br>步骤：new other =&gt; 输入xml选xml file =&gt; 一直next，配置dtd，生成<code>mybatis-config.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;mybatis-3-config.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>映射文件<code>XXXMapper.xml</code>初始化如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置：<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:cache</span>=<span class="string">&quot;http://www.springframework.org/schema/cache&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/cache </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/cache/spring-cache-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小技巧：对常用代码段可以配置模板，Preferences =&gt; XM =&gt; XML Files=&gt; Editor =&gt;Templates中添加，在<code>.xml</code>文件<code>Alt+/</code>即可直接导入模板。</p><p><code>spring-servlet.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:cache</span>=<span class="string">&quot;http://www.springframework.org/schema/cache&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包，将@Controller的类通过spring容器创建一个实例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span></span></span><br><span class="line"><span class="tag">        <span class="attr">base-package</span>=<span class="string">&quot;cn.tsukasalwq.controller,cn.tsukasalwq.service&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一键化配置，自动注册处理器，处理器适配器等，解决乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 100M --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;104857600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="在Spring中整合SpringMVC："><a href="#在Spring中整合SpringMVC：" class="headerlink" title="在Spring中整合SpringMVC："></a>在Spring中整合SpringMVC：</h1><p>在项目上右键，Resource中设置xml编码为UTF-8<br>加载Spring的配置文件<code>applicationContext.xml</code>，监听器方式，虽然<code>applicationContext.xml</code>放在<code>webapp/WEB-INF</code>下会自动加载，但是不方便集中管理，存在多个Spring配置文件时可以用<code>*</code>组合加载进来<br>SpringMVC配置文件，它是通过一个<code>DispatchServlet</code>的Servlet去配置的</p><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;schedule-console&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ssmproj<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决post方法乱码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置监听器加载Spring的配置文件applicationContex.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 防止Spring内存溢出监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dispatchServlet，加载SpringMVC的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Servers</code>添加相应版本<code>tomcat =&gt; 右键 =&gt; Add and Remove</code><br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242249107.png" alt=""></p><p><code>Project Explorer</code>视图下的<code>Server =&gt; server.xml</code>更改根名称，以<code>localhost:8080</code>为根目录则更改为下面的path</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;ssmproj&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">source</span>=<span class="string">&quot;org.eclipse.jst.jee.server:ssmproj&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>Navigator</code>视图下，<code>.settings</code>文件夹文件<code>org.eclipse.wst.common.project.facet.core.xml</code>更改java,jst相关版本和添加相应fixed</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">runtime</span> <span class="attr">name</span>=<span class="string">&quot;Apache Tomcat v8.5&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">&quot;wst.jsdt.web&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.web&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">&quot;java&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;java&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.8&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.web&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;wst.jsdt.web&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，项目已经可以跑起来了，要想整合持久层框架则需要<code>mybatis-config.xml</code>文件整合进来。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> SSM </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中移物联网实习小记</title>
      <link href="/2017/07/29/feelings-about-working-in-iot/"/>
      <url>/2017/07/29/feelings-about-working-in-iot/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="实习生活"><a href="#实习生活" class="headerlink" title="实习生活"></a>实习生活</h1><p>7.5晚收到中移物联网实习生录取通知，收拾完东西，7号前往深圳，期间认识了许多大神朋友。7.8到达深圳，第一次住青年旅馆，青旅作为一两日的停留或许可以，令人堪忧的卫生情况让我彻底打消了长期居住的想法。</p><p>7.9早8点半，踏上寻舍之旅，当天步数毫无疑问登qq步数榜首，累。所幸是许多朋友帮助，现居住的地方是一个在深圳工作两年左右的妹子介绍的，也一起为找住处逛了许多地方，意外惊喜的这位姐姐也喜欢日本文化并且想学习日语！晚上安顿好夜已深，1点睡。</p><p>7.10早6：00起床，7点50左右到公司，比报到时间早了1个多小时，与门外江阿姨聊了会天，8点半进公司，刘大哥让我坐着等待。和HRBP贺姐姐签完实习协议后，认识导师姚华超和部分组内同事。接着组装领取的HP新电脑，win7更新为win10，配置环境，确定4G家庭基站项目学习。</p><p>7.11早8点到公司，学习TR069 CPE广域网管理协议，搭本地项目环境搭了半天，在才庆哥和梁贝哥的帮助下终于跑起项目。</p><p>7.12拿到项目代码，项目是基于ssm框架写的。学习了mybatis框架，读项目代码。</p><p>7.13几乎接了一上午网线，除了首次接线成功的小高兴，有些心疼宝贵的时间。在谢大哥和才庆哥的帮助下完成家庭基站网管设备配置，研读代码，找bug。</p><p>7.14第一次参加会议，了解Bug管理工具Bugzilla.</p><p>7.20听华超分析了家庭基站的网络拓扑，把计算机网络理解得这么透彻原来是这么棒，初步设计了mac地址管理器的数据库。</p><p>7.27写了个Mac地址管理器工具，bug待测试，学习Spring boot框架。</p><p>7.28下午公司半年工作报告会，各部门代表发言，或许中移现在的深圳分公司可以用这句话概括：麻雀虽小，五脏俱全，这是一个有目标充满斗志的团队，同事关系很不错，首次产生一起开拓公司的未来的想法。开了整整5个小时，了解到一个公司各个部门是怎么运作的以及一些新观点和语言艺术，陈总说的这句”你的心里能容得下多少人，就有多少人能够容得下你”颇有同感，于人际关系而言是和谐相处，于公司来说是实现共同目标，一个问题在个人与公司角度来看是不一样的，但是无论从哪个角度都有不变的思想核心，另外，”公平”与”公正”的话题，何为成长，果然自己还是差得远了。总之，得到了许多有价值的东西。晚上一起去烧烤，吃得很饱，喝得很欢，聊得很开心，不过国企的酒文化还真的不是盖得啊，差点醉了。。。</p><h1 id="感悟与总结"><a href="#感悟与总结" class="headerlink" title="感悟与总结"></a>感悟与总结</h1><p>三周中，心中最强烈的两点感受是：</p><ol><li>学生时期真的应该早点去公司实习，在周围有那么多优秀的人和资源下努力，你也会变得优秀。实践让你知道自己缺乏什么能力，想要达成自己的目标如何前进才最快速。</li><li>靠自己的力量生活才知道生活是那么的不容易，父母是伟大的，我现在能做的只是不断变得强大。</li></ol><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView学习笔记</title>
      <link href="/2017/07/05/recyclerview-learning-notes-01/"/>
      <url>/2017/07/05/recyclerview-learning-notes-01/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是针对Android的RecyclerView的学习笔记，主要内容有：</p><ul><li>RecyclerView实现ListView</li><li>RecyclerView实现StaggeredGridLayout</li></ul><p>RecyclerView可轻松实现ListView、GridView、瀑布流布局，可以设置横向，纵向显示，自带的ItemAnimation添加动画效果简单，并且能够快速实现各种动态浏览效果</p><h1 id="RecyclerView实现ListView"><a href="#RecyclerView实现ListView" class="headerlink" title="RecyclerView实现ListView"></a>RecyclerView实现ListView</h1><p>和ListView实现一样，RecylerView需要经过写布局，定义适配器，加载布局三个步骤，只是ViewHolder需要继承RecyclerView.ViewHolder。</p><h4 id="写布局"><a href="#写布局" class="headerlink" title="写布局"></a>写布局</h4><p>使用RecyclerView需在项目build.gradle的dependencies闭包中添加以下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &#x27;com.android.support:recyclerview-v7:24.2.1&#x27;</span><br></pre></td></tr></table></figure><p><code>girl_item.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/girl_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;72dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;72dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/girl_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;chiaki&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>recycler_view.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="写适配器"><a href="#写适配器" class="headerlink" title="写适配器"></a>写适配器</h4><p><code>GirlsAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlsAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;GirlsAdapter.ViewHolder&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Girl&gt; girlList;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GirlsAdapter</span><span class="params">(List&lt;Girl&gt; girlList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.girlList = girlList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.girl_staggered_item, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">        viewHolder.girlView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> viewHolder.getAdapterPosition();</span><br><span class="line">                <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you cliced view &quot;</span>+girl.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        viewHolder.girlImage.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> viewHolder.getAdapterPosition();</span><br><span class="line">                <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you clicked image &quot;</span>+girl.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">        holder.girlImage.setImageResource(girl.getImageId());</span><br><span class="line">        holder.girlName.setText(girl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> girlList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        View girlView;</span><br><span class="line">        ImageView girlImage;</span><br><span class="line">        TextView girlName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            girlView = itemView;</span><br><span class="line">            girlImage = (ImageView) itemView.findViewById(R.id.girl_image);</span><br><span class="line">            girlName = (TextView) itemView.findViewById(R.id.girl_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载布局"><a href="#加载布局" class="headerlink" title="加载布局"></a>加载布局</h4><p>通过布局管理器，设置相应布局以及滚动方向</p><p><code>RecyclerViewActivity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Girl&gt; girlsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.recycler_view);</span><br><span class="line"></span><br><span class="line">        initGirls();</span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> (RecyclerView) findViewById(R.id.recycler_view);</span><br><span class="line">        <span class="comment">// 选用不同布局Manager，实现你想要的布局</span></span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>); <span class="comment">// 设置ListView</span></span><br><span class="line">        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);<span class="comment">// 横向滚动</span></span><br><span class="line">        recyclerView.setLayoutManager(layoutManager); <span class="comment">// </span></span><br><span class="line">        <span class="comment">// recyclerView.setLayoutManager(new GridLayoutManager(this, 2));//这里用线性宫格显示 类似于grid view</span></span><br><span class="line">        <span class="comment">// recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2, OrientationHelper.VERTICAL));//这里用线性宫格显示 类似于瀑布流</span></span><br><span class="line"></span><br><span class="line">        <span class="type">GirlsAdapter</span> <span class="variable">girlsAdapter2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlsAdapter</span>(girlsList);</span><br><span class="line">        recyclerView.setAdapter(girlsAdapter2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initGirls</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;chiaki&quot;</span>, R.drawable.icon1);</span><br><span class="line">            girlsList.add(gir11);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;setsuna&quot;</span>, R.drawable.icon2);</span><br><span class="line">            girlsList.add(gir12);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;touma&quot;</span>, R.drawable.icon3);</span><br><span class="line">            girlsList.add(gir13);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir14</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;koharu&quot;</span>, R.drawable.icon4);</span><br><span class="line">            girlsList.add(gir14);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;mari&quot;</span>, R.drawable.icon5);</span><br><span class="line">            girlsList.add(gir15);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir16</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;nayuki&quot;</span>, R.drawable.icon6);</span><br><span class="line">            girlsList.add(gir16);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir17</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;aiko&quot;</span>, R.drawable.icon7);</span><br><span class="line">            girlsList.add(gir17);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir18</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;nagisa&quot;</span>, R.drawable.icon8);</span><br><span class="line">            girlsList.add(gir18);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RecyclerView实现StaggeredGridLayout"><a href="#RecyclerView实现StaggeredGridLayout" class="headerlink" title="RecyclerView实现StaggeredGridLayout"></a>RecyclerView实现StaggeredGridLayout</h1><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242229770.png" alt=""></p><h4 id="写布局-1"><a href="#写布局-1" class="headerlink" title="写布局"></a>写布局</h4><p>写布局<code>recycler_view.xml</code>和<code>girl_staggered_item.xml</code>，<code>recycler_view.xml</code>和listview写法相同。</p><p><code>girl_staggered_item.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/girl_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;72dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/girl_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;chiaki&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="写适配器-1"><a href="#写适配器-1" class="headerlink" title="写适配器"></a>写适配器</h4><p>自定义适配器继承<code>RecyclerView.Adapter&lt;GirlsAdapter.ViewHolder&gt;</code>，重写<code>onCreateViewHolder(),onBindViewHolder()</code>，<code>getItemCount()</code>三个方法，自定义ViewHolder需要继承Recyclerview.ViewHolder类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlsAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;GirlsAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Girl&gt; girlList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GirlsAdapter</span><span class="params">(List&lt;Girl&gt; girlList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.girlList = girlList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.girl_staggered_item, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line"></span><br><span class="line">        viewHolder.girlView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> viewHolder.getAdapterPosition();</span><br><span class="line">                <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you cliced view &quot;</span>+girl.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 监听item子项包含的组件事件</span></span><br><span class="line">        viewHolder.girlImage.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> viewHolder.getAdapterPosition();</span><br><span class="line">                <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you clicked image &quot;</span>+girl.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> girlList.get(position);</span><br><span class="line">        holder.girlImage.setImageResource(girl.getImageId());</span><br><span class="line">        holder.girlName.setText(girl.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> girlList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        View girlView;</span><br><span class="line">        ImageView girlImage;</span><br><span class="line">        TextView girlName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            girlView = itemView;</span><br><span class="line">            girlImage = (ImageView) itemView.findViewById(R.id.girl_image);</span><br><span class="line">            girlName = (TextView) itemView.findViewById(R.id.girl_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载布局-1"><a href="#加载布局-1" class="headerlink" title="加载布局"></a>加载布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaggeredGridActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Girl&gt; girlsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.recycler_view);</span><br><span class="line"></span><br><span class="line">        initGirls();</span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> (RecyclerView) findViewById(R.id.recycler_view);</span><br><span class="line">        <span class="type">StaggeredGridLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaggeredGridLayoutManager</span>(<span class="number">4</span>, StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line"></span><br><span class="line">        <span class="type">GirlsAdapter</span> <span class="variable">girlsadapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlsAdapter</span>(girlsList);</span><br><span class="line">        recyclerView.setAdapter(girlsadapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initGirls</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;chiaki&quot;</span>), R.drawable.icon1);</span><br><span class="line">            girlsList.add(gir11);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;setsuna&quot;</span>), R.drawable.icon2);</span><br><span class="line">            girlsList.add(gir12);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;touma&quot;</span>), R.drawable.icon3);</span><br><span class="line">            girlsList.add(gir13);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir14</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;koharu&quot;</span>), R.drawable.icon4);</span><br><span class="line">            girlsList.add(gir14);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;mari&quot;</span>), R.drawable.icon5);</span><br><span class="line">            girlsList.add(gir15);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir16</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;nayuki&quot;</span>), R.drawable.icon6);</span><br><span class="line">            girlsList.add(gir16);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir17</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;aiko&quot;</span>), R.drawable.icon7);</span><br><span class="line">            girlsList.add(gir17);</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">gir18</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(getRandomLengthName(<span class="string">&quot;nagisa&quot;</span>), R.drawable.icon8);</span><br><span class="line">            girlsList.add(gir18);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRandomLengthName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenght</span> <span class="operator">=</span> random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lenght; i++) &#123;</span><br><span class="line">            builder.append(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.yaohepeng.com/2015/08/08/RecyclerView%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/">RecyclerView使用心得之基础篇</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>善用强大的Chrome浏览器</title>
      <link href="/2017/06/20/how-to-use-powerful-chrome/"/>
      <url>/2017/06/20/how-to-use-powerful-chrome/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="搜索篇"><a href="#搜索篇" class="headerlink" title="搜索篇"></a>搜索篇</h1><p>开篇之前，需要知道自然描述语言机器不一定能够正确分析，一般推荐提取关键字进行搜索，如“我想要在windows10下写php程序”的自然描述语言可改为“windows10 phpstorm环境搭建”。</p><p>排错问题如软件报错、代码调试错误、异常等直接输入错误信息能够更快速找到答案，程序员调试报错常去stackoverflow吧。</p><p>除此之外，还要善用英文搜索，收集了一些软件相关英文词汇。</p><p>附：<a href="https://github.com/solano-yume/HostGallery/blob/master/file/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%8B%B1%E6%96%87%E6%95%B4%E7%90%86.txt">软件相关英文整理</a></p><h3 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h3><p><strong>完全匹配</strong> <code>&quot;&quot;</code><br><code>&quot;install mysql 5.7&quot;</code>：文章中必须能够完整匹配“install mysql 5.7”，只是“install mysql”还不行</p><p><strong>通配符</strong> <code>*</code><br><code>&quot;mysql connect error *&quot;</code>：返回所有关于MySQL连接错误的文章</p><p><strong>数字范围</strong> <code>..</code><br><code>windows php环境搭建 2016.. 2017年</code>：搜索结果为2016到2017年的内容，不过本人常用下面定制搜索的<code>工具</code>下进行时间设置</p><p><strong>求差集</strong> <code>-</code></p><ul><li><code>澄空字幕 -学园</code>：搜索结果中包含“澄空字幕”而不包含“学园”。</li><li><code>白色相簿2 -维基 -維基</code>：搜索结果中有“白色相簿2”而不包含包含“维基”，“維基”，不要慌，我只是做个测试而已，维基百科挺有用的。</li></ul><p><strong>站内搜索</strong> <code>site</code></p><ul><li><code>排序算法 site:tsukasalwq.cn</code>：在站点tsukasalwq.cn下搜索“排序算法”相关内容。</li><li><code>动漫 site:zhihu.com</code>：在zhihu.com中搜索包含“动漫”的文章。</li><li><code>&quot;mysql connect error&quot; site:stackoverflow.com</code>：stackoverflow是程序员查bug最好的网站，coder必须知道的。</li></ul><p><strong>搜索特定类型文件</strong> <code>filetype</code></p><ul><li><code>简历 filetype:pdf</code>：查找返回包含“简历”的pdf文件，搜索结果开头为<code>[PDF]</code>标签标注</li></ul><h3 id="定制搜索"><a href="#定制搜索" class="headerlink" title="定制搜索"></a>定制搜索</h3><p><code>工具</code>：如图，可以设置语言，时间段，匹配情况：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242226599.png" alt=""></p><p><code>设置</code>：如图，选择高级搜索可以使用上面六个技巧的功能：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242227696.png" alt=""></p><h3 id="特殊搜索"><a href="#特殊搜索" class="headerlink" title="特殊搜索"></a>特殊搜索</h3><ul><li><strong>图片搜索</strong>：有时意外的方便。</li><li><strong>语音搜索</strong>：懒得打字或不方便打字可以试试。</li></ul><h1 id="快捷键篇"><a href="#快捷键篇" class="headerlink" title="快捷键篇"></a>快捷键篇</h1><p>本人喜欢键盘流的干净利落感，不过键盘与鼠标结合才能发挥最大作用，在IDE环境中多记快捷键能够极大提升效率，网上冲浪娱乐配合扩展爽得不要不要的，除了插件必须记下：</p><h3 id="键盘向"><a href="#键盘向" class="headerlink" title="键盘向"></a>键盘向</h3><ul><li><code>Ctrl+T</code>：打开新标签页</li><li><code>Ctrl+Shift+T</code>：打开刚才关闭的标签</li><li><code>Ctrl+N</code>：打开新窗口</li><li><code>Ctrl+Shift+N</code>：隐身模式打开新窗口</li><li><code>Ctrl+W</code>：关闭标签页，很多地方多有用</li><li><code>Ctrl+Shift+W</code>：关闭所有标签页并关闭浏览器</li><li><code>Alt+左右方向键</code>：页面的后退与前进</li><li><p><code>F5</code>：刷新网页</p></li><li><p><code>Alt+D</code>：定位到地址输入栏，windows资源管理器也可以用哦</p></li><li><code>Alt+Enter</code>：一般先<code>Alt+D</code>定位到输入栏，接着输入搜索内容或网址，然后<code>Alt+Enter</code>在另一个网页打开搜索结果，<code>Enter</code>即当前标签下打开搜索结果，我喜欢这个操作</li><li><code>Ctrl+F</code>：页内搜索技能，想找到东西的时候按一下吧，快速定位</li><li><p><code>Tab</code>：输入网址入<code>baidu.com</code>，按一下<code>Tab</code>键，<code>Enter</code>即可以使用当前网站</p></li><li><p><code>Ctrl+Tab</code>和<code>Ctrl+Shift+Tab</code>：类似windows下的<code>Alt+Tab</code>和<code>Alt+Shift+Tab</code>，在标签页中向前或向后切换</p></li><li><p><code>Ctrl+数字</code>：直接定位到从左开始第几个标签，<code>Ctrl+9</code>是最后一个标签页</p></li><li><p><code>Ctrl+D</code>：收藏该网页</p></li><li><code>Shift+Ctrl+O</code>：打开书签管理器</li><li><p><code>Ctrl+Shift+B</code>：快速隐藏与显示书签栏</p></li><li><p><code>F12</code>或<code>Ctrl+Shift+J</code>：开发者工具，不必多说，网页调试，找资源必用</p></li><li><code>Ctrl+J</code>：下载界面</li><li><code>Shift+Esc</code>：打开Chrome的任务管理器</li><li><code>Ctrl+H</code>：打开历史记录</li><li><p><code>Ctrl+Shift+Delete</code>：浏览器会对浏览的网页的图片、Cookie等数据进行缓存，故可以在清除浏览数据窗口清除相应内容</p></li><li><p><code>chrome://about/</code>：一般人是不用的，不过里面提供了各种各样操作都很强大。</p></li></ul><h3 id="鼠标流"><a href="#鼠标流" class="headerlink" title="鼠标流"></a>鼠标流</h3><p>喜欢用鼠标操作的话可以考虑手势操作插件，貌似Windows平台下有一款WGesture的手势操作插件：</p><ul><li><code>Ctrl+左键</code>：在新标签页打开链接，和点击<code>鼠标滑轮</code>效果相同</li><li><code>Shift+左键</code>：新窗口打开链接</li><li><code>Ctrl+Shift+左键</code>：在新标签页打开链接并转到该标签页</li></ul><p>附：<a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans&amp;ref_topic=14678">chrome键盘快捷键</a></p><p>后序：插件与脚本后面会补充。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://guoze.me/2016/06/26/how-to-google/">程序员的基础生存技能–关于搜索引擎的小贴士</a><br><a href="https://www.zhihu.com/question/28013848">如何高效地使用搜索引擎？</a><br><a href="https://tieba.baidu.com/p/4542943297?pid=89526828707&amp;cid=0#89526828707">推荐各式各样的小软件</a></p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chorme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记六之二叉树下篇</title>
      <link href="/2017/06/14/pta-algorithm-practice-06-binary-tree/"/>
      <url>/2017/06/14/pta-algorithm-practice-06-binary-tree/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="1-堆中的路径"><a href="#1-堆中的路径" class="headerlink" title="1.堆中的路径"></a>1.堆中的路径</h1><p>Problem<br>将一系列给定数字插入一个初始为空的小顶堆H[]。随后对任意给定的下标i，打印从H[i]到根结点的路径。<a href="https://pta.patest.cn/pta/test/15/exam/4/question/713">详细描述</a></p><p>Analysis</p><ol><li>首先建堆有两种方式：(1)元素先用数组按顺序存放好使之满足完全二叉树结构，要构造一个堆，那么我们只需要左右子树为堆，然后调整当前堆为堆即可。(2)首先堆为空，然后按照完全二叉树的结构每次插入一个节点，然后调整当前树为一个堆，即找出插入节点应该在的位置进行插入，与插入排序类似。因为建堆的时间复杂度为O(logN)，有N个元素，时间复杂度为O(NlogN)。根据题目描述只能选择第二种建堆方式。</li><li>建堆过程中可以使用哨兵，如果是最小堆，则H[0]定义为一个足够小的值使得堆元素都大于它。同理可推最大堆应选用一个足够大的值。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINDATA -10001</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHeap</span><span class="params">(<span class="type">int</span> numbers[], <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, numbers[index]);</span><br><span class="line">        index /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, numbers[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertHeap</span><span class="params">(<span class="type">int</span> numbers[], <span class="type">int</span> data, <span class="type">int</span> index)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = index;</span><br><span class="line">    <span class="keyword">for</span>(; numbers[i/<span class="number">2</span>] &gt; data; i /= <span class="number">2</span>) &#123; <span class="comment">// 只要插入元素比父节点i/2小，证明插入元素不再位置i上</span></span><br><span class="line">        numbers[i] = numbers[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[i] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    <span class="type">int</span> index, data;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;MinHeap.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="type">int</span> numbers[N+<span class="number">1</span>];</span><br><span class="line">    numbers[<span class="number">0</span>] = MINDATA; <span class="comment">// 哨兵 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        insertHeap(numbers, data, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;index);</span><br><span class="line">        printHeap(numbers, index);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="2-File-Transfer"><a href="#2-File-Transfer" class="headerlink" title="2.File Transfer"></a>2.File Transfer</h1><p>Problem<br>We have a network of computers and a list of bi-directional connections. Each of these connections allows a file transfer from one computer to another. Is it possible to send a file from any computer on the network to any other?<a href="https://pta.patest.cn/pta/test/15/exam/4/question/713">详细描述</a></p><p>Analysis</p><ol><li>考察集合的并查集，即查找集合中的元素，求集合并集。</li><li>思路是数组下标i表示各台电脑，s[i]表示电脑的根，如果电脑属于同一个集合那么两台电脑相互连通，根为负数证明该节点是根节点，这里可以利用根节点的根s[root]表示树高的负数或者表示树规模的负数，都称为按秩归并，进行路径压缩可以加快查找效率。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242214462.png" alt=""></p><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> s[], <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">        s[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> s[], <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> s[x] = find(s, s[x]); <span class="comment">// 不仅将所属树根返回，而且进行了路径压缩 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> s[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> root1 = find(s, x1);</span><br><span class="line">    <span class="type">int</span> root2 = find(s, x2);</span><br><span class="line">    <span class="keyword">if</span>(root1 != root2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[root2] &lt; s[root1]) &#123; <span class="comment">// 如果root2的树高大于root1的树高，矮的root1贴在高的root2上面,即根节点为root2 </span></span><br><span class="line">            s[root2] += s[root1];</span><br><span class="line">            s[root1] = root2;</span><br><span class="line">            count--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[root1] += s[root2];</span><br><span class="line">            s[root2] = root1;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;FileTransfer.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    count = n;</span><br><span class="line">    <span class="type">int</span> s[n+<span class="number">1</span>];</span><br><span class="line">    init(s, n+<span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">while</span>(ch != <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            Union(x, y, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(find(s, x) == find(s, y)) <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;The network is connected.\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;There are %d components.\n&quot;</span>, count);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记五之二叉树中篇</title>
      <link href="/2017/06/05/pta-algorithm-practice-05-binary-tree/"/>
      <url>/2017/06/05/pta-algorithm-practice-05-binary-tree/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="1-是否同一棵二叉搜索树"><a href="#1-是否同一棵二叉搜索树" class="headerlink" title="1.是否同一棵二叉搜索树"></a>1.是否同一棵二叉搜索树</h1><p>Problem<br>给定一个插入序列就可以唯一确定一棵二叉搜索树。然而，一棵给定的二叉搜索树却可以由多种不同的插入序列得到。例如分别按照序列{2, 1, 3}和{2, 3, 1}插入初始为空的二叉搜索树，都得到一样的结果。于是对于输入的各种插入序列，你需要判断它们是否能生成一样的二叉搜索树。<a href="https://pta.patest.cn/pta/test/15/exam/4/question/712">详细描述</a></p><p>Analysis</p><ol><li>确定树的链表表示，根据第一输入序列建立一棵二叉搜索树，然后判断余下的序列与建立的树是否一致。</li><li>如何判断输入序列是否一致？可以在树BST中按顺序搜索输入序列的元素，如果搜索所经过的节点在前面都出现过，则一致。对于每个树节点可设置一个tag表示该节点是否被访问过。</li><li>本题需要注意的是，如果发现序列与二叉搜索树不一致时，不需要进行check判断，但还是要遍历完该行序列，不然会影响后面数据输入正确性。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">BinTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    BinTree left;</span><br><span class="line">    BinTree right;  </span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空树，释放空间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTree</span><span class="params">(BinTree BST)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;left) freeTree(BST-&gt;left);</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;right) freeTree(BST-&gt;right);</span><br><span class="line">    <span class="built_in">free</span>(BST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化tag为未被访问状态 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">resetTag</span><span class="params">(BinTree BST)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;left) resetTag(BST-&gt;left);</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;right) resetTag(BST-&gt;right);</span><br><span class="line">    BST-&gt;tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BinTree <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    BinTree node = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;left = node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉搜索树中插入节点 </span></span><br><span class="line">BinTree <span class="title function_">insert</span><span class="params">(BinTree BST, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!BST) BST = newNode(data);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &gt; BST-&gt;data) &#123;</span><br><span class="line">            BST-&gt;right = insert(BST-&gt;right, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; BST-&gt;data) &#123;</span><br><span class="line">            BST-&gt;left = insert(BST-&gt;left, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立二叉搜索树 </span></span><br><span class="line">BinTree <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span> N)</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    BinTree BST = newNode(data);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        BST = insert(BST, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前结点是否一致</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(BinTree BST, ElementType data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;tag) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &lt; BST-&gt;data) <span class="keyword">return</span> check(BST-&gt;left, data);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(data &gt; BST-&gt;data) <span class="keyword">return</span> check(BST-&gt;right, data);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(data == BST-&gt;data) &#123;</span><br><span class="line">            BST-&gt;tag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断序列是否同为一棵二叉搜索树 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">judge</span><span class="params">(BinTree BST, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    <span class="type">int</span> data, flag = <span class="number">1</span>; <span class="comment">// flag=1表示目前一致 </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    <span class="keyword">if</span>(data != BST-&gt;data) flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> BST-&gt;tag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span> &amp;&amp; !check(BST, data)) flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> N,L;</span><br><span class="line">    BinTree BST;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;BSTree.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">while</span>(N) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;L);</span><br><span class="line">        BST = buildTree(N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(judge(BST, N)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            resetTag(BST);</span><br><span class="line">        &#125;</span><br><span class="line">        freeTree(BST);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="2-Root-of-AVL-Tree"><a href="#2-Root-of-AVL-Tree" class="headerlink" title="2.Root of AVL Tree"></a>2.Root of AVL Tree</h1><p>Problem<br>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.<a href="https://pta.patest.cn/pta/test/16/exam/4/question/668">详细描述</a></p><p>Property</p><ol><li>旋转:被破坏节点与破坏结点的路径决定是什么类型的旋转(LL,RR,LR,RL),然后关注从被破坏结点开始(包括被破坏节点)的三个结点如何调整，旋转的根节点一定是这三者中中间大的那个。</li><li>设N(h)高度为h的平衡二叉树的最少结点数，则有 N(h) = N(h-1) + N(h-2) + 1</li></ol><p>Analysis<br>实质是构建一棵平衡二叉树得过程，如果平衡被破坏则通过旋转重新使得树平衡。</p><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span>* <span class="title">AVLTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span> &#123;</span></span><br><span class="line">    ElementType value;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    AVLTree left;</span><br><span class="line">    AVLTree right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(AVLTree T)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">LLRotate</span><span class="params">(AVLTree root)</span>;</span><br><span class="line">AVLTree <span class="title function_">RRRotate</span><span class="params">(AVLTree root)</span>;</span><br><span class="line">AVLTree <span class="title function_">LRRotate</span><span class="params">(AVLTree root)</span>;</span><br><span class="line">AVLTree <span class="title function_">RLRotate</span><span class="params">(AVLTree root)</span>;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">insert</span><span class="params">(AVLTree T, ElementType val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(AVLTree T)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">LLRotate</span><span class="params">(AVLTree root)</span> &#123;</span><br><span class="line">    AVLTree newRoot = root-&gt;left;  </span><br><span class="line">    root-&gt;left = newRoot-&gt;right;</span><br><span class="line">    newRoot-&gt;right = root;</span><br><span class="line">    </span><br><span class="line">    root-&gt;height = max(getHeight(root-&gt;left), getHeight(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    newRoot-&gt;height = max(getHeight(newRoot-&gt;left), getHeight(newRoot-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">RRRotate</span><span class="params">(AVLTree root)</span> &#123;</span><br><span class="line">    AVLTree newRoot = root-&gt;right; </span><br><span class="line">    root-&gt;right = newRoot-&gt;left;</span><br><span class="line">    newRoot-&gt;left = root;</span><br><span class="line">    </span><br><span class="line">    root-&gt;height = max(getHeight(root-&gt;left), getHeight(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    newRoot-&gt;height = max(getHeight(newRoot-&gt;left), getHeight(newRoot-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">LRRotate</span><span class="params">(AVLTree root)</span> &#123;</span><br><span class="line">     root-&gt;left = RRRotate(root-&gt;left);</span><br><span class="line">     <span class="keyword">return</span> LLRotate(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVLTree <span class="title function_">RLRotate</span><span class="params">(AVLTree root)</span> &#123;</span><br><span class="line">    root-&gt;right = LLRotate(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> RRRotate(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert node and rebalanced</span></span><br><span class="line">AVLTree <span class="title function_">insert</span><span class="params">(AVLTree T, ElementType val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        T = (AVLTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> AVLNode));</span><br><span class="line">        T-&gt;value = val;</span><br><span class="line">        T-&gt;height = <span class="number">0</span>;</span><br><span class="line">        T-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        T-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; T-&gt;value) &#123;</span><br><span class="line">            T-&gt;left = insert(T-&gt;left, val);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// check this tree is balanced or not</span></span><br><span class="line">            <span class="keyword">if</span>(getHeight(T-&gt;left) - getHeight(T-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val &lt; T-&gt;left-&gt;value) &#123;</span><br><span class="line">                    T = LLRotate(T);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    T = LRRotate(T);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; T-&gt;value) &#123;</span><br><span class="line">            T-&gt;right = insert(T-&gt;right, val);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(getHeight(T-&gt;left) - getHeight(T-&gt;right) == <span class="number">-2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val &gt; T-&gt;right-&gt;value) &#123;</span><br><span class="line">                    T = RRRotate(T);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    T = RLRotate(T);</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    T-&gt;height = max(getHeight(T-&gt;left), getHeight(T-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num,val; </span><br><span class="line">    AVLTree T=<span class="literal">NULL</span>; <span class="comment">// must be NULL else error</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;BBTree.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// read node num</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// loop build the balanced binary tree and get root</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val);</span><br><span class="line">        T = insert(T, val);</span><br><span class="line">        <span class="comment">//printf(&quot;%d &quot;, val); </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;value);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>参考资料：<br><a href="http://blog.csdn.net/bobo1356/article/details/71377390">1.AVL树的构建</a><br><a href="http://lib.csdn.net/article/datastructure/56300">2.AVL平衡二叉树</a></p><h1 id="3-Complete-Binary-Search-Tree"><a href="#3-Complete-Binary-Search-Tree" class="headerlink" title="3.Complete Binary Search Tree"></a>3.Complete Binary Search Tree</h1><p>Problem<br>给出构成一棵树的序列，已知该树为完全二叉搜索树的序列，求层次遍历顺序。<a href="https://pta.patest.cn/pta/test/16/exam/4/question/669">详细描述</a></p><p>Analysis</p><ol><li>对于二叉搜索树，中序遍历为从小到大的序列，那么问题可以转化为已知中序求层次遍历顺序。</li><li>建树过程根据中序遍历建树，则为建立左子树，构造根，建立右子树。与中序遍历LVR有异曲同工之妙。</li><li>层次遍历输出对于数组存储的二叉查找树来说，即遍历顺序。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> in[MaxSize], tree[MaxSize]; </span><br><span class="line"><span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span> root)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root &gt; N) <span class="keyword">return</span> ; </span><br><span class="line">    <span class="type">int</span> leftIndex = root*<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> rightIndex = leftIndex+<span class="number">1</span>;</span><br><span class="line">    buildTree(leftIndex);</span><br><span class="line">    tree[root] = in[index++];</span><br><span class="line">    buildTree(rightIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于数组存储的二叉树，顺序输出即 层次遍历结果 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tree[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tree[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;CBSTree.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序得到中序遍历结果 </span></span><br><span class="line">    sort(in+<span class="number">1</span>, in+N+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 根据中序遍历构建完全二插搜索树</span></span><br><span class="line">    buildTree(<span class="number">1</span>); </span><br><span class="line">    levelOrderTraversal();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-二叉搜索树的操作集"><a href="#4-二叉搜索树的操作集" class="headerlink" title="4.二叉搜索树的操作集"></a>4.二叉搜索树的操作集</h1><p>Problem<br>本题要求实现给定二叉搜索树的5种常用操作。<a href="https://pta.patest.cn/pta/test/15/exam/3/question/927">详细描述</a></p><p>Analysis<br>考察二叉搜索树的基本操作，递归版本和非递归版本都要掌握，其中删除结点需要重点掌握。</p><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>* <span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">( BinTree BT )</span>; <span class="comment">/* 先序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">( BinTree BT )</span>;  <span class="comment">/* 中序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span>;</span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    BinTree BST, MinP, MaxP, Tmp;</span><br><span class="line">    ElementType X;</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span></span></span><br><span class="line">    freopen(<span class="string">&quot;BSTreeOpre.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    BST = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Insert(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Preorder:&quot;</span>); PreorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    MinP = FindMin(BST);</span><br><span class="line">    MaxP = FindMax(BST);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        Tmp = Find(BST, X);</span><br><span class="line">        <span class="keyword">if</span> (Tmp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d is not found\n&quot;</span>, X);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is found\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MinP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the smallest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MaxP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the largest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Delete(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inorder:&quot;</span>); InorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">(BinTree BT)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, BT-&gt;Data);</span><br><span class="line">        PreorderTraversal(BT-&gt;Left);</span><br><span class="line">        PreorderTraversal(BT-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">(BinTree BT)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BT) &#123;</span><br><span class="line">        InorderTraversal(BT-&gt;Left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, BT-&gt;Data);</span><br><span class="line">        InorderTraversal(BT-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        BST = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> TNode));</span><br><span class="line">        BST-&gt;Data = X;</span><br><span class="line">        BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(X &lt; BST-&gt;Data) &#123;</span><br><span class="line">            BST-&gt;Left = Insert(BST-&gt;Left, X);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data) &#123;</span><br><span class="line">            BST-&gt;Right = Insert(BST-&gt;Right, X);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span> &#123;</span><br><span class="line">    Position tmp;</span><br><span class="line">    <span class="keyword">if</span>(BST == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data) &#123;</span><br><span class="line">        BST-&gt;Left = Delete(BST-&gt;Left, X); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data) &#123;</span><br><span class="line">        BST-&gt;Right = Delete(BST-&gt;Right, X);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;</span><br><span class="line">            tmp = FindMin(BST-&gt;Right);</span><br><span class="line">            BST-&gt;Data = tmp-&gt;Data;</span><br><span class="line">            BST-&gt;Right = Delete(BST-&gt;Right, BST-&gt;Data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = BST;</span><br><span class="line">            <span class="keyword">if</span>(!BST-&gt;Left) &#123;</span><br><span class="line">                BST = BST-&gt;Right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!BST-&gt;Right) &#123;</span><br><span class="line">                BST = BST-&gt;Left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Position T = BST;</span><br><span class="line">    <span class="keyword">if</span>(X &lt; T-&gt;Data) T = Find(T-&gt;Left, X);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;Data) T = Find(T-&gt;Right, X);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> T;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Position T = BST;</span><br><span class="line">    <span class="keyword">while</span>(T-&gt;Left) &#123;</span><br><span class="line">        T = T-&gt;Left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(BST == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Position T = BST;</span><br><span class="line">    <span class="keyword">while</span>(T-&gt;Right) &#123;</span><br><span class="line">        T = T-&gt;Right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记四之二叉树上篇</title>
      <link href="/2017/06/04/pta-algorithm-practice-04-binary-tree/"/>
      <url>/2017/06/04/pta-algorithm-practice-04-binary-tree/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="1-树的同构"><a href="#1-树的同构" class="headerlink" title="1.树的同构"></a>1.树的同构</h1><p>Problem<br>判断给定两棵树T1和T2是否同构。<a href="https://pta.patest.cn/pta/test/15/exam/4/question/711">详细描述</a></p><p>Analysys</p><ol><li>构建树的结构体数组表示，下标指向左右儿子的所在位置。</li><li>确定树根，用一个check数组保存当前节点有没有被指向，没有被指向的节点为根节点。</li><li>判断一棵树是否同构，三种情况：两棵树是否有空树，返回两者是否都为空的并集；两棵树当前节点元素值不同，不同构返回false；否则，树T1，T2的左子树 &amp;&amp; T1，T2的右子树是否同时同构或者T1左子树 || T2右子树 &amp;&amp; T1左子树，T2右子树是否同时同构。根据上述条件递归调用进行判断。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxTree 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElementType char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Tree int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Null -1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    Tree left;</span><br><span class="line">    Tree right; </span><br><span class="line">&#125;T1[MaxTree], T2[MaxTree];</span><br><span class="line"></span><br><span class="line">Tree <span class="title function_">buildTree</span><span class="params">(TreeNode T[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    ElementType cl, cr, root;</span><br><span class="line">    <span class="type">int</span> check[MaxTree];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">if</span>(N) &#123;</span><br><span class="line">        <span class="comment">// 初始化每个节点，设没有被指向时值为0 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) check[i] = <span class="number">0</span>; </span><br><span class="line">        <span class="comment">// 建树 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c %c %c\n&quot;</span>, &amp;T[i].data, &amp;cl, &amp;cr);</span><br><span class="line">            <span class="comment">// 对左子树处理 </span></span><br><span class="line">            <span class="keyword">if</span>(cl != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                T[i].left = cl - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                check[T[i].left] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                T[i].left = Null;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对右子树处理</span></span><br><span class="line">            <span class="keyword">if</span>(cr != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                T[i].right = cr - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                check[T[i].right] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                T[i].right = Null;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//printf(&quot;%c %c %c\n&quot;, T[i].data, cl, cr);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历找出没有任何节点指向的节点，则其为根节点 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d &quot;, check[i]);</span></span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                root = i;</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root = Null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, root);</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否同构</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Isomorphism</span><span class="params">(Tree R1, Tree R2)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(R1 == Null || R2 == Null) &#123;</span><br><span class="line">        <span class="keyword">return</span> (R1 == Null) &amp;&amp; (R2 == Null);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T1[R1].data != T2[R2].data)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Isomorphism(T1[R1].left, T2[R2].left) &amp;&amp; Isomorphism(T1[R1].right, T2[R2].right)</span><br><span class="line">                || Isomorphism(T1[R1].left, T2[R2].right) &amp;&amp; Isomorphism(T1[R1].right, T2[R2].left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Tree R1, R2; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;Isomorphism.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立树1</span></span><br><span class="line">    R1 = buildTree(T1);</span><br><span class="line">    <span class="comment">// 建立树2</span></span><br><span class="line">    R2 = buildTree(T2);</span><br><span class="line">    <span class="comment">// 判断是否同构</span></span><br><span class="line">    <span class="keyword">if</span>(Isomorphism(R1, R2)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="2-List-Leaves"><a href="#2-List-Leaves" class="headerlink" title="2.List Leaves"></a>2.List Leaves</h1><p>Problem<br>Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.<a href="https://pta.patest.cn/pta/test/16/exam/4/question/666">详细描述</a></p><p>Analysys</p><ol><li>叶子结点打印按照层次遍历打印，判断左右子树为空时输出叶子节点。</li><li>树的问题可考虑数组还是链表两种存储方式，然后基于遍历和堆栈以及队列以及条件对树进行相关操作。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElementType; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> left;</span><br><span class="line">    <span class="type">int</span> right;  </span><br><span class="line">&#125;Tr[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建树，返回根节点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">builTree</span><span class="params">(TreeNode T[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> N; </span><br><span class="line">    <span class="type">char</span> cl, cr;</span><br><span class="line">    <span class="type">int</span> root;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;N);</span><br><span class="line">    <span class="type">int</span> check[N];</span><br><span class="line">    <span class="keyword">if</span>(N) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            check[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c %c\n&quot;</span>, &amp;cl, &amp;cr);</span><br><span class="line">            <span class="comment">//printf(&quot;%c %c\n&quot;, cl, cr);</span></span><br><span class="line">            <span class="keyword">if</span>(cl != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                T[i].left = cl - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                check[T[i].left] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                T[i].left = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(cr != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                T[i].right = cr - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                check[T[i].right] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                T[i].right = <span class="number">-1</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                root = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 层次遍历输出叶子节点 </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(<span class="type">int</span> root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="number">-1</span>) <span class="keyword">return</span> ; </span><br><span class="line">    <span class="type">int</span> current;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">    Q.push(root);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">        current = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(Tr[current].left == <span class="number">-1</span> &amp;&amp; Tr[current].right == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, current);  </span><br><span class="line">                flag = <span class="literal">false</span>;   </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, current); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(Tr[current].left != <span class="number">-1</span>) Q.push(Tr[current].left);</span><br><span class="line">        <span class="keyword">if</span>(Tr[current].right != <span class="number">-1</span>) Q.push(Tr[current].right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;ListLeaves.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> root = builTree(Tr);</span><br><span class="line">    levelOrderTraversal(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Tree-Traversals-Again"><a href="#3-Tree-Traversals-Again" class="headerlink" title="3.Tree Traversals Again"></a>3.Tree Traversals Again</h1><p>Problem<br>给出中序遍历的递归实现，求出后序遍历结果。<a href="https://pta.patest.cn/pta/test/16/exam/4/question/667">详细描述</a></p><p>Analysys</p><ol><li>观察给出示例，递归版中序遍历的入栈操作即前序遍历结果，出栈顺序即中序遍历结果，可以将问题转化为已知先序、中序，构造树求后序。</li><li>先序、中序已知，如何构建树呢？首先由前序确定树根为pre[startPre]在中序序列的位置i，然后递归构造做右子树。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242201038.png" alt=""></p><p>Code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        val = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAXSIZE</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] pre = <span class="keyword">new</span> <span class="title class_">int</span>[MAXSIZE];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] in = <span class="keyword">new</span> <span class="title class_">int</span>[MAXSIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">reConstructBinaryTree</span><span class="params">(<span class="type">int</span>[] pre, <span class="type">int</span>[] in, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> reBuildBinTree(pre, <span class="number">1</span>, length, in, <span class="number">1</span>, length);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">reBuildBinTree</span><span class="params">(<span class="type">int</span>[] pre, <span class="type">int</span> startPre, <span class="type">int</span> endPre, <span class="type">int</span>[] in, <span class="type">int</span> startIn, <span class="type">int</span> endIn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startPre &gt; endPre || startIn &gt; endIn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(pre[startPre]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIn; i &lt;= endIn; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in[i] == pre[startPre]) &#123;</span><br><span class="line">                root.left = reBuildBinTree(pre, startPre + <span class="number">1</span>, startPre + i - startIn, in, startIn, i - <span class="number">1</span>);</span><br><span class="line">                root.right = reBuildBinTree(pre, startPre + <span class="number">1</span> + i - startIn, endPre, in, i + <span class="number">1</span>, endIn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            postOrderTraversal(root.left);</span><br><span class="line">            postOrderTraversal(root.right);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d&quot;</span>, root.val);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot; %d&quot;</span>, root.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;pta.txt&quot;</span>));</span><br><span class="line">        System.setIn(is);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        sc.nextLine();</span><br><span class="line">        <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N * <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">&quot;Push&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">node</span> <span class="operator">=</span> Integer.parseInt(line.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                stack.push(node);</span><br><span class="line">                pre[preIndex++] = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">                    in[inIndex++] = stack.pop();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> reConstructBinaryTree(pre, in, N);</span><br><span class="line">        postOrderTraversal(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extension<br>如果已知后序、中序，求前序呢？思路和上题一样。</p><p>Code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        val = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">reBuildBinTreePostIn</span><span class="params">(<span class="type">int</span>[] post, <span class="type">int</span> startPost, <span class="type">int</span> endPost, </span></span><br><span class="line"><span class="params">        <span class="type">int</span>[] in, <span class="type">int</span> startIn, <span class="type">int</span> endIn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startPost &gt; endPost || startIn &gt; endIn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(post[endPost]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIn; i &lt;= endIn; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in[i] == post[endPost]) &#123;</span><br><span class="line">                root.left = reBuildBinTreePostIn(post, startPost, startPost + i - startIn-<span class="number">1</span>, in, startIn, i - <span class="number">1</span>);</span><br><span class="line">                root.right = reBuildBinTreePostIn(post, endPost - (endIn - i), endPost - <span class="number">1</span>, in, i + <span class="number">1</span>, endIn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d&quot;</span>, root.val);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot; %d&quot;</span>, root.val);</span><br><span class="line">            &#125;</span><br><span class="line">            preOrderTraversal(root.left);</span><br><span class="line">            preOrderTraversal(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 读入前序遍历序列</span></span><br><span class="line">        <span class="type">int</span>[] pre = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">// 读入中序遍历序列</span></span><br><span class="line">        <span class="type">int</span>[] in = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">// 读入后序遍历序列</span></span><br><span class="line">        <span class="type">int</span>[] post = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> reBuildBinTreePostIn(post, <span class="number">0</span>, <span class="number">7</span>, in, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">        preOrderTraversal(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记三之线性结构篇</title>
      <link href="/2017/06/02/pta-algorithm-pratice-notes-03-linearlist/"/>
      <url>/2017/06/02/pta-algorithm-pratice-notes-03-linearlist/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="1-两个有序链表序列的合并"><a href="#1-两个有序链表序列的合并" class="headerlink" title="1.两个有序链表序列的合并"></a>1.两个有序链表序列的合并</h1><p>Problem<br>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2的并集新非降序链表S3。<a href="https://pta.patest.cn/pta/test/15/exam/4/question/2992">详细描述</a></p><p>Analysys</p><ol><li>分三步：构造两个链表；合并链表；遍历打印。</li><li>合并链表可以新建一条新链表，根据归并排序中得merge思想，每次选择小接到新链表得尾部，然后将另一条链表剩下部分(已经有序)直接接到新链表尾部。</li><li>空表特殊情况处理。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line">List <span class="title function_">Read</span><span class="params">()</span>; <span class="comment">/* 细节在此不表 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">( List L )</span>; <span class="comment">/* 细节在此不表；空链表将输出NULL */</span></span><br><span class="line"></span><br><span class="line">List <span class="title function_">Merge</span><span class="params">( List L1, List L2 )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L1, L2, L;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    L1 = Read();</span><br><span class="line">    L2 = Read();</span><br><span class="line">    L = Merge(L1, L2);</span><br><span class="line">    Print(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表 </span></span><br><span class="line">List <span class="title function_">Read</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    L-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    PtrToNode rear = L;</span><br><span class="line">    ElementType data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        <span class="keyword">if</span>(data != <span class="number">-1</span>) &#123;</span><br><span class="line">            PtrToNode p = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">            p-&gt;Data = data;</span><br><span class="line">            p-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">            rear-&gt;Next = p;</span><br><span class="line">            rear = p;       </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> L-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并链表</span></span><br><span class="line">List <span class="title function_">Merge</span><span class="params">( List L1, List L2 )</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(L1 == <span class="literal">NULL</span> &amp;&amp; L2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    List p1 = L1;</span><br><span class="line">    List p2 = L2;</span><br><span class="line">    </span><br><span class="line">    List LM = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    LM-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    List rear = LM;</span><br><span class="line">    <span class="keyword">while</span>(p1 &amp;&amp; p2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;Data &lt; p2-&gt;Data) &#123;</span><br><span class="line">            rear-&gt;Next = p1;</span><br><span class="line">            rear = p1;</span><br><span class="line">            p1 = p1-&gt;Next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rear-&gt;Next = p2;</span><br><span class="line">            rear = p2;</span><br><span class="line">            p2 = p2-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;Next = p1 ? p1 : p2;  </span><br><span class="line">    <span class="keyword">return</span> LM-&gt;Next;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">( List L )</span>&#123;</span><br><span class="line">    List p = L;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;Data);</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-一元多项式的乘法与加法运算"><a href="#2-一元多项式的乘法与加法运算" class="headerlink" title="2.一元多项式的乘法与加法运算"></a>2.一元多项式的乘法与加法运算</h1><p>Problem<br>设计函数分别求两个一元多项式的乘积与和。<a href="https://pta.patest.cn/pta/test/15/exam/4/question/710">详细描述</a></p><p>Analysys</p><ol><li>链表保存多项式的系数和系数，设计出程序框架,根据各部分分别实现函数。</li><li>加法：新建第三条链表，根据两个链表对应每一项指数大小关系，不等时添加大的一项，相等时判断系数和是否为0，不为0又该怎么移动。最后将链表剩余部分依次拷贝出来添加到第三条链表后面。</li><li>乘法：两种思路，一种是将乘法转化加法即将P1当前项(ci,ei)乘P2多项式，再加到结果多项式中。我选用另一种方法——逐项插入，即将当前P1当前项与P2当前项相乘，找到插入位置插入多项式。</li><li>乘法需要注意的细节：保证多项式指数递减顺序；指数相同与指数不同情况；指数相同系数和是否为0.</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span>* <span class="title">Polynomial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> ceof; <span class="comment">// 系数 </span></span><br><span class="line">    <span class="type">int</span> expon; <span class="comment">// 指数</span></span><br><span class="line">    Polynomial next; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="comment">// 函数声明部分;需要设计的函数 </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPoly</span><span class="params">(Polynomial P)</span> ;</span><br><span class="line">Polynomial <span class="title function_">readPoly</span><span class="params">()</span>;</span><br><span class="line">Polynomial <span class="title function_">mult</span><span class="params">(Polynomial P1, Polynomial P2)</span>;</span><br><span class="line">Polynomial <span class="title function_">add</span><span class="params">(Polynomial P1, Polynomial P2)</span>;</span><br><span class="line"><span class="comment">// 函数实现部分 </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPoly</span><span class="params">(Polynomial P)</span>&#123;</span><br><span class="line">    <span class="comment">// 链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 链表非空</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">while</span>(P)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag) flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, P-&gt;ceof, P-&gt;expon);</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">attach</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> e, Polynomial* pRear)</span>&#123;</span><br><span class="line">    Polynomial P;</span><br><span class="line">    </span><br><span class="line">    P = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">    P-&gt;ceof = c;</span><br><span class="line">    P-&gt;expon = e;</span><br><span class="line">    P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    (*pRear)-&gt;next = P;</span><br><span class="line">    (*pRear) = P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Polynomial <span class="title function_">readPoly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    Polynomial P,rear,t;</span><br><span class="line">    P = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">    P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    rear = P;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> c,e;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;c, &amp;e);</span><br><span class="line">        attach(c, e, &amp;rear);</span><br><span class="line">    &#125;</span><br><span class="line">    t = P; </span><br><span class="line">    P = P-&gt;next; </span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Polynomial <span class="title function_">add</span><span class="params">(Polynomial P1, Polynomial P2)</span> &#123;</span><br><span class="line">    Polynomial PS,p1,p2,rear,t;</span><br><span class="line">    </span><br><span class="line">    p1 = P1;p2 = P2;</span><br><span class="line">    PS = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">    PS-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    rear = PS;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p1 &amp;&amp; p2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;expon &gt; p2-&gt;expon) &#123;</span><br><span class="line">            attach(p1-&gt;ceof, p1-&gt;expon, &amp;rear);</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;expon == p2-&gt;expon) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p1-&gt;ceof + p2-&gt;ceof != <span class="number">0</span>) &#123;</span><br><span class="line">                attach(p1-&gt;ceof + p2-&gt;ceof, p1-&gt;expon, &amp;rear);</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            attach(p2-&gt;ceof, p2-&gt;expon, &amp;rear);</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p1) &#123;</span><br><span class="line">        attach(p1-&gt;ceof, p1-&gt;expon, &amp;rear); </span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(; p1; p1 = p1-&gt;next) attach(p1-&gt;ceof, p1-&gt;expon, &amp;rear);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p2) &#123;</span><br><span class="line">        attach(p2-&gt;ceof, p2-&gt;expon, &amp;rear); </span><br><span class="line">        p2 = p2-&gt;next;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    t = PS;</span><br><span class="line">    PS = PS-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> PS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Polynomial <span class="title function_">mult</span><span class="params">(Polynomial P1, Polynomial P2)</span> &#123;</span><br><span class="line">    Polynomial p1,p2,PP,rear, t;</span><br><span class="line">    <span class="type">int</span> c,e;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!P1 || !P2) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    PP = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">    PP-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    p1 = P1;</span><br><span class="line">    p2 = P2;</span><br><span class="line">    rear = PP;</span><br><span class="line">    <span class="comment">// p1乘p2</span></span><br><span class="line">    <span class="keyword">while</span>(p2) &#123;</span><br><span class="line">        attach(p1-&gt;ceof*p2-&gt;ceof,p1-&gt;expon+p2-&gt;expon,&amp;rear);</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    p1 = p1-&gt;next; <span class="comment">// 从第二项开始 </span></span><br><span class="line">    <span class="comment">// 逐项插入 </span></span><br><span class="line">    <span class="keyword">while</span>(p1) &#123;</span><br><span class="line">        <span class="comment">// p2每次初始化为多项式2得头，rear为新链表的头，插入删除操作都在PP链表(有一个空的节点)中进行 </span></span><br><span class="line">        p2 = P2;</span><br><span class="line">        rear = PP;</span><br><span class="line">        <span class="keyword">while</span>(p2) &#123;</span><br><span class="line">            c = p1-&gt;ceof*p2-&gt;ceof;</span><br><span class="line">            e = p1-&gt;expon+p2-&gt;expon;</span><br><span class="line">            <span class="keyword">while</span>(rear-&gt;next &amp;&amp; rear-&gt;next-&gt;expon &gt; e)&#123; <span class="comment">// 找到插入位置 </span></span><br><span class="line">                rear = rear-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(rear-&gt;next &amp;&amp; rear-&gt;next-&gt;expon == e)&#123; <span class="comment">// 当前指数次数相同，合并 </span></span><br><span class="line">                <span class="keyword">if</span>(rear-&gt;next-&gt;ceof+c != <span class="number">0</span>)&#123; <span class="comment">// 和不为0  </span></span><br><span class="line">                    rear-&gt;next-&gt;ceof += c;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123; <span class="comment">// 和为0 </span></span><br><span class="line">                    t = rear-&gt;next;</span><br><span class="line">                    rear-&gt;next = t-&gt;next;</span><br><span class="line">                    <span class="built_in">free</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前指数不相同，后插 </span></span><br><span class="line">                t = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">                t-&gt;ceof = c;</span><br><span class="line">                t-&gt;expon = e;</span><br><span class="line">                </span><br><span class="line">                t-&gt;next = rear-&gt;next;</span><br><span class="line">                rear-&gt;next = t;</span><br><span class="line">                rear = rear-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    p2 = PP;</span><br><span class="line">    PP = PP-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> PP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数入口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Polynomial P1,P2,PP,PS; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;Polymial.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读入多项式1</span></span><br><span class="line">    P1 = readPoly();</span><br><span class="line">    <span class="comment">// 读入多项式2</span></span><br><span class="line">    P2 = readPoly();</span><br><span class="line">    <span class="comment">// 乘法运算并输出</span></span><br><span class="line">    PP = mult(P1, P2);</span><br><span class="line">    printPoly(PP);</span><br><span class="line">    <span class="comment">// 加法运算并输出 </span></span><br><span class="line">    PS = add(P1, P2);</span><br><span class="line">    printPoly(PS);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="3-Pop-Sequence"><a href="#3-Pop-Sequence" class="headerlink" title="3.Pop Sequence"></a>3.Pop Sequence</h1><p>Problem<br>Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. <a href="https://pta.patest.cn/pta/test/16/exam/4/question/665">详细描述</a></p><p>Analysys</p><ol><li>假设当前元素出栈，则比它小的元素都要入栈，这些元素什么时候出栈我们不管。当栈顶元素等于序列当前元素时，出栈，不等证明该序列不是出栈序列.</li><li>序列元素后移，重复此操作。</li></ol><p>Code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1001</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> seq[], <span class="type">int</span> M, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; stack1;</span><br><span class="line">    stack1.push(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(index &lt;= N)&#123;</span><br><span class="line">        <span class="keyword">while</span>(seq[index] &gt; stack1.top() &amp;&amp; stack1.size() &lt;= M)&#123;</span><br><span class="line">            stack1.push(num++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(seq[index] == stack1.top())&#123;</span><br><span class="line">            stack1.pop();</span><br><span class="line">            index++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> M, N, K;</span><br><span class="line">    <span class="type">int</span> seq[MAXN];</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;PopSequence.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;M, &amp;N, &amp;K); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(K--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;seq[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(check(seq, M, N)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式篇之工厂三个妹子不可能这么可爱系列</title>
      <link href="/2017/05/31/design-pattern-factory/"/>
      <url>/2017/05/31/design-pattern-factory/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式(Simple Factory Pattern)"></a>简单工厂模式(Simple Factory Pattern)</h1><p>简单工厂模式不属于GoF 23种设计模式，学习入门用。它通过定义一个工厂类，根据不同参数返回不同实例，被创建的实例都具有共同的父类。因简单工厂模式创建实例的方法属于静态方法，故也称静态工厂方法模式。属于创建型模式。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>只要传入一个正确的参数，就能获取需要的对象，而无需了解创建细节。但是在扩展功能的时候，需要对工厂类进行改写，破坏了开-闭原则。故一般不用，可以借鉴其思想改善设计。</p><p>下面是大话数据结构中计算器的简单工厂模式UML表示图<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242105484.png" alt=""></p><p><a href="https://github.com/solano-yume/DesignPatternDemo/tree/master/out/production/DesignPattern/simplefactory/demo">code</a></p><h1 id="工厂方法模式-Factory-Method-Pattern"><a href="#工厂方法模式-Factory-Method-Pattern" class="headerlink" title="工厂方法模式(Factory Method Pattern)"></a>工厂方法模式(Factory Method Pattern)</h1><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法模式使得一个类的实例化延迟到子类。与简单工厂模式相比是引入了抽象工厂角色。</p><p>具体工厂对象的获取：将具体工厂类的类名存储在配置文件（如XML文件）中，通过读取配置文件获取类名字符串，再使用Java的反射机制，根据类名字符串生成对象。Java反射机制与配置文件读取技术的运用使得系统更灵活。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242106294.png" alt=""></p><h4 id="模式优点"><a href="#模式优点" class="headerlink" title="模式优点"></a>模式优点</h4><p>用户只需关心所需产品对应的工厂，无需关心创建细节。<br>系统假如新产品时，只需添加一个具体工厂和具体产品即可，符合开闭原则。</p><h4 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h4><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加。实现时可能需要用到DOM、反射等技术，一定程度上增加了系统复杂度。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>客户端不知道它所需要的对象的类，只需知道对应工厂即可，抽象子类通过子类指定创建哪个对象。</p><h1 id="抽象工厂模式-Abstract-Factory-Pattern"><a href="#抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式(Abstract Factory Pattern)"></a>抽象工厂模式(Abstract Factory Pattern)</h1><h4 id="模式定义-1"><a href="#模式定义-1" class="headerlink" title="模式定义"></a>模式定义</h4><p>提供一个创建一系列或相互依赖对象的接口，无需指定它们具体的类。主要解决接口选择的问题。围绕工厂与产品，抽象的工厂和抽象的产品提供统一的接口，具体的工厂创建具体的产品，增加产品需要确定抽象产品类，具体工厂类，<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307242106944.png" alt=""></p><p><a href="https://github.com/solano-yume/DesignPatternDemo/tree/master/src/abstractfactory/origin">code</a></p><p>产品等级结构：抽象产品与具体产品构成产品等级结构，即继承结构<br>产品族：同一个工厂生产的，位于不同产品等级结构的一组产品</p><h4 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h4><p>抽象工厂的开闭原则具有“倾斜性”：</p><ul><li>增加产品族：对于增加新的产品族，抽象工厂模式很好地支持了“开闭原则”，只需要增加具体产品并对应增加一个新的具体工厂，对已有代码无须做任何修改。</li><li>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了“开闭原则”。因此扩展产品族困难。</li></ul><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，用户无需关心创建的过程，将对象的创建和适用解耦。<br>产品等级结构稳定，每次使用一种产品族。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>抽象工厂模式隔离了具体类的生成，同一个具体工厂生产的对象属于同一个产品族，能够保证客户端始终适用同一个产品族中的对象，如qq不同风格的皮肤，Java的AWT设计。<br>抽象工厂模式增加产品族方便，增加新的产品结构需要进行大量修改且繁琐。</p><p>对switch或if，考虑用反射技术去除，解除分支判断带来的耦合。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式五个原则</title>
      <link href="/2017/05/31/design-pattern-solid-rule/"/>
      <url>/2017/05/31/design-pattern-solid-rule/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --></p><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>一个类承担的职责过多，就等于把这些职责耦合在一起，职责增多可以考虑分离，写成类或接口，使得程序利于复用。</p><h1 id="开-闭原则"><a href="#开-闭原则" class="headerlink" title="开-闭原则"></a>开-闭原则</h1><p>不能修改，但可以扩展。比如写一个计算器程序，开始只是基本的加减乘除运算，后期可能会添加求N次方的功能，此时就可以考虑开-闭原则，通过增加抽象运算类，运用多态性手段隔离具体算法，减少耦合，而非去更改现有的代码。开闭原则也是面向对象设计的核心所在，遵循它可以使得我们的应用程序可维护、可扩展、可复用、灵活性好。</p><h1 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h1><p>子类必须能替换父类。即在软件中，把父类都替换成子类，程序的行为不能发生变化。书中有个很好的例子，一个鸟类，一个企鹅类，鸟可以飞，企鹅不会飞，生物学上定义企鹅是一种特殊的鸟，那么能够让企鹅类继承鸟类呢？答案是不能，里氏代换原则告诉我们，鸟会飞，企鹅类继承鸟类那么企鹅类必须要能飞才能替换父类。因此，继承的前提是能够替换父类，父类才能得到真正的复用，子类才能在此基础上增添新功能。</p><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><p>如果两个类不必彼此通信，那么这两个类就不应当发生直接相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。迪米特法则强调类之间的松耦合。</p><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><p>针对接口编程，不要对实现编程。A.高层模块不应该依赖低层模块。两个都应该抽象。B.抽象不应该依赖细节，细节应该依赖于抽象。以PC机易拔插的特性，在面向对象中称为强内聚、松耦合，对外都是针脚式或触电式等标准的接口，因此不同厂商制造的鼠标，键盘，内存条只要遵循相同的接口，不同厂商内部具体细节可以不同。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴Java研发实习生面经</title>
      <link href="/2017/05/25/alibaba-interview/"/>
      <url>/2017/05/25/alibaba-interview/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --></p><h2 id="一面基础（1小时）"><a href="#一面基础（1小时）" class="headerlink" title="一面基础（1小时）"></a>一面基础（1小时）</h2><ol><li>java常用数据结构（集合类Set，List，Map从特点到底层）</li><li>Java内存模型</li><li>Java的GC机制</li><li>给出中序，后序求前序，求回文和两栈模拟队列</li><li>是否阅读过开源代码（只是知道一些开源框架，最多用，不了解怕考底层，直接说不会）</li><li>Java并发，锁</li><li>海量数据找出前面n个</li><li>TCP协议下发送一条消息至少需要多少个包，给出协议属于哪一层</li><li>了解分布式计算吗</li><li>对自己的评价</li><li>考研还是工作，为什么？</li></ol><h2 id="QZ大哥建议"><a href="#QZ大哥建议" class="headerlink" title="QZ大哥建议"></a>QZ大哥建议</h2><ol><li>多接触一些新的框架，新的技术，开阔眼界</li><li>做实际项目，通过项目提升自己</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>和QZ大哥的面试是轻松愉快的，不懂的从现在开始去弄懂它吧，其实就一面结果来说自己是完全没有想到的，我非常珍惜这一次的面试机会。附我为自己定义一条方程式：<br>(6＋3＋1＋2＋12)*days = success</p><h2 id="二面项目（35分钟）"><a href="#二面项目（35分钟）" class="headerlink" title="二面项目（35分钟）"></a>二面项目（35分钟）</h2><ol><li>为什么想找一份实习？为什么不读研？（紧张，没有好好整理思路，答得让人觉得自己只是想通过实习获得经济，其实本意不是这样的）</li><li>讲讲你做过的项目(小型电子商务网站)？你觉得做得好的地方在哪？</li><li>分析web项目中的一个模块？会有什么问题？数据库连接有什么问题？<ul><li>数据库连接应该改为连接池实现方式，连接数太小满足不了高并发要求。</li><li>数据库的PreparedStatement的语句预编译是语句还是数据？<br>PreparedStatement可以动态设置参数,保存的是sql语句</li><li>数据库连接连接是否成功判断，有效性（另一个项目写了，这次想能够迅速实现忽略了，经验教训）</li><li>把连接写死了，如果对不同的数据库呢？增加动态参数，根据数据库，用户，密码进行连接。</li></ul></li><li>你说到经常逛一些社区，你觉得什么样社区是优秀的社区？</li><li>你说到了独立？你怎么定义独立？答得非常不好，经济独立，人格独立，估计被认为是为了挣钱进阿里</li><li>你有什么问题要问我呢？问了在这样阿里工作感受，实习生培养方案，问了如何与企业项目级开发接轨</li></ol><h2 id="M大哥建议"><a href="#M大哥建议" class="headerlink" title="M大哥建议"></a>M大哥建议</h2><ol><li>多阅读新的框架源码，多用（一面QZ大哥也提到了，一定要重视）</li><li>多贴自己的代码给别人看，看是否有什么不足，从中学习，改进。</li><li>怀疑每一行代码</li></ol><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>一面幸运的通过了，但最终只有真正有实力的人才能留到最后。打击固然是有的，但更多的是让我从新审视了阿里，也明白了做Java的为什么如此渴望进阿里，那是对技术的渴求。本次面试唯一遗憾的是技术之外的想法没有好好表达出来，虽然没有实力这些都是无根之木。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识学习</title>
      <link href="/2017/05/23/git-usage-learning-notes/"/>
      <url>/2017/05/23/git-usage-learning-notes/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><code>.git</code>文件夹：版本库，创建<code>.git</code>版本库时，git自动给我们创建了暂存区。<br><code>git add</code>是把文件添加进去，实际上就是把文件修改添加到暂存区。<br><code>git commit</code>提交更改，把暂存区的所有内容提交到当前分支。<br>每次修改，需要<code>git add</code>添加到暂存区后，<code>git commit</code>才能把修改提交到分支。</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241849452.png" alt=""></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>局部配置文件(当前项目)：项目路径下的<code>/.git/config</code><br>配置命令<code>git config --local user.name=&quot;xxx&quot;</code></li><li>全局配置文件(当前用户)：用户目录%HOMEPATH%下的<code>.gitconfig</code><br>配置命令<code>git config --global user.name=&quot;xxx&quot;</code></li><li>系统配置文件：Git安装目录下的<code>/etc/gitconfig</code><br>配置命令<code>git config --system user.name=&quot;xxx&quot;</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">git init // 初始化仓库</span><br><span class="line">git add file.txt // 添加文件</span><br><span class="line">git commit -m &quot;comment&quot; // 提交改变到缓存</span><br><span class="line">git log // 查看改动信息</span><br><span class="line">git diff file1 file2 // 文件差异查看</span><br><span class="line"></span><br><span class="line">/* 版本回退 */</span><br><span class="line">git log --pretty=oneline // 查看简要信息，版本号</span><br><span class="line">git reset --hard HEAD^ // 当前版本</span><br><span class="line">git reset --hard &lt;版本号&gt; // 重置版本</span><br><span class="line">git reflog // 查看历史命令</span><br><span class="line">git status // 查看状态</span><br><span class="line"></span><br><span class="line">/* 撤销修改 */</span><br><span class="line">git checkout -- file // 丢弃工作区的修改</span><br><span class="line"></span><br><span class="line">/* 删除文件 */</span><br><span class="line">rm file // 本地直接删除</span><br><span class="line">git rm file // a.版本库中删除</span><br><span class="line">git commit -m &quot;remove file&quot; // b.提交更新</span><br><span class="line"></span><br><span class="line">/* 配置别名 */</span><br><span class="line">git config --global alias.st status // 为全局status配置别名</span><br><span class="line">git config --global alias.last &quot;log -l&quot; // 为全局配置git last显示最近一次提交</span><br><span class="line"></span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot; // 贼好用</span><br></pre></td></tr></table></figure><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">git remote add origin git@github.com:solano-yume/yourrepository.git // 关联远程仓库</span><br><span class="line">git push -u origin master // 推送master分支所有内容到远程仓库</span><br><span class="line">git clone git@github.com:solano-yume/yourrepository.git // 克隆仓库，ssh协议，也可以用https协议</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>HEAD指向当前分支，master分支是主分支。</li><li>git分支合并只需改改指针，工作内容不变。</li></ul><p>团队开发分支策略</p><ul><li>master分支仅用于发布新版本，极其稳定，平时不能在上面干活</li><li>团队在dev分支上，每个人都有自己的分支，时不时往dev分支合并即可。</li></ul><p>合并方式</p><ul><li>普通模式合并：合并后的历史有分支，能看出曾经做过哪些合并。</li><li>fast forward：合并后看不出曾经做过合并。</li></ul><p>推送分支：将该分支上的所有本地提交推送到远程库</p><ul><li>master主分支、dev开发分支时刻同步远程，bug分支一般用于本地修复bug无需同步，feature分支是否推送到远程，取决你是否和小伙伴合作在上面开发</li><li>抓取失败：推送冲突时，先抓取最新提交到本地，然后本地合并，解决冲突，再推送即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 基本 */</span><br><span class="line">git checkout -b dev // 创建并且切换到分支,等价下面两行</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">git branch // 查看当前分支</span><br><span class="line">git merge dev // 合并dev分支到当前分支</span><br><span class="line">git branch -d dev // 删除分支</span><br><span class="line">git branch -D dev // 丢弃一个没有被合并的分支</span><br><span class="line">git log --graph --pretty=oneline --bbrev-commit // 查看分支合并图(简单)</span><br><span class="line">git log --graph // 查看分支合并图(详细)</span><br><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev // 不使用fast forward模式</span><br><span class="line"></span><br><span class="line">/* Bug分支 */</span><br><span class="line">git stash // 存储工作现场</span><br><span class="line">... // 创建分支issue-xxx改bug</span><br><span class="line">git stash list // 查看工作现场保存在哪</span><br><span class="line">git stash apply // 恢复现场，不删除保存的stash内容,要删除用git stash drop</span><br><span class="line">git stash pop // 恢复现场，删除保存的stash内容</span><br><span class="line">git stash apply stash@&#123;0&#125; // 多次stash，选择需要恢复的现场</span><br><span class="line"></span><br><span class="line">/* 多人协作 */</span><br><span class="line">git remote // 查看远程库信息</span><br><span class="line">git remote -v // 查看远程库信息(详细)</span><br><span class="line">git push origin dev // 推送dev分支</span><br><span class="line"> </span><br><span class="line">git checkout -b dev origin/dev // 创建origin的dev分支到本地</span><br><span class="line">git pull // 把最新的提交同步到本地(抓下来)</span><br><span class="line"></span><br><span class="line">git branch --set-upstream branch-name origin/branch-name // 建立本地分支和远程分支的关联</span><br></pre></td></tr></table></figure><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0 // 给当前分支打上标签</span><br><span class="line">git log --pretty=oneline --abbrev-commit // a.查找历史提交comment id</span><br><span class="line">git tag v0.9 7825a50 // b.给comment id打上标签</span><br><span class="line"></span><br><span class="line">git tag // 查看所有标签</span><br><span class="line">git show v0.9 // 查看标签信息</span><br><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 7825a33 // 创建带说明的标签</span><br><span class="line">git tag -s v0.2 -m &quot;signed versioin 0.2 released&quot; fe1233a // PGP私钥签名标签</span><br><span class="line">git tag -d v1.0 // 删除标签</span><br><span class="line">git push origin v1.0 // 远程推送标签</span><br><span class="line">git push origin --tags // 一次性推送全部未推送到远程的本地标签</span><br><span class="line">git push origin :refs/tags/v0.9 // 远程删除标签</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活充满美好</title>
      <link href="/2017/05/11/life-is-full-of-beauty/"/>
      <url>/2017/05/11/life-is-full-of-beauty/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><div id="aplayer2" class="aplayer" style="margin-bottom: 20px;"></div><script>var ap = new APlayer({element: document.getElementById("aplayer2"),narrow: false,autoplay: true,showlrc: 0,music: {title: "WHITE ALBUM PIANO",author: "石川真也",url: "http://static.tsukasa.moe/music/WHITE_ALBUM_PIANO.mp3",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p>中午，走在前往新校的最初的路上，听一曲纯音，虽然是有点炎热的夏，不过迎面不缺清风。穿行于放学归寝的人流中，沉浸于那份悠闲舒适，这一两个月来的种种不快与烦闷，仿佛随着空气的流动般飘散了。</p><hr><p>路上的景色，仔细看看，与三年前改变了许多。环绕路边整排的商店，已化作平坦长草的荒地，常去的店，也不记得是如何模样了。或许一个人很静的时候，才会感受到时间在流逝，吐息之间，心脏每一次跳动，分外真实。</p><hr><p>我觉得自己属于那种高兴的时候很吵的家伙，悲伤的时候会不自觉的显得些许阴沉，平静的时候却是细腻而悠然的。这样的自己，其实也不讨厌，只是觉得能够更加外向活跃就好了。像现在这样感受到自然生命力的瞬间，总会从心底深处涌出自然充满生机，世界是充满美好的想法，虽然是主观的一时热忱，不过有什么关系呢，自在开心就好。</p><hr><p>这个春天忙着找一份实习，结果却不如意。为自己有在努力欣慰的同时，也有对自己如此无力感到痛苦。面试最终应该都以失败告终了，难免有几分失落与无奈。不过我不想也不会否定自己一步一步走过的路，无论对了错了，都是自己做过的选择，应当正视它，从中汲取经验。</p><hr><p>面了华为、腾讯、深信服、金山，遇到了不同的面试官，聊了各种各样的话题，都挺不错的。在这些面试中，也尝试着以一种热爱和真诚的方式展现自己知道的和不知道的。印象较深刻的是华为和腾讯的二面面试官，对学生们的考察分别是两种不同风格，华为的陈前辈(第一次面试，忘记问名字，只记得我的简历上写的陈xx的姓氏了)，除项目相关问题外，也和他聊了许多，人生的价值，同学对自己的评价等等思想，学习，生活，开始比较紧张，可能是陈前辈的引导让我变得放松，发挥出自己真正的水平。陈前辈最后也对我这次表现的不足给了我很恳切的建议，最后面试官伸手和我握手那一刻挺惊讶与感动的。面试过了，但是应该是笔试成绩不理想和没有大的项目经历，最终5月5号发offer的时候没有收到短信。不过我挺喜欢华为的，从面试的体验与华为企业价值的追求来说，我觉得华为招聘考察的并不是技术多么牛，而是一种与华为文化的契合，面试者是否勤奋刻苦，积极热爱自己做的事情。如果有能力有机会，我挺想到这个公司工作。</p><hr><p>腾讯二面是技术面，面试官是广东人，MIG事业群，因此口音听起来有种格外的亲切。面试内容考察基础，往你了解的地方深入，看你了解多少。虽然我有挺多问题没有答上来或者答得不好，深切感受到自己对知识实在是太浮于表面，要知道一个人是否热爱一样东西，看他了解得多深入就行了。止步二面，和面试官交谈让我感到挺愉快的，问了面试官在腾讯工作生活的体验，让我觉得这是一个充满热情与活力的企业，能在里面工作应该很好吧。</p><hr><p>我觉得每一个为找实习和工作努力的人，都是值得尊敬的，并不是夸自己。因为我觉得这类人渴望自食其力，有自己的追求，起码我见过的大多数人是这样。挺喜欢プロポーズ大作戦的“失敗しても当たり前、成功したら男前”这句话，和“胜败乃兵家常事”差不多的意思，人生总会有些挫折，但正是因为有挫折苦痛，历经苦痛实现成功的时候，才会分外耀眼。我很感谢我的父母，他们在我因面试结果不理想失败的时候安慰我鼓励我，告诉我应该一步一个脚印，不焦急烦躁，吃好休息好然后再学好。听到这些话，我当时觉得还有什么好伤心的呢，我已经拥有人生最宝贵的东西了。生活还得继续，我坚信，持续的付出是会有回报的。</p><hr><p>我之前在“五味杂陈的感想”中说过，要以积极的态度，平和的心境，对人对事；在面试官介绍的一样，我今年的目标是好好努力学习生活，不是作为虚荣的吹嘘，我觉得自己一定能做到的。生活是充满美好的，要以热爱之情面对生活。</p><p>以上です。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划解决最优化问题</title>
      <link href="/2017/05/10/dynamic-programming-solve-optimization-problem/"/>
      <url>/2017/05/10/dynamic-programming-solve-optimization-problem/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h3 id="动态规划思想"><a href="#动态规划思想" class="headerlink" title="动态规划思想"></a>动态规划思想</h3><ul><li>先来个定位，动态规划大多数应用于求解最优化问题。</li><li>故要求问题具有最优子结构性质，通俗来说就是全局最优解包含局部最优解。</li><li>动态规划的核心是确定状态和导出状态转移方程。</li><li>状态方程的求解多种多样，递归、递推、记忆搜索条条大路通罗马，虽然效率也有差异。</li></ul><h3 id="数字三角形问题"><a href="#数字三角形问题" class="headerlink" title="数字三角形问题"></a>数字三角形问题</h3><p><strong>1.题目描述：</strong><br>有一个由非负整数组成的三角形，第<code>n</code>行有<code>n</code>个数，找出一条从三角形的顶到底的路径，使路径经过的数字的和最大。只需计算出和，不需要指明具体路径。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241702050.png" alt=""></p><p><strong>2.算法思路：</strong></p><ul><li>确定状态：利用二维数组进行坐标定位,把位置<code>(i, j)</code>看作一个状态，定义状态<code>(i, j)</code>的指标函数<code>dp(i, j)</code>:从格子<code>(i, j)</code>出发时能得到的最大和(包括格子本身<code>(i, j)</code>的值。</li><li>建立状态转移方程：看状态是如何转移的。从<code>(i,j)</code>出发有两种决策，往左下走<code>(i+1,j)</code>对应<code>dp(i+1, j)</code>表示“从<code>(i+1, j)</code>出发后能得到的最大和”、往右下走<code>(i+1, j+1)</code>对应<code>dp(i+1, j+1)</code>，这两个决策自由选择，应选择较大的一个。故得出状态转移方程：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp(i,j) = data(i,j) + max&#123;dp(i+1, j), dp(i+1, j+1)&#125;</span><br></pre></td></tr></table></figure><p><strong>3.代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DigitalTriangle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">            <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                    data[i][j] = sc.nextInt();</span><br><span class="line">                    dp[i][j] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(solve(<span class="number">0</span>, <span class="number">0</span>, dp, data));</span><br><span class="line">            <span class="comment">//System.out.println(solve2(0, 0, data));</span></span><br><span class="line">            <span class="comment">//System.out.println(solve3(dp, data));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solve2</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[][] data)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归方式，重叠子问题，重复计算，效率低</span></span><br><span class="line">        <span class="keyword">if</span> (i == data.length - <span class="number">1</span>) <span class="keyword">return</span> data[i][j];</span><br><span class="line">        <span class="keyword">return</span> data[i][j] + Math.max(solve2(i+<span class="number">1</span>, j, data), solve2(i+<span class="number">1</span>, j+<span class="number">1</span>, data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递推</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solve3</span><span class="params">(<span class="type">int</span>[][] dp, <span class="type">int</span>[][] data)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, endPos = dp.length - <span class="number">1</span>; j &lt;= endPos; j++) &#123;</span><br><span class="line">            dp[endPos][j] = data[endPos][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dp.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i][j] = data[i][j] + Math.max(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记忆搜索</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solve</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[][] dp, <span class="type">int</span>[][] data)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否被计算过</span></span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        <span class="comment">// 如果是最后一行，直接返回data[i][j]</span></span><br><span class="line">        <span class="keyword">if</span> (i == dp.length - <span class="number">1</span>) <span class="keyword">return</span> data[i][j];</span><br><span class="line">        <span class="comment">// 否则，递归执行状态方程，d[i][j]设置从(i,j)出发后能得到最大和</span></span><br><span class="line">        dp[i][j] = data[i][j] + Math.max(solve(i+<span class="number">1</span>, j, dp, data), solve(i+<span class="number">1</span>, j+<span class="number">1</span>, dp, data));</span><br><span class="line">        <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="币值最大化问题"><a href="#币值最大化问题" class="headerlink" title="币值最大化问题"></a>币值最大化问题</h3><p><strong>1.题目描述：</strong><br>给定一排<code>n</code>个硬币，其面值均为正整数<code>c1，c2，...，cn</code>，这些整数并不一定两两不同。请问如何选择硬币，使得在其原始位置互不相邻的条件下，所选硬币的总金额最大。</p><p><strong>2.算法思路：</strong></p><ul><li>确定状态：<code>dp(i)</code>表示前<code>i</code>个硬币中能选到的最大币值.</li><li>状态转移方程：<code>n</code>个硬币中，分两种情况：选最后一枚硬币<code>(coin(n)+dp(n-2))</code>，不选最后一枚硬币<code>dp(n-1)</code>，我们选择两者中取到硬币总值最大的，综上，得到状态方程：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp(n) = max&#123;coin(n) + dp(n - 2), dp(n - 1)&#125;, n&gt;1</span><br><span class="line">dp(0) = 0, dp(1) = coin(1)</span><br></pre></td></tr></table></figure><p>也可以根据递归、递推、记忆搜索策略写出代码。</p><p><strong>3.代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by LuoWenqing on 2017/5/10.</span><br><span class="line"> */</span><br><span class="line">public class CoinRow &#123;</span><br><span class="line"></span><br><span class="line">    // 递归</span><br><span class="line">    public static int maxCoinVal(int[] data, int n) &#123;</span><br><span class="line">        if (n == 0 || n == 1) return data[n];</span><br><span class="line">        return Math.max(data[n] + maxCoinVal(data, n - 2), maxCoinVal(data, n - 1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 递推</span><br><span class="line">    public static int maxCoinVal2(int[] coin) &#123;</span><br><span class="line">        int[] dp = new int[coin.length];</span><br><span class="line">        dp[0] = 0;</span><br><span class="line">        dp[1] = coin[1];</span><br><span class="line">        for (int i = 2; i &lt; coin.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(coin[i] + dp[i - 2], dp[i - 1]);</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[coin.length - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        InputStream is = new BufferedInputStream(new FileInputStream(&quot;coinrow.txt&quot;));</span><br><span class="line">        System.setIn(is);</span><br><span class="line"></span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        while (sc.hasNext()) &#123;</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            int[] coin = new int[n + 1];</span><br><span class="line">            coin[0] = 0;</span><br><span class="line">            for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">                coin[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(maxCoinVal(coin, n));</span><br><span class="line">            System.out.println(maxCoinVal2(coin));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找零问题"><a href="#找零问题" class="headerlink" title="找零问题"></a>找零问题</h3><p><strong>1.题目描述：</strong><br>需找零金额为<code>n</code>，现有面值为<code>d1&lt;d2&lt;...&lt;dm</code>的硬币，数目没有限制，最少要用多少张硬币？</p><p><strong>2.算法思路：</strong></p><ul><li>状态：输入有总金额<code>n</code>，面值硬币序列<code>coin[]</code>。设<code>dp(n)</code>为总金额为<code>n</code>时需要数量最少的硬币数目。</li><li>方程：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当n &gt; 0 且 n &gt;= coin[j], dp(n) = min&#123;dp(n - coin[j])&#125; + 1</span><br><span class="line"></span><br><span class="line">n = 0, dp(0) = 0    </span><br></pre></td></tr></table></figure><p><strong>3.代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinNumCoin</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minNum</span><span class="params">(<span class="type">int</span>[] coin, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> coin[coin.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; coin.length &amp;&amp; i &gt;= coin[j]; j++) &#123;</span><br><span class="line">                temp = Math.min(dp[i - coin[j]], temp);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = temp + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;minnumcoin.txt&quot;</span>));</span><br><span class="line">        System.setIn(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span>[] coin = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">            coin[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">                coin[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(minNum(coin, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="连续子序列最大和"><a href="#连续子序列最大和" class="headerlink" title="连续子序列最大和"></a>连续子序列最大和</h3><p><strong>1.题目描述：</strong><br>给定<code>K</code>个整数的序列<code>&#123; N1, N2, ..., NK &#125;</code>，其任意连续子序列可表示为<code>&#123; Ni, Ni+1, ..., Nj &#125;</code>，其中 <code>1 &lt;= i &lt;= j &lt;= K</code>。最大连续子序列是所有连续子序中元素和最大的一个， 例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13 }，最大和为20。</p><p><strong>2.算法思路：</strong><br>学了动态规划，也要知道这道题非动态规划的思路还是很简单的，暴力求解：从<code>0-(n-1)</code>的某个位置开始的子序列最大和，一直加到最后，<code>sum(current...x) &gt; max</code>比较，总是保存最大的一个。为了降低点复杂度，动态规划<code>O(n)</code>大法吧：</p><ul><li>状态；设有数字序列<code>numbers[0...n-1]</code>,选择连续子序列最大和，注意从和最大的角度考虑，<code>maxSum(i)</code>表示以<code>numbers[i]</code>结尾的序列的最大和。那么以当前元素<code>numbers[i]</code>结尾可以划分为两种情况：加上前面的<code>maxSum(i-1)</code>, 不加上前面的<code>maxSum(i-1)</code>。为什么呢，可以这么想，如果前面以<code>numbers[i-1]</code>为尾节的子序列即<code>maxSum(i-1)</code>为负则不加，为正当然是要加上啦。</li><li>方程：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxSum(i) = max&#123;numbers[i] + maxSum(i-1), numbers[i]&#125;</span><br></pre></td></tr></table></figure><p><strong>3.代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceMax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;maxseq.txt&quot;</span>));</span><br><span class="line">        System.setIn(is);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            numbers[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[] maxSum = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            maxSum[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                numbers[i] = sc.nextInt();</span><br><span class="line">                maxSum[i] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            initDp(numbers, maxSum, n);</span><br><span class="line">            Arrays.sort(maxSum);</span><br><span class="line">            System.out.println(maxSum[n]);</span><br><span class="line"></span><br><span class="line">            System.out.println(maxSeqSum(numbers, maxSum));</span><br><span class="line">            System.out.println(maxSeqSum2(numbers));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记忆搜索，对于序列numbers, 求出以numbers[tailPos]的连续子序列最大和，用maxSum[tailPos]保存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">initDp</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span>[] maxSum, <span class="type">int</span> tailPos)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tailPos == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxSum[tailPos] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxSum[tailPos];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum[tailPos] = Math.max(numbers[tailPos] + initDp(numbers, maxSum, tailPos - <span class="number">1</span>), numbers[tailPos]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递推</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSeqSum</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span>[] maxSum)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, end = numbers.length - <span class="number">1</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            maxSum[i] = Math.max(numbers[i] + maxSum[i-<span class="number">1</span>], numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(maxSum);</span><br><span class="line">        <span class="keyword">return</span> maxSum[maxSum.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化递推</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSeqSum2</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxSum, maxHere;</span><br><span class="line">        maxSum = maxHere = numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, end = numbers.length - <span class="number">1</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxHere &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                maxHere = numbers[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxHere += numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果maxHere大于0，则更新</span></span><br><span class="line">            <span class="keyword">if</span> (maxHere &gt; maxSum) &#123;</span><br><span class="line">                maxSum = maxHere;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0/1背包问题"></a>0/1背包问题</h3><p><strong>1.题目描述：</strong><br>有 <code>n</code> 种物品，物品 <code>i</code> 的体积为 <code>v[i]</code>, 价值为 <code>p[i]</code>. 假定所有物品的体积和价格都大于 0, 以及背包的体积为 <code>V</code>.<br>问：选择哪些物品可使在体积不超过 <code>V</code> 的情况下使物品的总价值最大，并求出这个总价值， 且每种物品只能选择 0 个或 1 个</p><p><strong>2.算法思路：</strong></p><ul><li>状态分析：考虑由前<code>i</code>个物品，当前背包的体积为<code>j</code>，<code>dp(i, j)</code>为给定的前<code>i</code>件物品中，体积为<code>j</code>的背包能放进的最大价值。</li><li>导出状态转移方程：递推思想，如果体积<code>j &gt; volume[i]</code>,那么<code>dp(i, j)</code>有两种策略：包括第<code>i</code>件物品最大价值为<code>dp(i-1, j-volume[i]) + values[i]</code>，不包括第<code>i</code>件物品最大价值为<code>dp(i-1,j)</code>，取最大者。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp(i, j) = max&#123;dp(i-1, j), dp(i-1, j-volume[i]) + values[i]&#125;, j &gt; volume[i]</span><br><span class="line">dp(i, j) = dp(i-1, j), j &lt; volume[i]    </span><br><span class="line">初始化条件：j &gt;= 0时，dp(0, j) = 0; i &gt;= 0时，dp(i, 0) = 0;</span><br></pre></td></tr></table></figure><p><strong>3.代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knapsack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;knapsack.txt&quot;</span>));</span><br><span class="line">        System.setIn(is);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 背包的体积</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();   <span class="comment">// 物品的数量</span></span><br><span class="line">            <span class="type">int</span>[] values = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>]; <span class="comment">// 物品的价值</span></span><br><span class="line">            values[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span>[] volume = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>]; <span class="comment">// 物品的体积</span></span><br><span class="line">            volume[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                values[i] = sc.nextInt();</span><br><span class="line">                volume[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(maxValue(values, volume, V));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[values.length][V+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                Arrays.fill(dp[i], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(maxValue2(values, volume, dp, values.length - <span class="number">1</span>, V));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递推</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] volume, <span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="comment">// 二维维护表</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[values.length][V + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始条件，虽然java默认初值为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= V; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= V; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; volume[i]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">// 不能装入背包</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j - volume[i]] + values[i] &gt; dp[i - <span class="number">1</span>][j]) &#123; <span class="comment">// 选择价值较大者</span></span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j - volume[i]] + values[i]; <span class="comment">// 包括第i件物品</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">// 不包括第i件物品</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[values.length - <span class="number">1</span>][V];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记忆搜索</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxValue2</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] volume, <span class="type">int</span>[][] dp, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; volume[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j] = maxValue2(values, volume, dp, i-<span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[i][j] = Math.max(maxValue2(values, volume, dp, i - <span class="number">1</span>, j - volume[i]) + values[i], maxValue2(values, volume, dp, i-<span class="number">1</span>, j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式总结</title>
      <link href="/2017/04/28/regex-expression/"/>
      <url>/2017/04/28/regex-expression/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文对正则表达式做一个简要概括，主要包括五点：</p><ul><li>常规</li><li>量词</li><li>捕获</li><li>断言</li><li>注释</li></ul><h1 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h1><ul><li><code>^</code>：匹配字符串开始</li><li><code>$</code>：匹配字符串结束</li><li><code>\b</code>：单词的开头或结尾，即单词的边界;<code>\B</code> 则是非词的边界</li><li><code>\d</code>：数字字符匹配；<code>\D</code> 非数字字符匹配</li><li><code>\s</code>：空白字符，等价于<code>[\f\b\n\r\t\v]</code></li><li><code>\w</code>：匹配任何字类字符，包括下划线；<code>\W</code> 与任何非单词字符匹配，等价于<code>[^A-Za-z0-9_]</code></li></ul><h1 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h1><ul><li><code>?</code>：零次或一次</li><li><code>+</code>：一次或多次</li><li><code>*</code>：零次或多次;通配符<code>.*</code>表示任意数量的不包含换行的字符</li><li><code>.</code>：除<code>\n</code>外的任意单个字符，要匹配<code>\n</code>则使用<code>[\s\S]</code></li><li><code>&#123;n&#125;</code>：正好匹配n次</li><li><code>&#123;n,&#125;</code>：至少匹配n次</li><li><code>&#123;n,m&#125;</code>：至少匹配n次，至多匹配m次</li></ul><h1 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h1><ul><li><code>(pattern)</code>：匹配pattern并捕获该匹配的子表达式</li><li><code>(?&lt;name&gt;pattern)</code>：匹配pattern并捕获文本到名称name的组里，等价于<code>(?&#39;name&#39;pattern)</code></li><li><code>(?:pattern)</code>：匹配pattern但不捕获该匹配的子表达式</li></ul><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><ul><li><code>(?=pattern)</code>：匹配pattern前面的位置</li><li><code>(?&lt;=pattern)</code>：匹配pattern后面的位置</li><li><code>(?!pattern)</code>：匹配后面跟的不是pattern的位置</li><li><code>(?&lt;!pattern)</code>：匹配前面不是pattern的位置</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li><code>(?#comment)</code>：不对正则表达式处理产生任何影响，用于提供注释让人阅读</li></ul><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法Java实现</title>
      <link href="/2017/04/04/sorting-algorithm/"/>
      <url>/2017/04/04/sorting-algorithm/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h1><p>排序算法分为内排序和外排序。所有数据已经读入内存，排序过程中无需对磁盘进行读写称为内排序。内存中无法保存全部数据，需要用到外存的称为外排序。文章讲的排序都属于内排序，下面以从小到大排序举例进行描述。</p><p>内排序算法可以分为以下五类：</p><ul><li>插入排序：直接插入排序、二分法插入排序，希尔排序</li><li>选择排序：简单选择排序、堆排序</li><li>交换排序：冒泡排序、快速排序</li><li>归并排序</li><li>基数排序</li></ul><h1 id="算法理解与实现"><a href="#算法理解与实现" class="headerlink" title="算法理解与实现"></a>算法理解与实现</h1><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>算法思想：插入排序分为已排好序的部分，待插入排序的当前元素，要解决的问题即是寻找到合适位置进行插入。即每次将一个待排序的记录，按照顺序码大小插入到有序序列的合适位置，直到全部插入排序完成。<br>关键点：找到已经排好序的序列中合适插入位置。</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>算法思想：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241551939.png" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 1.插入排序の直接插入排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">directInsertSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            temp = numbers[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j-<span class="number">1</span>]; j--) &#123;</span><br><span class="line">                numbers[j] = numbers[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">9</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        directInsertSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分法插入排序"><a href="#二分法插入排序" class="headerlink" title="二分法插入排序"></a>二分法插入排序</h4><p>算法思想：<br>同样地，二插入排序也分为已排好序的部分，待插入排序的元素temp，二分的目的是比较减少次数。<br>如果待插入元素temp大于已排好序的下标为mid的元素，表明应该插入mid右边，则更新left为mid + 1；否则，表明应该插入mid的左边，更新right为mid - 1.</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.插入排序の二分插入排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">binInsertSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            temp = numbers[i];</span><br><span class="line">            left = <span class="number">0</span>;   <span class="comment">// 固定左边</span></span><br><span class="line">            right = i - <span class="number">1</span>; <span class="comment">// 有序序列的右边界</span></span><br><span class="line">            <span class="comment">// temp是待插入元素，每次插入时，从left到right的数组序列已经有序，循环找到插入位置</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">                mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; numbers[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断需要移动多少个位置,left 等于 right</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">                numbers[j + <span class="number">1</span>] = numbers[j];</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[left] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">9</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        binInsertSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>算法思想：<br>将待排序的序列分为若干个组分别进行直接插入排序，带整个序列的记录基本有序时，对全体序列进行直接插入排序。<br>具体来说，划分组依据步长increment；组（列）排序使用插入排序，只是相邻元素下标关系为一个步长increment；步长为1时，即直接插入排序。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241551199.png" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 3.插入排序の希尔排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置步长,每次为原来的一半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">increment</span> <span class="operator">=</span> numbers.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 按步长划分列(组)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> increment; i &lt; numbers.length; i++) &#123;</span><br><span class="line">                temp = numbers[i];</span><br><span class="line">                <span class="comment">// 对同一列中的元素进行插入排序</span></span><br><span class="line">                <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (temp &lt; numbers[j - increment]) &#123; <span class="comment">// 决定从小到大排序</span></span><br><span class="line">                        numbers[j] = numbers[j - increment];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                numbers[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">9</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        shellSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>算法思想：每趟从待排序记录序列中选择最小的元素放在已排序表的最前面，直至全部排完。<br>关键点：在待排序序列中找到最小的元素（下标）。</p><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>算法思想：<br>每次找出未排序部分最小序列最小元素的下标，然后将其与第i个（第i趟）的元素交换。即第一次找出最大的元素下标，与第一个元素做交换；第二次找到剩下未排序的最大元素，与第二个位置的元素做交换，直到排序完成。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 1.选择排序の简单选择排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleSelectSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">// 有比当前numbers[i]更小的数，那么记录其下标j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; numbers.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[k] &gt; numbers[j]) &#123;</span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当发现k ！= i 即有比当前numbers[i]更小的数，交换； k == i 时，那么自己和自己交换不影响结果,因此if语句可以省去</span></span><br><span class="line">            <span class="comment">//if (k != i) &#123;</span></span><br><span class="line">                temp = numbers[i];</span><br><span class="line">                numbers[i] = numbers[k];</span><br><span class="line">                numbers[k] = temp;</span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">13</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        simpleSelectSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>算法思想：<br>堆非官方定义：满足完全二叉树；大顶堆每个节点的都比其左右子节点大。<br>堆排序把要排序的序列看作一棵顺序存储的二叉树，调整存储顺序，使之成为一个堆。<br>堆排序分为两步：a.构建堆;b.根元素与最后一个元素作交换，剔除最后一个元素。<br>其中构建堆是大顶堆还是小顶堆决定升降序排列。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.1选择排序の堆排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            buildMaxHeap(numbers, numbers.length - <span class="number">1</span> - i);</span><br><span class="line">            swap(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.2构建堆</span></span><br><span class="line">    <span class="comment">// 对numbers数组从0到lastIndex建大顶堆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> lastIndex)</span> &#123;</span><br><span class="line">        <span class="comment">// 从最后一个节点（下标为lastIndex）的父节点开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (lastIndex - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fatherIndex</span> <span class="operator">=</span> i;    <span class="comment">// 保存当前节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">biggerIndex</span> <span class="operator">=</span> <span class="number">2</span> * fatherIndex + <span class="number">1</span>;  <span class="comment">// 求出其左子节点</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果父节点fatherIndex的子节点存在，需使得父节点最大</span></span><br><span class="line">            <span class="keyword">while</span> (biggerIndex &lt;= lastIndex) &#123;</span><br><span class="line">                <span class="comment">// biggerIndex &lt; lastIndex表示当前节点存在右子节点biggerIndex+1</span></span><br><span class="line">                <span class="keyword">if</span> (biggerIndex &lt; lastIndex) &#123;</span><br><span class="line">                    <span class="comment">// 记录fatherIndex的子节点中较大数的对应下标</span></span><br><span class="line">                    <span class="keyword">if</span> (numbers[biggerIndex] &lt; numbers[biggerIndex + <span class="number">1</span>]) &#123;</span><br><span class="line">                        biggerIndex++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 比较父节点与其较大子节点的值</span></span><br><span class="line">                <span class="keyword">if</span> (numbers[fatherIndex] &lt; numbers[biggerIndex]) &#123;</span><br><span class="line">                    swap(numbers, fatherIndex, biggerIndex);</span><br><span class="line">                    <span class="comment">// 将biggerIndex赋予fatherIndex，while循环保证交换后biggerIndex位置的值大于其左右子节点的值</span></span><br><span class="line">                    fatherIndex = biggerIndex;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.3交换数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[i];</span><br><span class="line">        numbers[i] = numbers[j];</span><br><span class="line">        numbers[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">13</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        heapSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><p>算法思想：两两比较，交换元素的排序算法<br>关键点：何时进行交换。</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>算法思想：<br>对于待排序部分，自上而下的相邻元素两两比较，如果顺序与要求相反，则交换两个元素，则大的元素往下沉，轻的元素往上冒，冒泡就是这么的形象简单。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 1.交换排序の冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; numbers.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = numbers[j];</span><br><span class="line">                    numbers[j] = numbers[j + <span class="number">1</span>];</span><br><span class="line">                    numbers[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">90</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>算法思想：<br>划分方法partition选择一个基准元素，通过一趟扫描，找到基准元素应该在的位置，将待排序序列分为大于等于基准元素的部分，小于基准元素的部分。接下来分别对两部分进行同样的方式划分，直至排序完成。Hoarse划分和三路划分。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.1交换排序の快速排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> partition(numbers, low, high);</span><br><span class="line">            quickSort(numbers, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">            quickSort(numbers, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.2三路划分,优化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> pivotIndex)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivotValue</span> <span class="operator">=</span> numbers[pivotIndex];</span><br><span class="line">        <span class="type">int</span> <span class="variable">storeIndex</span> <span class="operator">=</span> low;</span><br><span class="line"></span><br><span class="line">        swap(numbers, pivotIndex, high);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt; high; i++)</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &lt;= pivotValue) &#123;</span><br><span class="line">                swap(numbers, i, storeIndex);</span><br><span class="line">                ++storeIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        swap(numbers, storeIndex, high);</span><br><span class="line">        <span class="keyword">return</span> storeIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">//Hoarse划分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> low, <span class="type">int</span> hight)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> numbers[low];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; hight) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; hight &amp;&amp; numbers[hight] &gt;= pivot) &#123;</span><br><span class="line">                hight--;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[low] = numbers[hight];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; hight &amp;&amp; numbers[low] &lt; pivot) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[hight] = numbers[low];</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[low] = pivot;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.3交换数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[i];</span><br><span class="line">        numbers[i] = numbers[j];</span><br><span class="line">        numbers[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">// 2.4调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            quickSort(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">90</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        quick(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>算法思想：<br>将两个或两个以上的有序表合并成一个新的有序表。先将序列分为若干个子序列，这若干个子序列又是有序的，然后将其合并为一个整体有序序列。<br>这里划分直接以1/2划分，然后再分别对两部分进行归并排序，最后调用将两个两部分排好序的子序列合并，如此递归至排序完成。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 1.归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(numbers, low, mid);</span><br><span class="line">            mergeSort(numbers, mid + <span class="number">1</span>, high);</span><br><span class="line">            merge(numbers, low, mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 合并数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> originLow, <span class="type">int</span> middle, <span class="type">int</span> originHigh)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] tempNumbers = <span class="keyword">new</span> <span class="title class_">int</span>[originHigh - originLow + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> originLow;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> originHigh;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> middle + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">third</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将小的先放入新数组</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= middle &amp;&amp; mid &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[low] &lt;= numbers[mid]) &#123;</span><br><span class="line">                tempNumbers[third++] = numbers[low++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tempNumbers[third++] = numbers[mid++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左边有剩余，添加到数组中</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= middle) &#123;</span><br><span class="line">            tempNumbers[third++] = numbers[low++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右边有剩余，添加到数组中</span></span><br><span class="line">        <span class="keyword">while</span> (mid &lt;= high) &#123;</span><br><span class="line">            tempNumbers[third++] = numbers[mid++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新数组元素复制到原数组对应位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tempNumbers.length; i++) &#123;</span><br><span class="line">            numbers[originLow + i] = tempNumbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">13</span>, <span class="number">5</span>, -<span class="number">11</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        mergeSort(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>算法思想：<br>以前比较两个正整数的大小是这样的，如果一个数的位数比另一个多，则这个数就大。如果位数相同，那么按位数递减依次比较大小，哪个数在这一位上更大则停止比较，得到这个数较大的结果。而我们也可以从个位到高位进行比较。</p><p>那么怎么保存每次按照数的某一位比较得出的排序结果呢？数的每一位是由0-9中的一个构成的，如果按照某一位进行比较，最多会是，该位数都相等，那么共有n个数的数组会排成1列共n个，故需要用二维数组bucket[10][n]来存放排序结果。<br><code>[72 25 18 90 35 25 12 81 97 11] 十个数进行基数排序</code></p><p>按个位排序：</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9 </th></tr></thead><tbody><tr><td style="text-align:center">90</td><td style="text-align:center">11</td><td style="text-align:center">72</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">25</td><td style="text-align:center"></td><td style="text-align:center">97</td><td style="text-align:center">18</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">81</td><td style="text-align:center">12</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">35</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">25</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>按照从0到9元素顺序，桶内先进先出顺序，排序得到下列数组<br><code>[90 11 81 72 12 25 35 25 97 18]</code></p><p>按十位排序：</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9 </th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">11</td><td style="text-align:center">25</td><td style="text-align:center">35</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">72</td><td style="text-align:center">81</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">12</td><td style="text-align:center">25</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">97 </td></tr><tr><td style="text-align:center"></td><td style="text-align:center">18</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>按同样方法，排序得到下面有序序列<br><code>[11 12 18 25 25 72 81 90 97]</code></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/4/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 打印函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(numbers[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="comment">// 基数排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> numbers.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; numbers[i]) &#123;</span><br><span class="line">                max = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算出需要比较到位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">            times++;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二维数组的行为按0-9形成的桶，len取number.length是保证桶能够放下所有的数字</span></span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][len];</span><br><span class="line">        <span class="comment">// 用于保存每个桶里元素的个数</span></span><br><span class="line">        <span class="type">int</span>[] order = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span> (n &lt;= times) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> num / (<span class="type">int</span>)Math.pow(<span class="number">10</span>, n - <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">                bucket[digit][order[digit]] = num;</span><br><span class="line">                order[digit]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">// 如果桶里有数据，从上到下遍该桶历并保存到原数组中</span></span><br><span class="line">                <span class="keyword">if</span> (order[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; order[i]; j++) &#123;</span><br><span class="line">                        numbers[k] = bucket[i][j];</span><br><span class="line">                        k++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                order[i] = <span class="number">0</span>; <span class="comment">//将桶里计数器置0，用于下一位排序</span></span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">411</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        radixSort(numbers);</span><br><span class="line"></span><br><span class="line">        print(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">排序算法</th><th style="text-align:center">最坏时间复杂度</th><th style="text-align:center">最好时间复杂度</th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">稳定性 </th></tr></thead><tbody><tr><td style="text-align:center">插入</td><td style="text-align:center">直接插入排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">插入</td><td style="text-align:center">二分法插入排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(log<sub>2</sub>n)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">稳定 </td></tr><tr><td style="text-align:center">插入</td><td style="text-align:center"><strong>希尔排序</strong></td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n<sup>1.3</sup>)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">选择</td><td style="text-align:center">简单选择排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">选择</td><td style="text-align:center"><strong>堆排序</strong></td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">不稳定 </td></tr><tr><td style="text-align:center">交换</td><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">交换</td><td style="text-align:center"><strong>快速排序</strong></td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">归并</td><td style="text-align:center"><strong>二路归并排序</strong></td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">O(nlog<sub>2</sub>n)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">基数</td><td style="text-align:center">基数排序</td><td style="text-align:center">O(d(r+n))</td><td style="text-align:center">O(d(n+rd))</td><td style="text-align:center">O(rd+n)</td><td style="text-align:center">稳定</td></tr></tbody></table><p>其中基数排序的r表示关键字基数，d表示长度，n表示关键字个数。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记二</title>
      <link href="/2017/04/03/pta-algorithm-practice-notes-02/"/>
      <url>/2017/04/03/pta-algorithm-practice-notes-02/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章的算法题全部来自PTA，笔试发现在线编程题自己太水，计划每周坚持刷些ACM题。</p><h3 id="4-6-求单链表结点的阶乘和"><a href="#4-6-求单链表结点的阶乘和" class="headerlink" title="4-6 求单链表结点的阶乘和"></a>4-6 求单链表结点的阶乘和</h3><p>本题要求实现一个函数，求单链表L结点的阶乘和。这里默认所有结点的值非负，且题目保证结果在int范围内。==&gt;<a href="https://pta.patest.cn/pta/test/14/exam/3/question/738">传送门</a></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FactorialSum</span><span class="params">( List L )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line">    List L, p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; N; i++ ) &#123;</span><br><span class="line">        p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;Data);</span><br><span class="line">        p-&gt;Next = L;  </span><br><span class="line">        L = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FactorialSum(L));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FactorialSum</span><span class="params">( List L )</span></span><br><span class="line">&#123;</span><br><span class="line">    List p = L;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += fac(p-&gt;Data);</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-统计某类完全平方数"><a href="#4-7-统计某类完全平方数" class="headerlink" title="4-7 统计某类完全平方数"></a>4-7 统计某类完全平方数</h3><p>本题要求实现一个函数，判断任一给定整数N是否满足条件：它是完全平方数，又至少有两位数字相同，如144、676等。 ==&gt;<a href="https://pta.patest.cn/pta/test/14/exam/3/question/739">传送门</a></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span> ElementType;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Median</span><span class="params">( ElementType A[], <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType A[MAXN];</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, Median(A, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Median</span><span class="params">( ElementType A[], <span class="type">int</span> N )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    ElementType temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N / <span class="number">2</span> + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[pos] &lt; A[j])</span><br><span class="line">            &#123;</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != pos)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = A[i];</span><br><span class="line">            A[i] = A[pos];</span><br><span class="line">            A[pos] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A[N/<span class="number">2</span>];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-9-统计个位数字"><a href="#4-9-统计个位数字" class="headerlink" title="4-9 统计个位数字"></a>4-9 统计个位数字</h3><p>本题要求实现一个函数，可统计任一整数中某个位数出现的次数。例如-21252中，2出现了3次，则该函数应该返回3。 ==&gt;<a href="https://pta.patest.cn/pta/test/14/exam/3/question/741">传送门</a></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Count_Digit</span><span class="params">( <span class="type">const</span> <span class="type">int</span> N, <span class="type">const</span> <span class="type">int</span> D )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, D;         </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Count_Digit(N, D));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Count_Digit</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N, <span class="type">const</span> <span class="type">int</span> D )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = N;</span><br><span class="line">    <span class="keyword">if</span>(N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = -N;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">0</span> &amp;&amp; D == N) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> times[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(n) </span><br><span class="line">    &#123;</span><br><span class="line">        times[n%<span class="number">10</span>]++;</span><br><span class="line">        n = n / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> times[D];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-阶乘计算升级版"><a href="#4-10-阶乘计算升级版" class="headerlink" title="4-10 阶乘计算升级版"></a>4-10 阶乘计算升级版</h3><p>本题要求实现一个打印非负整数阶乘的函数。 ==&gt;<a href="https://pta.patest.cn/pta/test/14/exam/3/question/742">传送门</a></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Factorial</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    Print_Factorial(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Factorial</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid input&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result[<span class="number">5001</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 保存结果的数组 </span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;        <span class="comment">// 保存当前数组的长度 </span></span><br><span class="line">        <span class="type">int</span> carry_bit;          <span class="comment">// 进位</span></span><br><span class="line">        <span class="type">int</span> temp;           </span><br><span class="line"></span><br><span class="line">        result[<span class="number">1</span>] = <span class="number">1</span>;      <span class="comment">// 第一个计算时置为1 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 按位乘,计算阶乘 </span></span><br><span class="line">            carry_bit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = result[j] * i + carry_bit;</span><br><span class="line">                result[j] = temp % <span class="number">10</span>;</span><br><span class="line">                carry_bit = temp / <span class="number">10</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 进位,构造下一轮的数组 </span></span><br><span class="line">            <span class="keyword">while</span> (carry_bit != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                len++;</span><br><span class="line">                result[len] = carry_bit % <span class="number">10</span>;</span><br><span class="line">                carry_bit = carry_bit / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-然后是几点"><a href="#5-2-然后是几点" class="headerlink" title="5-2 然后是几点"></a>5-2 然后是几点</h3><p>读入两个数字，第一个数字以这样的四位数字表示当前时间，第二个数字表示分钟数，计算当前时间经过那么多分钟后是几点，结果也表示为四位数字。 ==&gt;<a href="https://pta.patest.cn/pta/test/14/exam/4/question/782">传送门</a></p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Main5_2</span> &#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        <span class="type">int</span> start, passed;</span><br><span class="line">        <span class="type">int</span> startHour, startMinute, totalMinute;</span><br><span class="line">        <span class="type">int</span> resultHour, resultMinute;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            start = sc.nextInt();</span><br><span class="line">            passed = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            startHour = start / <span class="number">100</span>;</span><br><span class="line">            startMinute = start % <span class="number">100</span>;</span><br><span class="line">            totalMinute = startHour * <span class="number">60</span> + startMinute;</span><br><span class="line"></span><br><span class="line">            totalMinute += passed;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (totalMinute == <span class="number">0</span>) &#123;</span><br><span class="line">                resultHour = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resultHour = totalMinute / <span class="number">60</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            resultMinute = totalMinute % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">printf</span>(<span class="string">&quot;%d%02d&quot;</span>, resultHour, resultMinute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题笔记一</title>
      <link href="/2017/03/25/algorithm-practice-notes-01/"/>
      <url>/2017/03/25/algorithm-practice-notes-01/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这篇文章记录了五篇算法练习题，内容如下：</p><ul><li>求二叉树到所有叶子节点的路径和</li><li>正则表达式‘.’和‘*’匹配</li><li>用两个栈实现队列</li><li>链表反转</li><li>合并两个排序链表</li></ul><span id="more"></span><h1 id="求二叉树到所有叶子节点的路径和"><a href="#求二叉树到所有叶子节点的路径和" class="headerlink" title="求二叉树到所有叶子节点的路径和"></a>求二叉树到所有叶子节点的路径和</h1><p>阿里2017实习招聘在线编程题：<br>对于一个由一位十进制整数构成的二叉树，如果深度不超过4，可以用一个三位十进制整数构成的数组表示，具体规则如下：<br>1.百位树表示树的层次L，1&lt;=L&lt;=4；十位数表示在该层次中的位置P，1&lt;=P&lt;=8；个位树表示数值V。<br>2.数组里，L一定是单增的，也就是说后一个树的L大于等于前一个树的L。<br>3.对于同一个L，P也是单增的，也就是说在L不变的情况下，后一个数的P大于等于前一个数的P。</p><p>例如：[113, 215, 221]对应的数是：<br>3<br>/    \<br>5     1</p><p>现在要求这个树所有到叶子节点的路径和，对于[113, 215, 221]这棵树，有两个路径<code>3-5</code>和<code>3-1</code>，路径和是<code>（3+5）+（3+1）= 12</code></p><p>解题思路：</p><ul><li>L,P,V三个输入参数，该二叉树最多为2<sup>L</sup>-1个节点，故可用二维数组<code>array[L][P] = V</code>的结构描述，这里扩大数组为<code>array[6][17]</code>是为了统一处理。</li><li>L决定层数,P决定在该层中的位置,V表示节点的值，举例下图。设位置无树节点时，值为-1，先全部初始化。</li><li>从根节点向下扫描，当前节点存在，判断其子节点是否存在，如果都不存在，证明当前结点为叶子节点，利用完全二叉树性质求出该节点的父节点，累加节点值V求出该路径长度；否则继续搜索。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241347608.png" alt=""></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/3/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BPath</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> L;</span><br><span class="line">        <span class="type">int</span> P;</span><br><span class="line">        <span class="type">int</span> V;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">17</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">17</span>; j++) &#123;</span><br><span class="line">                arr[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">            L = number/<span class="number">100</span>;</span><br><span class="line">            P = number/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">            V = number%<span class="number">10</span>;</span><br><span class="line">            arr[L][P] = V;</span><br><span class="line">            number = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;矩阵表示：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (arr[i][j] != -<span class="number">1</span> &amp;&amp; (arr[i+<span class="number">1</span>][j*<span class="number">2</span>] == -<span class="number">1</span> &amp;&amp; arr[i+<span class="number">1</span>][j*<span class="number">2</span>-<span class="number">1</span>] == -<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i, y = j; x &gt;= <span class="number">1</span>; x--) &#123;</span><br><span class="line">                        sum += arr[x][y];</span><br><span class="line">                        <span class="keyword">if</span> (y &gt;= <span class="number">1</span> &amp;&amp; y % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            y = y / <span class="number">2</span> +<span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt;= <span class="number">1</span> &amp;&amp; y % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                            y = y/<span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;路径和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正则表达式‘-’和‘-’匹配"><a href="#正则表达式‘-’和‘-’匹配" class="headerlink" title="正则表达式‘.’和‘*’匹配"></a><a href="https://www.nowcoder.com/practice/45327ae22b7b413ea21df13ee7d6429c?tpId=13&amp;&amp;tqId=11205&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/coding-interviews/question-ranking">正则表达式‘.’和‘*’匹配</a></h1><p>请实现一个函数用来匹配包括<code>.</code>和<code>*</code>的正则表达式。模式中的字符<code>.</code>表示任意一个字符，而<code>*</code>表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串<code>aaa</code>与模式<code>a.a</code>和<code>ab*ac*a</code>匹配，但是与<code>aa.a</code>和<code>ab*a</code>均不匹配。</p><p>思路：递归策略，匹配分三种情况：</p><ul><li>匹配成功：串和模式都到达末尾，返回true</li><li>匹配失败：模式先到达末尾，返回false</li><li>当前字符匹配：字符串和模式当前字符匹配(字符一模一样或者模式当前位为<code>.</code>)，则按照下一个字符是否为<code>.</code>;，是则根据匹配0次，1次，多次三种情况，设置字符串和模式移动相应的位置，返回三种情况匹配的并集（||）；下一个字符不为<code>.</code>;，则返回模式与串后移一位的匹配结果。</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(<span class="type">char</span>[] str, <span class="type">char</span>[] pattern)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || pattern == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">strIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">patternIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> matchCore(str, strIndex, pattern, patternIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matchCore</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> strIndex, <span class="type">char</span>[] pattern, <span class="type">int</span> patternIndex)</span> &#123;</span><br><span class="line">        <span class="comment">// 匹配成功：strIndex和patternIndex都到达末尾</span></span><br><span class="line">        <span class="keyword">if</span> (strIndex == str.length &amp;&amp; patternIndex == pattern.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配失败：则模式先到末尾</span></span><br><span class="line">        <span class="keyword">if</span> (strIndex != str.length &amp;&amp; patternIndex == pattern.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 模式下一个字符是*,且字符串和模式当前字符匹配(字符一模一样或者模式当前位为&#x27;.&#x27;)，则分三种匹配模式，模式后移2位</span></span><br><span class="line">        <span class="keyword">if</span> (patternIndex + <span class="number">1</span> &lt; pattern.length &amp;&amp; pattern[patternIndex+<span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((strIndex != str.length &amp;&amp; pattern[patternIndex] == str[strIndex])</span><br><span class="line">                    || (pattern[patternIndex] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; strIndex != str.length)) &#123;</span><br><span class="line">                <span class="keyword">return</span> matchCore(str, strIndex, pattern, patternIndex + <span class="number">2</span>) <span class="comment">// 视为x*匹配0次</span></span><br><span class="line">                        || matchCore(str, strIndex + <span class="number">1</span>, pattern, patternIndex + <span class="number">1</span>) <span class="comment">// 视为模式x*的x被匹配1次</span></span><br><span class="line">                        || matchCore(str, strIndex + <span class="number">1</span>, pattern, patternIndex); <span class="comment">// 视为x*匹配多次(&gt;=2)</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> matchCore(str, strIndex, pattern, patternIndex + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模式下一个字符不是*，字符串当前字符和模式当前字符匹配，则都后移1位；否则不匹配，返回false</span></span><br><span class="line">        <span class="keyword">if</span> ((strIndex != str.length &amp;&amp; str[strIndex] == pattern[patternIndex])</span><br><span class="line">                || (pattern[patternIndex] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; strIndex != str.length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> matchCore(str, strIndex + <span class="number">1</span>, pattern, patternIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p>思路：</p><ul><li>栈1进栈的顺序即元素入队顺序，出栈到栈2中后，栈2元素出栈的顺序就变成了出队的元素。</li><li>因此每次出队时，判断栈2是否为空，不为空直接出栈，为空则先从栈1的队列转移到栈2中，然后栈2出栈的顺序才是原来队列先进先出的顺序。</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LuoWenqing on 2017/5/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackChangeToQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> node)</span> &#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack2.empty() &amp;&amp; stack1.empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Queue is empty!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack2.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h1><p>输入一个链表，反转链表后，输出链表的所有元素。</p><p>解题思路：</p><ul><li>考虑一般情况，分为已经反转好的部分A，等待反转的部分B。反转的操作是，将B中的节点逐一指向反转好的部分的节点。比如原来是<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</code>变成<code>1&lt;-2&lt;-3 4-&gt;5-&gt;6</code>后，下一步是<code>1&lt;-2&lt;-3&lt;-4 5-&gt;6</code></li><li>那么为了实现链表的反转，我们需要记录当前节点head，当前节点的前驱pre(已经反转好的链表的头)，当前结点的后继next（如果不保存该节点，<code>head.next = pre</code>后就找不到待反转的部分了），执行下面的四个操作：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241347457.png" alt=""></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">next = head.next;</span><br><span class="line">head.next = pre;</span><br><span class="line">pre = head;</span><br><span class="line">head = next;</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合并两个排序链表"><a href="#合并两个排序链表" class="headerlink" title="合并两个排序链表"></a>合并两个排序链表</h1><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><p>思路：</p><ul><li>看到该题时，我首先想到的是归并排序算法的归并过程。考虑一般情况，当两个链表都不为空，比较两个链表的元素，值小的元素作为第三条链表的下一个元素，分别后移位置循环比较。</li><li>特殊情况是，链表list1或list2为空，直接返回另一条链表即可。</li></ul><p>非递归实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="comment">// 链表为空特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用头节点统一操作</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mergeHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> mergeHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> || list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">                current.next = list1;</span><br><span class="line">                current = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = list2;</span><br><span class="line">                current = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (list1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            current.next = list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            current.next = list2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mergeHead = mergeHead.next;</span><br><span class="line">        <span class="keyword">return</span> mergeHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归实现</p><p>其实我一直在思考，什么样的情况可以转化为或者说运用递归算法。其实可以这么考虑，如果要解决这个问题，我能否构造一个递推公式？又或者说问题变小后是否具有同样的特征。比如这里的两个链表的合并，如果我能分为连接好的部分，只需将剩下两条链表连接，而这两条链表的连接与父问题又具有同样的解法，如此，可以得到代码简洁的递归算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt; list2.val) &#123;</span><br><span class="line">            list1.next = Merge(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list2.next = Merge(list1, list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从线性表开始踏上数据结构王国的旅途</title>
      <link href="/2017/03/19/start-from-linearlist/"/>
      <url>/2017/03/19/start-from-linearlist/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线性表是数据结构中最基础的结构，本文从最简单的线性表开始，带你领略数据结构的魅力（手动滑稽），主要内容有：</p><ul><li>线性表的基本概念</li><li>顺序存储与链式存储</li><li>顺序表与单链表比较</li></ul><!-- toc --><h1 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h1><p>线性表（List）：由零个或多个数据元素组成的有限序列，像是这样的：<br>A<sub>1</sub> <code>—&gt;</code> A<sub>2</sub> <code>—&gt;</code> … <code>—&gt;</code> A<sub>i-1</sub> <code>—&gt;</code> A<sub>i</sub> <code>—&gt;</code> A<sub>i+1</sub> <code>—&gt;</code> … <code>—&gt;</code> A<sub>n</sub><br>其中，A<sub>i-1</sub>称为A<sub>i</sub>直接前驱,A<sub>i+1</sub>成为A<sub>i</sub>的直接后继。首元素A<sub>1</sub>无直接前驱，尾元素A<sub>n</sub>无直接后继，中间元素都有唯一直接前驱、直接后继。n=0时，为空表；n&gt;=0,为非空线性表。一个数据元素可以由若干个数据项组成。</p><h4 id="抽象表示"><a href="#抽象表示" class="headerlink" title="抽象表示"></a>抽象表示</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ADT LinearList</span><br><span class="line"></span><br><span class="line">Data </span><br><span class="line"><span class="comment">// 线性表的数据对象集合为&#123;a[1], a[2], a[3],....,a[n]&#125;，元素类型为自定义DataType.</span></span><br><span class="line"></span><br><span class="line"><span class="function">Operation  </span></span><br><span class="line"><span class="function">    <span class="title">InitList</span><span class="params">(*L)</span>:             初始化，建立空线性表L</span></span><br><span class="line"><span class="function">    ListLength(L):            返回L中元素个数</span></span><br><span class="line"><span class="function">    ListEmpty(L):             若线性表为空，返回true，否则返回false</span></span><br><span class="line"><span class="function">    ClearList(*L):            清空线性表</span></span><br><span class="line"><span class="function">    GetElem(L, i, *e):        将线性表L中第i个位置元素值返回给e</span></span><br><span class="line"><span class="function">    LocateElem(L, e):         在线性表L中查找与给定值e相等的元素</span></span><br><span class="line"><span class="function">    ListInsert(L, i, *e):     在L的第i个位置插入新元素e</span></span><br><span class="line"><span class="function">    ListDelete(*L, i, *e):    删除L中的第i个元素，并用e返回其值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">endADT</span></span><br></pre></td></tr></table></figure><p>学习线性表，关键掌握如何对线性表进行下列操作：</p><ul><li>初始化，判表是否为空，求表长；</li><li>插入，删除，访问节点。</li></ul><h1 id="顺序存储与链式存储"><a href="#顺序存储与链式存储" class="headerlink" title="顺序存储与链式存储"></a>顺序存储与链式存储</h1><p>按存储结构划分为顺序表，链表。<br>顺序存储结构，指在内存中用地址连续的一块存储空间依次存放线性表中的各元素。<br>链式存储结构，用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。<br>换句话说，顺序表逻辑、物理相邻；链表逻辑相邻，物理不要求相邻。</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储结构，指在内存中用地址连续的一块存储空间依次存放线性表中的各元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">  T* element; <span class="comment">// 自定义类型，动态数组</span></span><br><span class="line">  <span class="type">int</span> MaxSize; <span class="comment">// 数组存储数据元素，最大值为MAXSIZE</span></span><br><span class="line">  <span class="type">int</span> length; <span class="comment">// 线性表当前长度</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">  <span class="comment">/* 顺序表基本操作 */</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(<span class="type">int</span> MaxSize)</span></span>;</span><br><span class="line">  <span class="function">T <span class="title">GetElem</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>; </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">GetElem</span><span class="params">(<span class="type">int</span> i, T &amp;e)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(T &amp;e)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="type">int</span> i, T &amp;e)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="type">int</span> i, T &amp;e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>描述顺序存储结构需要三个属性（数据域部分）</p><ul><li>动态数组element, 各个元素构成的集合</li><li>表最大存储容量MaxSize</li><li>表当前长度length，即当前有意义的元素个数</li></ul><p>我喜欢用图描述顺序表：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241520203.png" alt=""><br>顺序表中各个元素的所占存储空间是连续的，如下图所示，如果进行插入节点（第二行）、删除节点（第三行），需要对表尾的所有元素整体进行移动，可以理解为我们体育课排队时中间插入了一个人，或者走掉一个人的情况。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241520977.png" alt=""></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(<span class="type">int</span> MaxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;MaxSize = MaxSize;</span><br><span class="line">    element = <span class="keyword">new</span> T[MaxSize];</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问节点"><a href="#访问节点" class="headerlink" title="访问节点"></a>访问节点</h4><p>访问包括按值访问、按下标索引节点两种。实现起来也很简单，只需循环遍历，按照条件定位节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 给定元素e，返回该元素位置 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(T &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= length &amp;&amp; element[i<span class="number">-1</span>] != e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (element[i<span class="number">-1</span>] == e) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>算法步骤：</p><ul><li>特殊情况处理，比如越界，表满</li><li>先将插入位置及其后面的元素整体后移</li><li>赋值，长度加一</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="type">int</span> index, T &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; length) &#123;</span><br><span class="line">        <span class="comment">/* 处理异常代码 */</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;插入位置错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (length &gt;= MaxSize)   </span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;表满不能插入&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = length; j &gt;= index; j--) </span><br><span class="line">    &#123;</span><br><span class="line">        element[j] = element[j<span class="number">-1</span>];  <span class="comment">// 节点依次后移</span></span><br><span class="line">    &#125;</span><br><span class="line">    element[index<span class="number">-1</span>] = e;</span><br><span class="line">    length ++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>算法步骤：</p><ul><li>特殊情况处理，如越界，为空</li><li>删除节点后面的元素整体向前移动</li><li>长度减一</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="type">int</span> index, T &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; length)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;删除位置出错&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;表为空不能删除&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = index; j &lt;= length - <span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        element[j<span class="number">-1</span>] = element[j];</span><br><span class="line">    &#125;</span><br><span class="line">    length --;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>线性表的链式存储结构，用一组任意的存储单元存数据元素，这组存储单元可以是连续的，也可以是不连续的。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241521055.png" alt=""><br>链表是一种灵活神奇的数据结构。定义一个单链表通常使用两个类，即节点类ListNode和链表类LinkedList，如何表达两者关系呢？可以选择复合类、内部类的方式，下面基于复合类方式说明。</p><p>其中，ListNode类包含数据域和指针域。数据域可以由基本数据类型组成,也可以是类类型等，指针域用于存放下一个节点的地址。ListNode类关心的是对节点本身的管理，如setter、getter等。LinkedList类包含ListNode属性，两者是聚合关系，关心对整条链的操作，如查找，插入、删除节点等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span><span class="comment">// 节点类ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ListNode</span>();</span><br><span class="line">    ~<span class="built_in">ListNode</span>();</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    ElemType data;</span><br><span class="line">    ListNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span><span class="comment">// 链表类LinkedList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">LinkedList</span>();</span><br><span class="line">     ~<span class="built_in">LinkedList</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">TraversLinkedList</span><span class="params">()</span></span>;<span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateLinkedList</span><span class="params">(<span class="type">int</span> n)</span></span>;      <span class="comment">// 构建链表</span></span><br><span class="line">    <span class="function">ListNode *<span class="title">Search</span><span class="params">(ElemType &amp;e)</span></span>;      <span class="comment">// 按值查找并返回节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> posistion, ElemType &amp;e)</span></span>; <span class="comment">// 插入节点操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> k, ElemType &amp;e)</span></span>;  <span class="comment">// 删除节点操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ClearLinkedList</span><span class="params">()</span></span>;<span class="comment">// 清空表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* 下面可根据需要添加属性 */</span></span><br><span class="line">    ListNode *head; <span class="comment">// 头指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h4><p>创建链表有头插，尾插两种策略。差别看图：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241521686.png" alt=""></p><p>头插法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(输入不为结束条件) &#123;</span><br><span class="line">    p = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">    p-&gt;data = value;</span><br><span class="line">    p-&gt;next = head;</span><br><span class="line">    head = p;</span><br><span class="line">    cin &gt;&gt; value;<span class="comment">//输入value，复杂类型可以设置输入函数</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>尾插法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(输入不为结束条件) &#123;</span><br><span class="line">    p = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">    p-&gt;data = value;</span><br><span class="line">    p-&gt;next = head;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)     <span class="comment">// 第一个节点处理，只执行一次</span></span><br><span class="line">    &#123;</span><br><span class="line">        head = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rear-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    rear = p;</span><br><span class="line">    cin &gt;&gt; value;<span class="comment">// 输入value，复杂类型可以设置输入函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rear != <span class="literal">NULL</span>) <span class="comment">// 对于非空表，尾节点指针域存NULL</span></span><br><span class="line">&#123;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如果链表为空需要特殊处理，使用头节点代替头指针，则链表的元素都可以看作表中间的元素，故而可以一视同仁，统一链表的查找，插入，删除等操作。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241521173.png" alt=""></p><p>头指针与头结点的区别：</p><table><thead><tr><th>头指针</th><th>头结点</th></tr></thead><tbody><tr><td>头指针即链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</td><td>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据一般无意义（也可能存放链表的长度）</td></tr><tr><td>头指针具有标识作用，所以常用头指针冠以链表的名字</td><td>有了头结点，对在第一元素结点前插入结点和删除第一节点，其操作与其它结点的操作就统一了</td></tr><tr><td>无论链表是否为空，头指针均不为空，头指针是链表的必要元素</td><td>头结点不一定是链表的必要元素</td></tr></tbody></table><h4 id="插入节点-1"><a href="#插入节点-1" class="headerlink" title="插入节点"></a>插入节点</h4><p>插入节点可以分为前插法，后插法。后插策略如图所示：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241522840.png" alt=""></p><p>算法步骤：</p><ul><li>创建新节点p</li><li>数据域赋值</li><li>当前节点current的后继作为新节点的后继</li><li>新节点p作为当前节点current的后继</li></ul><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next = current-&gt;next;</span><br><span class="line">current-&gt;next = p;</span><br></pre></td></tr></table></figure><p>前插法类似，只是按照插入条件（位置或按值）定位插入位置前一个节点，这里涉及到current和current-&gt;next的妙用了，请看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (current &amp;&amp; current-&gt;data != e) &#123; //...&#125;</span><br><span class="line"></span><br><span class="line">while (current-&gt;next &amp;&amp; current-&gt;next-&gt;data != e) &#123; //...&#125; </span><br></pre></td></tr></table></figure><p>前者关注当前节点，后者关注前驱节点。这个例子前插可以通过先做后插，再通过数据交换实现在节点后面插入的效果，后插也可以通过前插进行转换。链表是一个很灵活的结构，删除节点同样可以利用这个小技巧</p><h4 id="删除节点-1"><a href="#删除节点-1" class="headerlink" title="删除节点"></a>删除节点</h4><p>删除节点也有删除当前节点、删除后继节点两种，同时也可以运用替身法实现两者的转化。下面给出删除当前节点的两种实现方式：<br>借助前驱节点，即借用prev保存当前结点current的前驱。<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241522562.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prev-&gt;next = current-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> current;</span><br></pre></td></tr></table></figure><p>替身法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pnext = current-&gt;next;</span><br><span class="line">x = current-&gt;data;</span><br><span class="line">current-&gt;data = pnext-&gt;data;</span><br><span class="line">current-&gt;next = pnext-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> pnext;</span><br></pre></td></tr></table></figure><h4 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h4><p>按实现角度分：静态链表、动态链表。对于没有指针的语言，可以用数组描述链表，称为静态链表；而用指针进行动态分配回收内存空间的，称为动态链表。</p><p>静态链表：类比上面介绍的动态单链表，数组的元素设置两个数据域： data和cur。数据域data，用来存放数据元素，也就是通常我们要处理的数据；而cur相当于单链表中的next指针，存放该元素的后继，即下一个节点数组元素的下标，cur称为游标。 因为静态链表的空间是实现分配好的，所以，我们需要自定义内存的申请和释放，而我们可以将所有未被使用过的及已被删除的分量用游标链成一个备用的链表，每当进行插入时，便可以从备用链表上取得第一个结点作为待插入的新结点。</p><p>按链接方式分：单链表、循环链表、双向链表。<br>循环链表：将单链表中尾节点的指针域由NULL改为指向头节点，使单链表连接成一个环，首尾相接的链表称循环链表。循环链表实现了从一个节点出发，访问整条链表的每个节点。下面是非空的循环链表示意图：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241522991.png" alt=""></p><p>由于存在头节点，单向循环链表存在尾指针rear条件下访问开始节点即<code>rear-&gt;next-&gt;next</code>，只需<code>O(1)</code>的时间复杂度。<br>双向链表：单链表的每个节点中，增加一个指向前驱的指针域。下面简单描述双向链表的插入节点、删除节点操作。</p><p>插入节点：<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241522978.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;prior = current-&gt;prior;     </span><br><span class="line">current-&gt;prior-&gt;next = current;   </span><br><span class="line">s-&gt;next = current;          </span><br><span class="line">current-&gt;prior = s;         </span><br></pre></td></tr></table></figure><p>删除节点<br><img src="https://cdn.jsdelivr.net/gh/TsukasaMoe/PicturesOfTsukasaMoe/tech/202307241522628.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">current-&gt;prior-&gt;next = current-&gt;next;</span><br><span class="line">current-&gt;next-&gt;prior = current-&gt;prior;</span><br><span class="line"><span class="keyword">delete</span> current;</span><br></pre></td></tr></table></figure><h1 id="顺序表与单链表比较"><a href="#顺序表与单链表比较" class="headerlink" title="顺序表与单链表比较"></a>顺序表与单链表比较</h1><p>顺序表与单链表的选取可以考虑存储方式、时间性能、空间性能方面的要求。</p><ul><li>顺序表需预先分配内存空间，存储规模固定，分配少了易发生溢出；单链表按需分配存储空间，元素个数不受限制</li><li>顺序表查找时间复杂度为<code>O(1)</code>,插入和删除为<code>O(n)</code>;单链表查找为<code>O(n)</code>,插入和删除为<code>O(n)</code></li></ul><p>因此，存储空间无特别要求时，需要频繁进行查找访问操作时，选用顺序存储；频繁进行插入删除操作时，选用链式结构。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，把一直想总结的线性表知识写完了。写博客是一个知识整理的过程，你会去查阅许多知识，学习许多知识，把自己之前忽略的、认为重要的知识点进行归纳，万一自己忘了在翻来看看温故而知新，虽然不排除我靠，我怎么写出这样的渣文来的羞耻不已罢了。</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五味杂陈的感想</title>
      <link href="/2017/03/16/life-feelings-201703/"/>
      <url>/2017/03/16/life-feelings-201703/</url>
      
        <content type="html"><![CDATA[<!-- excerpt --></p><div id="aplayer1" class="aplayer" style="margin-bottom: 20px;"></div><script>var ap = new APlayer({element: document.getElementById("aplayer1"),narrow: false,autoplay: true,showlrc: 0,music: {title: "遥かな年月",author: "麻枝准",url: "http://static.tsukasa.moe/music/haruka.mp3",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p>转眼已是三月，再过一年多，我也和很多人一样，结束自己的学生时代。看到比我优秀的同学，网友很早就搭建了自己的博客平台，用于做学习笔记，记录生活点滴，表达自己的观点等等，这是一件很有意思的事情，我从中也得到了各方面的收获。因此，我也憧憬着有这样一个属于自己的一亩三分地，写写自己想写的东西，记录自己的成长。虽然一两个月前已经搭建好了，但是由于过于追求完美的构想，害怕迈出踉跄的第一步，无关是否站稳了，而是在于有没有尝试的第一步。如果连开启的勇气都没有，又怎么盼望迎来蔷薇般的未来？发觉时，自己已失去了许多快步先行的机会。有时候想太多，还不如动手实践一番来得实在。今后不管是悠闲地生活，还是忙碌于工作，我希望以积极的态度，平和的心境，对人对事。</p><hr><p>度过了童年、中学，而今大学也即将迎来终点。长达16年里，经历了许多事情，或快或慢地前进着。现在回想起来，也是一段漫长的、五味陈杂的岁月。</p><hr><p>21世纪里，我是不幸的，但又是幸运的。幸运的是我遇到了互联网，不幸的是我们相见太晚。我来自农村，没有什么机会接触到电脑这些东西，或者说我对电脑的了解只限于打游戏，看视频，办公。在这里我想感谢我的二舅舅，高考结束后填报志愿过程中，影响我最大的一个人。能在大学里学习我的专业，我觉得是一件很幸福的、值得骄傲的事情，即使这是有点苦逼的专业，却让我学到了很多有用的知识，认识了许多朋友，了解什么是真正的热爱，以及最终让我有非它莫属之感。一直以来，我没有什么特别热爱的事情，后来细想，并不是我没有尝试去接触的好奇，而是一些如经济、环境等外在的，缺乏自信的性格等内在的因素，使我权衡后放弃了尝试、坚持。说到这些话题，或许未免有些惋惜遗憾之感，但是我并不怪我的父母，他们将我弟和我送上大学，付出了太多我想不到的艰辛，教给我的知识比山还多，有的只是满心感谢。因为深刻体会到教育所扮演的地位重要性，深切感受体力活的疲惫，所以才想着要更加的努力，争取轮到我的时候，能给下一辈提供一个更高的起点。嘿嘿，想得是不是有点远？不过却是我内心不加修饰的真实的愿望。尽管也有怠慢的时候，但是时常反省让我没有迷失、沉沦。</p><hr><p>我是一个平凡的人，大概走的路也是大多数人走过的，那些敢于走不寻常路的人，且不论成功与否，至少是一个很有自己想法的人，我是非常敬佩他们的。认为对的事情，想做的事情就去做，我觉得这过程中需要勇气迎接各种阻力，需要持之以恒的热爱之情，热爱真的就是人披荆斩棘开辟未来的力量泉源。有热爱编程的人，可以连续不断学习12小时，可以深夜四五点依旧敲着代码。是的，热爱就是这样一种废寝忘食的疯狂，之所以热爱是因为他看到了其中于他的价值。如果你觉得自己努力了却没有得到相应的回报，大多数时候是不够热爱，没有足够的努力。我以前参加比赛活动都说只是抱着试一试的心态，想来那只是为自己失败后不那么难堪作的伪证，寻找开脱的理由除了说明自己能力不足之外并不能带来什么，因为比你优秀的人比你更努力，知不足而学才是应该做的，为取得优胜而参赛的才是最初应抱有的想法。在这里我觉得很感谢年级里两位同学，尽管只是网上聊过几句甚至都没有聊过的，从他们的博客中，我学到最宝贵的知识是怎么样做一个有追求的、勇于追求的人。崇哥说的”do what you love, love what you do，找到自己喜欢的节奏和方式，去做自己喜欢的事”这句我很喜欢，至此我又想到了一件事，不久前一个学妹谈到专业选择上自己与母亲出现了的分歧，其母基于自己人生阅历看，认为女儿当一名教师有保障，女儿遵从自己的意愿，选择经济贸易。争吵自然免不了，不过有时候通过反抗去捍卫自己认为正确的事物是值得的。崇哥的话，足以成为许多人的座右铭。工作和学习占据了我们人生大部分比重，如果人生的乐趣只从游戏、娱乐中获取，充其量只是一时的快感，过后依旧是空虚。在学习中、劳动中、工作中收获的快乐与成就感，是世界上没有哪种喜悦能与之相比的。虽然无法否认学习、工作不是一件轻松的事情，但是热爱着、累并快乐着就够了。最近看一本linux相关的书，发现作者观点与我现在的思想很契合，大概像交到志同道合的朋友般激动。他提到了稻盛和夫的《活法》，蛮感兴趣的，有时间买一本看看。毕竟，缺乏动力的时候，一两碗鸡汤是必要的。</p><hr><p>谈到学习、工作，都在不久的明年在一个终点结束，从另一个起点开始。大学前两年，我是玩过来的、迷茫过来的，等大三发觉时已是亡羊补牢之际。或许是觉得高中读书时辛苦，到了大学自由的环境里自然怠慢下来了。不过我现在认为许多人都只是缺乏热爱的事情，没有憧憬，懒于规划如何学习生活，不懂得学习收获知识其实是一件快乐的事情。直到看了支醉（一个up主）的视频，听他谈自己的经历想法，我不仅重新认识了许多概念，还听到许多未曾听过的东西。当时是深夜两点多看完，我一点都没有觉得这是在浪费生命，相反，那一刻最热忱的感受让我觉得不再迷茫重来焕然一新的人生该多好，不过世上并无后悔药，与其叹息逝去的事情，不如珍惜现在的机会。为什么当时我心底会涌现出快乐呢？答案很明显，因为我学到了知识。回到原点，知识共同富裕，珍惜时间就是为了更好的浪费时间等等理念，足以让我爽了一番。学校太多的条框和繁重的作业，把学习知识的乐趣限制了、消磨掉了，只留下必须完成的作业和必须取得的分数。我高中或许算得上是学霸，用现在的眼光来看空洞了许多，不过到现在都已升华为纯粹美好的回忆了。现在，我也愈发觉得世界上很多东西都很有趣，并且都非常想学，但这就相当做出人的一生是无限的荒唐假设一样，需有所取舍。上学期暑假推完了wa2（胃疼），很是喜欢”届かない恋”这首歌，因而断断续续的学起了吉他，而最近借着春招整理自己以前写的代码，写写博客，些许时间没练了，应该生疏了不少，嘛，虽然没有熟练过就是了，啊哈。不过，我相信我是可以将它作为一种业余的爱好一样坚持下去的。日语的学习在上学期真正的开始了，我很庆幸这次真的坚持了下来，尽管不知能否称得上热爱但在我心中它有着不可替代的一席之地。报了N2，这个学期估计是一个忙碌的学期，总之要好好努力践行自己的计划。说起春招，不得不直面一件很残酷的事情，我完全没有能够拿得出手的作品。年级里、班里能力比我强几百倍的同学也是深感找实习、找工作之难。当时内心和大三上般慌张，不过也很快明白这是不得不面临的事，人也只有经历各种各样的事情才能成长。互联网技术行业，是一个靠实力说话的、相对公平的行业，基本是英雄不论出身。我向往自力更生的生活，我现在要做的是好好利用在校的时间，提升自己的实力，做自己热爱的事。</p><hr><p>这里提到的、没提到的许多人，有认识的亲人、同学、老师，也有素未谋面的朋友，他们都是给了我极大影响的人，我从心底深处感谢他们能够培养我，关心我，引导我。无论是有意、无意的影响，都成了我人生的宝物。昊天的做价值的缔造者，IT界的开源共享精神，支醉的知识共同富裕，我觉得这三者成为了我人生的高尚追求，也在我的价值观中扎根生长。你充裕你的知识，我充裕我的知识，我分享我的知识给你，你分享你的知识给我，知识共同富裕构建的一定是一个高度文明的社会。虽然现在能做的事情很有限，不过我会努力成为自立的人、高尚的人。</p><hr><p>最后，谈谈我最喜欢的一部动漫（游戏）Clannad，这部给我带来了无数感动的作品。这部作品描述了一个成长的故事，无知而又纯洁的岁月里，朋也和渚从纯真的友情、化作相濡以沫的爱情、最后沉淀为责任担当的亲情，平凡、温暖、真挚。如果一个人很弱小，那么两个人在一起就能变得坚强。渚的温柔和坚强，朋也的守护和责任，互相支撑着对方，长长的坡道，一起攀登，一起成长，该是一件多么幸福的事情。上一年三月到五月两三个月间全通了游戏，接着又看了动漫，上个学期又重温了一遍动漫，直到现在依旧百感交集、满心感动。这部作品对我的影响不亚于许多潇洒的人，让我努力生活、如此渴望成长，大概是CL勾起了我对恋爱、人生的美好憧憬，也或许是从中得到了前行的力量吧。我相信看过的人没有不感动的，有好几个画面，我的眼泪总是止不住划过脸颊。人们称Clannad为生活和人生，我觉得这部作品是当之无愧的。作品里的BGM也和故事一样，时而轻松愉快、时而满载爱与希望、时而催人泪下，引用百科对小さな手のひら（小小手心）的评价是“轻柔质朴的旋律，温暖真挚的歌词，完全没有一点华丽的多余编排，绝不掺杂半点虚情假意，将故事中所有难以忘怀的点滴收集起来，就拼凑成了这首歌曲”，我爱Clannad.</p><hr><p>零零散散的说了很多，想了很多，原来自己有这么多话想说。至此，我很庆幸现在的自己在找到了目标，并且朝着自己的热爱的、追求的生活前进着。仰望星空，发现星星从未有过这般耀眼；跨步前行，感觉自己的步伐从未有过如此坚定。做自己热爱的事吧！加油！</p><blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">署名 - 非商业性使用 - 禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名 (Tsukasa) 及原文地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活与思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
